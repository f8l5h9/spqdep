[{"path":"https://f8l5h9.github.io/spqdep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 spqdep authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"spqdep user guide","text":"guide show functionalities spqdep package test spatial dependence qualitative dataset.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"datasets","dir":"Articles","previous_headings":"Introduction","what":"Datasets","title":"spqdep user guide","text":"Two data sets used examples guide: provinces_spain: division Spain provinces. multypolygon geometry isolated provinces (islands without neighbouring provinces). See example Paez et al. (2021). FastFood.sf: data set used example Ruiz, López, Páez (2010). geometry points. package install like usual dataset can loaded using next code","code":"library(spqdep) data(\"provinces_spain\", package = \"spqdep\") data(\"FastFood.sf\", package = \"spqdep\")"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"data-generating-process-dgp","dir":"Articles","previous_headings":"Introduction","what":"Data Generating Process (DGP)","title":"spqdep user guide","text":"Additional two dataset available spqdep package. user can generate structured spatial processes using  function. DGP generate function defined Ruiz, López, Páez (2010). next code show generate random process set random points localized square 1x1. case, connectivity criteria based 4 near neighborhood. next plot show qualitative spatial process defined.","code":"set.seed(123) N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(knn2nb(knearneigh(coor, k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) ggplot(data.frame(fx = fx, cx = cx, cy = cy), aes(x = cx, y = cy, color = fx)) +      geom_point(size = 6) +     theme_bw()"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"q-test","dir":"Articles","previous_headings":"","what":"Q-test","title":"spqdep user guide","text":"Q-test (Ruiz, López, Páez 2010) based m-surroundings apply Q-test necessary define set m-surroundings  function generate set m-surrounding. user can tuning several parameters obtain congruent set m-surroundings.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"m-surroundings","dir":"Articles","previous_headings":"Q-test","what":"m-surroundings","title":"spqdep user guide","text":"m.surround() function generate m-surroundings. output function object class m_surr Using  method user can explore coherence m-surroundings. example. next code obtain m-surroundings length m = 3 degree overlapping r = 1:","code":"m = 3 r = 1 mh <- m.surround(x = cbind(cx,cy), m = m, r = r) class(mh) ## [1] \"m_surr\" \"list\""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"methods-for-the-m_surr-class","dir":"Articles","previous_headings":"Q-test","what":"Methods for the m_surr class","title":"spqdep user guide","text":"spqdep three methods can apply class: ,  list m-surroundings generate summary characteristics m-surroundings show spatial structure m-surroundings  argument control user can tuning characteristics m-surroundings. example, control argument, user can ‘prune’ non-coherent m-surroundings.","code":"print(mh) ##       [,1] [,2] [,3] ##  [1,]    1   19   17 ##  [2,]    2   65   53 ##  [3,]    3   42   77 ##  [4,]    4   11   26 ##  [5,]    6   18   85 ##  [6,]    7   79   93 ##  [7,]    8   21   31 ##  [8,]   13   58   68 ##  [9,]   15   98   74 ## [10,]   17   76   96 ## [11,]   20   87   24 ## [12,]   22   82   92 ## [13,]   25    9   61 ## [14,]   26   14    7 ## [15,]   27   72   13 ## [16,]   31    5   20 ## [17,]   37   73   89 ## [18,]   38   30   15 ## [19,]   41   91   62 ## [20,]   46   47   49 ## [21,]   48   43   55 ## [22,]   49   29   60 ## [23,]   52   86    3 ## [24,]   53   97   69 ## [25,]   55   28   27 ## [26,]   56   64   41 ## [27,]   57   35   63 ## [28,]   60   44   70 ## [29,]   61   78   94 ## [30,]   62   54   46 ## [31,]   63   83   75 ## [32,]   67   50   37 ## [33,]   68   84    2 ## [34,]   69   59   22 ## [35,]   70   12   99 ## [36,]   71   34   67 ## [37,]   74   51    6 ## [38,]   75   36  100 ## [39,]   77   88    8 ## [40,]   85   80   57 ## [41,]   89   32    4 ## [42,]   90   45   38 ## [43,]   92   23   25 ## [44,]   93   39   95 ## [45,]   94   33   71 ## [46,]   95   81   90 ## [47,]   96   40   56 ## [48,]   99   10   48 ## [49,]  100   66   52 summary(mh) ##  ## Characteristics of m-surrounding: ##  ## Number of m-surrounding (R): 49 ## Length of m-surrounding (m): 3 ## Number no-symbolized observations: 1 ##  ## List of no-symbolized observations: ## 16 ##  ## List of the degree overlaping: ##     There are 2 m-surrounding that have intersection with 1 m-surrounding ##     There are 47 m-surrounding that have intersection with 2 m-surrounding ## Mean degree of overlaping: 1.9592 plot(mh, type = 1) control <- list (dtmaxknn = 10) mh.prune <- m.surround(x = coor, m = m, r = r, control = control) plot(mh.prune)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"the-q-test","dir":"Articles","previous_headings":"Q-test","what":"The Q-test","title":"spqdep user guide","text":"function  obtain Q-test spatial process develop Ruiz, López, Páez (2010). user must select longitude m-surroundings (m) overlapping degree (r). next code example, Q-test obtain DGP spatial process (fx) obtain . coordinates coor must included argument. output list result symbols based permutations (standard) combinations (equivalent). output function object spqtest class.","code":"q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"distribution-of-q-test","dir":"Articles","previous_headings":"Q-test","what":"Distribution of Q-test","title":"spqdep user guide","text":"asymptotic distribution default distribution obtain significance Q-test (Ruiz, López, Páez 2010). Alternatively, Monte Carlo method can used obtain significance test. paper López Páez (2012) describe approach.","code":"q.test.mc <- Q.test(fx = fx, coor = coor, m = 3, r = 1, distr = \"mc\") summary(q.test.mc)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"methods-for-the-spqtest-class","dir":"Articles","previous_headings":"Q-test","what":"Methods for the spqtest class","title":"spqdep user guide","text":"summary can apply object spqtest class: histogram number symbols obtain appling plot method.","code":"summary(q.test) plot(q.test) ## [[1]] ##  ## [[2]]"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"the-q-test-using-a-sf-object","dir":"Articles","previous_headings":"Q-test","what":"The Q-test using a sf object","title":"spqdep user guide","text":"sf object (Pebesma 2018) data frame can used input  function: method  show histogram number symbols","code":"# Case 3: With a sf object with isolated areas sf_use_s2(FALSE) ## Spherical geometry (s2) switched off provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") f1 <- ~ Male2Female q.test.sf <- Q.test(formula = f1, data = provinces_spain, m = 3, r = 1) plot(q.test.sf) ## [[1]] ##  ## [[2]]"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"maps-comparison--the-qmap-test","dir":"Articles","previous_headings":"","what":"Maps comparison. The QMap-test","title":"spqdep user guide","text":"function  obtain test maps comparison publish Ruiz, López, Páez (2012)","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"the-qmap-test","dir":"Articles","previous_headings":"Maps comparison. The QMap-test","what":"The QMap test","title":"spqdep user guide","text":"next code generate two qualitative spatial process different levels spatial dependence Q-Map apply. output  id object classes qmap htest","code":"p <- c(1/6,3/6,2/6) rho = 0.5 QY1 <- dgp.spq(p = p, listw = listw, rho = rho) rho = 0.8 QY2 <- dgp.spq(p = p, listw = listw, rho = rho) dt = data.frame(QY1,QY2) m = 3 r = 1 formula <- ~ QY1 + QY2 control <- list(dtmaxknn = 10) qmap <- Q.map.test(formula = formula, data = dt, coor = coor, m = m, r = r, type =\"combinations\", control = control) ## Warning in Q.map.test(formula = formula, data = dt, coor = coor, m = m, : The ## ratio between the number of symbolized observations and the number of symbols is ## lower than 5."},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"methods-for-qmap-class","dir":"Articles","previous_headings":"Maps comparison. The QMap-test","what":"Methods for qmap class","title":"spqdep user guide","text":"qmap object list two elements. element object class htext  method obtains distribution symbols confidence intervals specified user.","code":"print(qmap[[1]]) ##  ##  Q-Map test of Equivalence for qualitative data. ##   ##  Symbols type: combinations ##   ##  Ratio Symbolized observations/Num symbols = 4.6 ##  ## data:  QY1 and QY2 ## QE = 144.36, df = 9, p-value < 2.2e-16 ## alternative hypothesis: two.sided plot(qmap, ci=.6)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"runs-tests","dir":"Articles","previous_headings":"","what":"Runs tests","title":"spqdep user guide","text":"runs test (Ruiz, López, Páez 2021) global local versions","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"global-runs-test","dir":"Articles","previous_headings":"Runs tests","what":"Global Runs test","title":"spqdep user guide","text":"function sp.runs.test obtain spatial runs test. output function object classes sprunstest htest","code":"listw <- knearneigh(coor, k = 3) srq <- sp.runs.test(fx = fx, listw = listw)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"methods-for-spruntest-class","dir":"Articles","previous_headings":"Runs tests","what":"Methods for spruntest class","title":"spqdep user guide","text":"spqdep two methods class  y","code":"print(srq) ##  ##  Runs test of spatial dependence for qualitative data. Asymptotic ##  version ##  ## data:  mxf ## sp.runs test = -1.5064, p-value = 0.132 ## alternative hypothesis: two.sided ## sample estimates: ##          Total runs     Mean total runs Variance total runs  ##            268.0000            285.5152            135.1986 plot(srq)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"the-local-runs-test","dir":"Articles","previous_headings":"Runs tests","what":"The local Runs test","title":"spqdep user guide","text":"function local.sp.runs.test obtain local test based runs.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"asymptotic-version","dir":"Articles","previous_headings":"Runs tests","what":"Asymptotic version","title":"spqdep user guide","text":"Asymptotic version  method list statistic observation (point region)  method identify localization values local test significant.","code":"lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) ##     runs.i      E.i     Std.i    z.value    p.value ## 1        2 2.855152 0.8722689 -0.9803761 0.16345026 ## 2        3 2.855152 0.8722689  0.1660594 0.56594492 ## 3        2 2.855152 0.8722689 -0.9803761 0.16345026 ## 4        2 2.855152 0.8722689 -0.9803761 0.16345026 ## 5        4 2.855152 0.8722689  1.3124950 0.90532341 ## 6        2 2.855152 0.8722689 -0.9803761 0.16345026 ## 7        2 2.855152 0.8722689 -0.9803761 0.16345026 ## 8        4 2.855152 0.8722689  1.3124950 0.90532341 ## 9        3 2.855152 0.8722689  0.1660594 0.56594492 ## 10       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 11       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 12       4 2.855152 0.8722689  1.3124950 0.90532341 ## 13       3 2.855152 0.8722689  0.1660594 0.56594492 ## 14       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 15       4 2.855152 0.8722689  1.3124950 0.90532341 ## 16       3 2.855152 0.8722689  0.1660594 0.56594492 ## 17       4 2.855152 0.8722689  1.3124950 0.90532341 ## 18       3 2.855152 0.8722689  0.1660594 0.56594492 ## 19       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 20       4 2.855152 0.8722689  1.3124950 0.90532341 ## 21       3 2.855152 0.8722689  0.1660594 0.56594492 ## 22       3 2.855152 0.8722689  0.1660594 0.56594492 ## 23       3 2.855152 0.8722689  0.1660594 0.56594492 ## 24       3 2.855152 0.8722689  0.1660594 0.56594492 ## 25       4 2.855152 0.8722689  1.3124950 0.90532341 ## 26       4 2.855152 0.8722689  1.3124950 0.90532341 ## 27       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 28       3 2.855152 0.8722689  0.1660594 0.56594492 ## 29       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 30       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 31       3 2.855152 0.8722689  0.1660594 0.56594492 ## 32       3 2.855152 0.8722689  0.1660594 0.56594492 ## 33       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 34       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 35       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 36       3 2.855152 0.8722689  0.1660594 0.56594492 ## 37       3 2.855152 0.8722689  0.1660594 0.56594492 ## 38       4 2.855152 0.8722689  1.3124950 0.90532341 ## 39       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 40       3 2.855152 0.8722689  0.1660594 0.56594492 ## 41       4 2.855152 0.8722689  1.3124950 0.90532341 ## 42       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 43       3 2.855152 0.8722689  0.1660594 0.56594492 ## 44       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 45       3 2.855152 0.8722689  0.1660594 0.56594492 ## 46       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 47       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 48       3 2.855152 0.8722689  0.1660594 0.56594492 ## 49       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 50       3 2.855152 0.8722689  0.1660594 0.56594492 ## 51       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 52       3 2.855152 0.8722689  0.1660594 0.56594492 ## 53       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 54       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 55       4 2.855152 0.8722689  1.3124950 0.90532341 ## 56       4 2.855152 0.8722689  1.3124950 0.90532341 ## 57       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 58       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 59       4 2.855152 0.8722689  1.3124950 0.90532341 ## 60       3 2.855152 0.8722689  0.1660594 0.56594492 ## 61       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 62       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 63       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 64       3 2.855152 0.8722689  0.1660594 0.56594492 ## 65       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 66       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 67       3 2.855152 0.8722689  0.1660594 0.56594492 ## 68       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 69       3 2.855152 0.8722689  0.1660594 0.56594492 ## 70       3 2.855152 0.8722689  0.1660594 0.56594492 ## 71       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 72       4 2.855152 0.8722689  1.3124950 0.90532341 ## 73       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 74       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 75       3 2.855152 0.8722689  0.1660594 0.56594492 ## 76       4 2.855152 0.8722689  1.3124950 0.90532341 ## 77       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 78       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 79       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 80       3 2.855152 0.8722689  0.1660594 0.56594492 ## 81       3 2.855152 0.8722689  0.1660594 0.56594492 ## 82       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 83       3 2.855152 0.8722689  0.1660594 0.56594492 ## 84       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 85       3 2.855152 0.8722689  0.1660594 0.56594492 ## 86       4 2.855152 0.8722689  1.3124950 0.90532341 ## 87       3 2.855152 0.8722689  0.1660594 0.56594492 ## 88       4 2.855152 0.8722689  1.3124950 0.90532341 ## 89       3 2.855152 0.8722689  0.1660594 0.56594492 ## 90       3 2.855152 0.8722689  0.1660594 0.56594492 ## 91       3 2.855152 0.8722689  0.1660594 0.56594492 ## 92       3 2.855152 0.8722689  0.1660594 0.56594492 ## 93       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 94       1 2.855152 0.8722689 -2.1268116 0.01671787 ## 95       2 2.855152 0.8722689 -0.9803761 0.16345026 ## 96       4 2.855152 0.8722689  1.3124950 0.90532341 ## 97       4 2.855152 0.8722689  1.3124950 0.90532341 ## 98       3 2.855152 0.8722689  0.1660594 0.56594492 ## 99       3 2.855152 0.8722689  0.1660594 0.56594492 ## 100      3 2.855152 0.8722689  0.1660594 0.56594492 plot(lsrq, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"monte-carlo-local-runs-test","dir":"Articles","previous_headings":"Runs tests","what":"Monte Carlo local runs test","title":"spqdep user guide","text":"Monte Carlo distribution ot local test using sf object","code":"data(\"provinces_spain\") listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) ## although coordinates are longitude/latitude, st_intersects assumes that they are planar provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") plot(provinces_spain[\"Male2Female\"]) formula <- ~ Male2Female # Boots Version lsrq <- local.sp.runs.test(formula = formula, data = provinces_spain, listw = listw, distr =\"bootstrap\", nsim = 199) plot(lsrq, sf = provinces_spain, sig = 0.10)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"the-scan-test","dir":"Articles","previous_headings":"","what":"The scan test","title":"spqdep user guide","text":"Two scan tests identify clusters can apply test spatial structure qualitative spatial processes. scan test don’t need pre-define classical W conectivity matrix. See Kanaroglou (2016) scan tests contrasts null independence spatial qualitative process give additional information indicating one (perhaps ) spatial cluster(s). scan tests don’t asymptotic distribution. significance obtained permutational resampling. output scan function object classes scantest htest","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"scan-bernoulli","dir":"Articles","previous_headings":"The scan test","what":"Scan bernoulli","title":"spqdep user guide","text":"qualitative spatial process two categories bernoulli scan test obtain next code","code":"formula <- ~ Male2Female scan.spain <- spqdep::scan.test(formula = formula, data = provinces_spain, case=\"men\", nsim = 99, distr = \"bernoulli\") print(scan.spain) ##  ##  Scan test. Distribution: bernoulli ##  ## data:  Male2Female ## scan-loglik = 6.0359, p-value = 0.07 ## alternative hypothesis: High ## sample estimates: ##                                         ## Total observations in the MLC =   16.00 ## Expected cases in the MLC =       11.84 ## Observed cases in the MLC =       16.00"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"scan-multinomial","dir":"Articles","previous_headings":"The scan test","what":"scan multinomial","title":"spqdep user guide","text":"case spatial process three categories","code":"data(FastFood.sf) formula <- ~ Type scan.fastfood <- scan.test(formula = formula, data = FastFood.sf, nsim = 99, distr = \"multinomial\", windows = \"elliptic\",                             nv = 50) print(scan.fastfood) ##  ##  Scan test. Distribution: multinomial ##  ## data:  Type ## scan-loglik = 15.506, p-value < 2.2e-16 ## sample estimates: ##                  H     P     S Sum ## cases.expect 13.48 14.86 14.66  43 ## cases.observ 16.00  1.00 26.00  43"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"methods-for-scan-test","dir":"Articles","previous_headings":"The scan test","what":"Methods for scan test","title":"spqdep user guide","text":"Two method can used scantest objects:  ","code":"summary(scan.fastfood) ##  ## Summary of data: ## Distribution....................: multinomial ## Number of locations.............: 877 ## Total number of cases...........: 877 ## Names of cathegories...........: H P S ## Total cases per category........: 275 303 299 ## Percent cases per category......: 0.31 0.35 0.34 ##  ## Scan statistic: ## Total cases in the MLC.........: 43 ## Names of cathegories...........: H P S ## Observed cases in the MLC......: 13.48 14.86 14.66 ## Expected cases in the MLC......: 16 1 26 ## Value of statistic (loglik)....: 15.5058 ## p-value........................: 0 ##  ## IDs of cluster detect: ## Location IDs included.....:  68 849 152 499 630 763 827 765 617 600 607 48 58 588 743 843 74 122 750 115 645 61 226 796 876 699 610 597 596 721 751 53 186 659 778 63 106 229 585 738 612 131 208 ##  ##  ## Secondary Scan statistic. Number 1  ## Total cases in secondary cluster......:  16  ## Names of cathegories.................: H P S ## Percent per category total...........: 0.31 0.35 0.34 ## Percent per category inside cluster..: 0.56 0 0.44 ## Value of statisitic (loglik)....: 7.0897 ## p-value.........................: 0.94 ## Location IDs included..................:  270 79 733 119 144 676 634 787 145 266 141 688 46 81 650 791 ##  ##  ## Secondary Scan statistic. Number 2  ## Total cases in secondary cluster......:  6  ## Names of cathegories.................: H P S ## Percent per category total...........: 0.31 0.35 0.34 ## Percent per category inside cluster..: 0 0 1 ## Value of statisitic (loglik)....: 6.4964 ## p-value.........................: 0.98 ## Location IDs included..................:  652 599 769 799 589 674 ##  ##  ## Secondary Scan statistic. Number 3  ## Total cases in secondary cluster......:  6  ## Names of cathegories.................: H P S ## Percent per category total...........: 0.31 0.35 0.34 ## Percent per category inside cluster..: 0 0 1 ## Value of statisitic (loglik)....: 6.4964 ## p-value.........................: 0.98 ## Location IDs included..................:  870 695 618 825 824 648 ##  ##  ## Secondary Scan statistic. Number 4  ## Total cases in secondary cluster......:  13  ## Names of cathegories.................: H P S ## Percent per category total...........: 0.31 0.35 0.34 ## Percent per category inside cluster..: 0.38 0 0.62 ## Value of statisitic (loglik)....: 5.8025 ## p-value.........................: 0.99 ## Location IDs included..................:  183 636 604 598 127 656 83 109 716 204 828 624 768 ##  ##  ## Secondary Scan statistic. Number 5  ## Total cases in secondary cluster......:  9  ## Names of cathegories.................: H P S ## Percent per category total...........: 0.31 0.35 0.34 ## Percent per category inside cluster..: 0.22 0.78 0 ## Value of statisitic (loglik)....: 5.034 ## p-value.........................: 0.99 ## Location IDs included..................:  51 393 503 578 215 314 478 321 571 plot(scan.spain, sf = provinces_spain) plot(scan.fastfood, sf = FastFood.sf)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"similarity-test","dir":"Articles","previous_headings":"","what":"Similarity test","title":"spqdep user guide","text":"Farber, Marin, Páez (2014) paper develop similarity test","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"simiarity-test","dir":"Articles","previous_headings":"Similarity test","what":"Simiarity test","title":"spqdep user guide","text":" function calculates similarity test asymptotic distribution permutational resampling.","code":"coor <- st_coordinates(st_centroid(FastFood.sf)) listw <- spdep::knearneigh(coor, k = 4) formula <- ~ Type similarity <- similarity.test(formula = formula, data = FastFood.sf, listw = listw) print(similarity) ##  ##  Similarity test of spatial dependence for qualitative data. ##  Distribution: asymptotic ##  ## data:  Type ## Similarity-test = -5.4476, p-value = 5.105e-08 ## alternative hypothesis: two.sided"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"join-count-tests","dir":"Articles","previous_headings":"","what":"join-count tests","title":"spqdep user guide","text":"functions spdep R-package wrapped Bernoulli Multinomial distributions. Asymptotic Monte Carlo distributions (permutations) can used evaluate signification tests.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"asyntotic-distribution","dir":"Articles","previous_headings":"join-count tests","what":"Asyntotic distribution","title":"spqdep user guide","text":"","code":"provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Male2Female jc1 <- jc.test(formula = f1, data = provinces_spain, distr = \"asymptotic\", alternative = \"greater\", zero.policy = TRUE) ## although coordinates are longitude/latitude, st_intersects assumes that they are planar summary(jc1)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"monte-carlo-distribution","dir":"Articles","previous_headings":"join-count tests","what":"Monte Carlo distribution","title":"spqdep user guide","text":"","code":"jc1 <- jc.test(formula = f1, data = provinces_spain, distr = \"mc\", alternative = \"greater\", zero.policy = TRUE) ## although coordinates are longitude/latitude, st_intersects assumes that they are planar summary(jc1)"},{"path":"https://f8l5h9.github.io/spqdep/articles/spq_userguide.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"spqdep user guide","text":"Farber, Steven, Manuel Ruiz Marin, Antonio Páez. 2014. “Testing Spatial Independence Using Similarity Relations.” Geographical Analysis 47 (2): 97–120. https://doi.org/10.1111/gean.12044. Kanaroglou, Pavlos. 2016. Spatial Analysis Health Geography. Routledge. https://doi.org/10.4324/9781315610252. López, Fernando , Antonio Páez. 2012. “Distribution-Free Inference Q (M) Based Permutational Bootstrapping: Application Spatial Co-Location Pattern Firms Madrid.” Estadı́stica Española 54 (177): 135–56. https://doi.org/http://metodos.upct.es/falopez/Publications/Lopez%20and%20Paez%202012%20EE.pdf. Paez, Antonio, Fernando Lopez, Tatiane Menezes, Renata Cavalcanti, Maira Galdino da Rocha Pitta. 2021. “Spatio-Temporal Analysis Environmental Correlates Covid-19 Incidence Spain.” Geographical Analysis 53 (3): 397–421. https://doi.org/10.1111/gean.12241. Pebesma, Edzer. 2018. “Simple Features R: Standardized Support Spatial Vector Data.” R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009. Ruiz, Manuel, Fernando López, Antonio Páez. 2010. “Testing Spatial Association Qualitative Data Using Symbolic Dynamics.” Journal Geographical Systems 12 (3): 281–309. https://doi.org/10.1007/s10109-009-0100-1. ———. 2021. “Test Global Local Homogeneity Categorical Data Based Spatial Runs.” Working Paper. ———. 2012. “Comparison Thematic Maps Using Symbolic Entropy.” International Journal Geographical Information Science 26 (3): 413–39. https://doi.org/10.1080/13658816.2011.586327.","code":""},{"path":"https://f8l5h9.github.io/spqdep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fernando Lopez. Author, maintainer. Roman Minguez. Author. Antonio Paez. Author. Manuel Ruiz. Author.","code":""},{"path":"https://f8l5h9.github.io/spqdep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309 URL https://doi.org/10.1007/s10109-009-0100-1.","code":"@Article{,   title = {Testing for spatial association of qualitative data using symbolic dynamics},   author = {Manuel Ruiz and Fernando Lopez and Antonio Páez},   journal = {Journal of Geographical Systems},   year = {2010},   volume = {12},   number = {3},   pages = {281-309},   url = {https://doi.org/10.1007/s10109-009-0100-1}, }"},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"spqdep","dir":"","previous_headings":"","what":"Testing for Structure of Qualitative Data in Spatial Cross Sectional Panels","title":"Testing for Structure of Qualitative Data in Spatial Cross Sectional Panels","text":"goal spqdep provide tools analysis spatial qualitative data.","code":""},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Testing for Structure of Qualitative Data in Spatial Cross Sectional Panels","text":"can install released version spqdata CRAN : development version GitHub :","code":"#install.packages(\"spqdep\") # install.packages(\"devtools\") #devtools::install_github(\"paezha/spqdep\")"},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Testing for Structure of Qualitative Data in Spatial Cross Sectional Panels","text":"basic example shows solve common problem","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Boots.sf. — Boots.sf","title":"Boots.sf. — Boots.sf","text":"simple features object square regular lattice 16x16.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boots.sf. — Boots.sf","text":"","code":"data(Boots.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Boots.sf. — Boots.sf","text":"simple features dataframe 256 rows 1 columns: BW factor . Black White","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Boots.sf. — Boots.sf","text":"Boots, B. (2003) https://link.springer.com/content/pdf/10.1007/s10109-003-0110-3.pdf","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boots.sf. — Boots.sf","text":"Boots, B. (2003). Developing local measures spatial association     categorical data. Journal Geographical Systems, 5(2), 139-160.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boots.sf. — Boots.sf","text":"","code":"data(Boots.sf)  summary(Boots.sf) #>  BW           hexs     #>  B: 66   POLYGON:256   #>  W:190   epsg:NA:  0    plot(Boots.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of fast food restaurants in Toronto — FastFood.sf","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"simple feature (sf) dataframe containing locations selection fast food restaurants Toronto (data 2008). data projected using EPSG: 26917 (WGS 84/UTM Zone 17N).","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"","code":"data(FastFood.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"simple features object 614 rows 3 variables: ID Unique identifier record. Class Factor 3 types fast food restaurants: Chicken, Hamburger, Pizza, Sub. geometry Geometry simple features.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"Ruiz et al. (2010) https://link.springer.com/article/10.1007/s10109-009-0100-1","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative     data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Newark.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","title":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","text":"simple features object geocoded information respondents 1880 US Census selected demographic information coded dummy variables. data projected using EPSG: 32618 (WGS 84/UTM Zone 18N). coordinates jiggled create unique coordinates observation.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Newark.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","text":"","code":"data(Newark.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/Newark.sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","text":"simple features dataframe 21,520 rows 8 columns: ID Unique identifier record. YANKEE Dummy variable ethnicity respondent: 1 Yankee, 0 otherwise. IRISH Dummy variable ethnicity respondent: 1 Irish, 0 otherwise. GERMAN Dummy variable ethnicity respondent: 1 German, 0 otherwise. under30 Dummy variable age respondent: 1 younger 30 years old, 0 otherwise. mar Dummy variable marital status respondent: 1 married, 0 otherwise. usborn Dummy variable place birth respondent: 1 born US, 0 otherwise. geometry geometry simple features object","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Newark.sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","text":"Páez et al. (2012) doi: 10.1080/00045608.2011.620502","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Newark.sf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","text":"Paez, ., Ruiz, M, Lopez, F. & Logan, J. (2012). Measuring Ethnic Clustering      Exposure Q Statistic: Exploratory Analysis Irish, Germans, Yankees 1880 Newark.. Annals Association American Geographers.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Newark.sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract of 1880 US Census for Newark, New Jersey. — Newark.sf","text":"","code":"data(Newark.sf)  summary(Newark.sf) #>        ID            YANKEE           IRISH           GERMAN       #>  Min.   :    1   Min.   :0.0000   Min.   :0.000   Min.   :0.0000   #>  1st Qu.: 5381   1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:0.0000   #>  Median :10760   Median :0.0000   Median :0.000   Median :0.0000   #>  Mean   :10760   Mean   :0.3559   Mean   :0.205   Mean   :0.4391   #>  3rd Qu.:16140   3rd Qu.:1.0000   3rd Qu.:0.000   3rd Qu.:1.0000   #>  Max.   :21520   Max.   :1.0000   Max.   :1.000   Max.   :1.0000   #>     under30            mar             usborn               geometry     #>  Min.   :0.0000   Min.   :0.0000   Min.   :0.000   POINT        :21520   #>  1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.000   epsg:32618   :    0   #>  Median :0.0000   Median :0.0000   Median :1.000   +proj=utm ...:    0   #>  Mean   :0.3668   Mean   :0.2394   Mean   :0.562                         #>  3rd Qu.:1.0000   3rd Qu.:0.0000   3rd Qu.:1.000                         #>  Max.   :1.0000   Max.   :1.0000   Max.   :1.000"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"function compute QE QI tests maps comparison based symbolic entropy.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"","code":"Q.map.test(formula = formula, data = data, coor = NULL, m = m, r = 1, type = \"combinations\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"formula symbolic description two factors. data (optional) data frame sf object containing variables testing . coor (optional) 2xN vector coordinates. m length m-surrounding. r maximum overlapping two m-surroundings (default = 1). type Type symbols: \"permutations\" \"combinations\". Default \"combinations\" control Optional argument. See Control Argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"list two objects class htest. first one QE test Equivalence maps second one QI test independence maps. elements test :","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"data sf object coor argument coordinates observation must included.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"Several parameters construct m-surrounding dtmaxabs Delete degenerate surrounding based absolute distance observations. dtmaxpc value 0 1. Delete degenerate surrounding based distance. Delete m-surrounding maximum distance observation upper k percentage maximum distance anywhere observation. dtmaxknn integer value 'k'. Delete degenerate surrounding based near neighborhood criteria. Delete m-surrounding element m-surrounding include set k near neighborhood first element seedinit seed select initial element star algorithm compute m-surroundings.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"Ruiz M, López FA Páez (2011).     Comparison Thematic Maps Using Symbolic Entropy.       International Journal Geographical Information Science, 26, 413-439. Ruiz, M., López, FA, Páez, . (2010).     Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems, 12(3), 281-309.0.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"","code":"# Case 1: N <- 200 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::nb2listw(spdep::knn2nb(            spdep::knearneigh(cbind(cx,cy), k = 4))) p <- c(1/6, 3/6, 2/6) rho = 0.5 QY1 <- dgp.spq(p = p, listw = listw, rho = rho) rho = 0.8 QY2 <- dgp.spq(p = p, listw = listw, rho = rho) dt = data.frame(QY1,QY2) m = 3 r = 1 formula <- ~ QY1 + QY2 control <- list(dtmaxknn = 10) qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"combinations\", control = control) print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.1 #>  #> data:  QY1 and QY2 #> QE = 264.42, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.1 #>  #> data:  QY1 and QY2 #> QI = 57.081, df = 81, p-value = 0.9799 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap)  plot(qmap, ci=.6)  plot(qmap[[1]]$mh)  summary(qmap[[1]]$mh) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 91 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 14 #>  #> List of no-symbolized observations: #> 4 16 89 92 104 107 153 160 168 170 182 183 184 189 #>  #> List of the degree overlaping: #>     There are 8 m-surrounding that have intersection with 1 m-surrounding #>     There are 83 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.9121  control <- list(dtmaxknn = 20) qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"permutations\", control = control) #> Warning: The ratio between the number of symbolized observations and the number of symbols is lower than 5. print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: permutations #> \t #> \tRatio Symbolized observations/Num symbols = 3.41 #>  #> data:  QY1 and QY2 #> QE = 273.41, df = 26, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: permutations #> \t #> \tRatio Symbolized observations/Num symbols = 3.41 #>  #> data:  QY1 and QY2 #> QI = 225.34, df = 676, p-value = 1 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap)  plot(qmap[[1]]$mh)  qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"combinations\") print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.9 #>  #> data:  QY1 and QY2 #> QE = 284.48, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.9 #>  #> data:  QY1 and QY2 #> QI = 55.86, df = 81, p-value = 0.9851 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap)  control <- list(dtmaxknn = 10) qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"combinations\", control = control) print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.1 #>  #> data:  QY1 and QY2 #> QE = 264.42, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.1 #>  #> data:  QY1 and QY2 #> QI = 57.081, df = 81, p-value = 0.9799 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap)   # Case 2: data(provinces_spain) sf::sf_use_s2(FALSE) #> Spherical geometry (s2) switched off m = 3 r = 1  provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") provinces_spain$Coast <- factor(provinces_spain$Coast) levels(provinces_spain$Coast) = c(\"no\",\"yes\") formula <- ~ Coast + Male2Female qmap <- Q.map.test(formula = formula, data = provinces_spain, m = m, r = r,                    type =\"combinations\") print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 6 #>  #> data:  Coast and Male2Female #> QE = 71.83, df = 3, p-value = 1.731e-15 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 6 #>  #> data:  Coast and Male2Female #> QI = 7.5057, df = 9, p-value = 0.5846 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap)  plot(qmap[[1]]$mh)   control <- list(dtmaxknn = 6) qmap <- Q.map.test(formula = formula, data = provinces_spain, m = m, r = r,                    type =\"combinations\", control = control) print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 5 #>  #> data:  Coast and Male2Female #> QE = 58.615, df = 3, p-value = 1.162e-12 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 5 #>  #> data:  Coast and Male2Female #> QI = 7.1454, df = 9, p-value = 0.622 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap[[1]]$mh)  summary(qmap[[1]]$mh) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 20 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 8 #>  #> List of no-symbolized observations: #> 7 13 19 20 34 35 37 48 #>  #> List of the degree overlaping: #>     There are 4 m-surrounding that have intersection with 1 m-surrounding #>     There are 16 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.8"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"function compute Q test spatial qualitative data","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"","code":"Q.test(formula = NULL, data = NULL, na.action, fx = NULL, coor = NULL, m = 3, r = 1, distr = \"asymptotic\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"formula symbolic description factor(s). data (optional) data frame sf object points/multipolygons geometry containing variable(s) tested. na.action action NA values fx factor  matrix factors columns coor (optional) 2xN vector spatial coordinates. Used *data* spatial object m length m-surrounding (default = 3). r maximum overlapping two m-surroundings (default = 1). distr character. Distribution type \"asymptotic\" (default) \"mc\". control Optional argument. See Control Argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"list two object class htest. element list return :","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"distance character select type distance. Default = \"Euclidean\" Cartesian coordinates : one Euclidean, Hausdorff Frechet; geodetic coordinates, great circle distances computed (see sf::st_distance()) dtmaxabs Delete degenerate surrounding based absolute distance observations. dtmaxpc value 0 1. Delete degenerate surrounding based distance. Delete m-surrounding maximum distance observation upper k percentage maximum distance anywhere observation. dtmaxknn integer value 'k'. Delete degenerate surrounding based near neighborhood criteria. Delete m-surrounding element m-surrounding include set k near neighborhood first element nsim number simulations get Monte Carlo distribution.  Default = 999 seedinit seed select initial element star algorithm get compute m-surroundings start simulation","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative     data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309 López, FA, Páez. (2012). Distribution-free inference Q(m) based permutational bootstrapping: application     spatial co-location pattern firms Madrid Estadística Española, 177, 135-156.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to compute Q test for spatial qualitative data using\n       asymptotic distribution — Q.test","text":"","code":"# Case 1: With coordinates N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(cbind(cx,cy), k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1) summary(q.test) #> <div id=\"vrzdqffzog\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #vrzdqffzog .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #vrzdqffzog .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #vrzdqffzog .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #vrzdqffzog .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #vrzdqffzog .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #vrzdqffzog .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #vrzdqffzog .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #vrzdqffzog .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_left { #>   text-align: left; #> } #>  #> #vrzdqffzog .gt_center { #>   text-align: center; #> } #>  #> #vrzdqffzog .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #vrzdqffzog .gt_font_normal { #>   font-weight: normal; #> } #>  #> #vrzdqffzog .gt_font_bold { #>   font-weight: bold; #> } #>  #> #vrzdqffzog .gt_font_italic { #>   font-style: italic; #> } #>  #> #vrzdqffzog .gt_super { #>   font-size: 65%; #> } #>  #> #vrzdqffzog .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #vrzdqffzog .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #vrzdqffzog .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #vrzdqffzog .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #vrzdqffzog .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_title gt_font_normal\" style>Qualitative Dependence Test (Q)<\/th> #>     <\/tr> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Distribution: asymptotic. Distance: Euclidean<\/th> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Q<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">df<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">k<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">N<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">m<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">r<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R/n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">5k^m<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">V1 - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">125.36<\/td> #> <td class=\"gt_row gt_right\">26<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">49<\/td> #> <td class=\"gt_row gt_right\">27<\/td> #> <td class=\"gt_row gt_right\">1.81<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">V1 - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">21.15<\/td> #> <td class=\"gt_row gt_right\">9<\/td> #> <td class=\"gt_row gt_right\">0.01199<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">49<\/td> #> <td class=\"gt_row gt_right\">10<\/td> #> <td class=\"gt_row gt_right\">4.90<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> plot(q.test) #> [[1]]  #>  #> [[2]]  #>  print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable V1  m =  3  r =  1 #> Qp = 125.36, df = 26, p-value = 5.681e-15 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable V1  m =  3  r =  1 #> Qc = 21.152, df = 9, p-value = 0.01199 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    # \\donttest{ q.test.mc <- Q.test(fx = fx, coor = coor, m = 3, r = 1, distr = \"mc\") summary(q.test.mc) #> <div id=\"mvomnquzwd\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #mvomnquzwd .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #mvomnquzwd .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #mvomnquzwd .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #mvomnquzwd .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #mvomnquzwd .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #mvomnquzwd .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #mvomnquzwd .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #mvomnquzwd .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #mvomnquzwd .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #mvomnquzwd .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #mvomnquzwd .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #mvomnquzwd .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #mvomnquzwd .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mvomnquzwd .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #mvomnquzwd .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #mvomnquzwd .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mvomnquzwd .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #mvomnquzwd .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mvomnquzwd .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #mvomnquzwd .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mvomnquzwd .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #mvomnquzwd .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mvomnquzwd .gt_left { #>   text-align: left; #> } #>  #> #mvomnquzwd .gt_center { #>   text-align: center; #> } #>  #> #mvomnquzwd .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #mvomnquzwd .gt_font_normal { #>   font-weight: normal; #> } #>  #> #mvomnquzwd .gt_font_bold { #>   font-weight: bold; #> } #>  #> #mvomnquzwd .gt_font_italic { #>   font-style: italic; #> } #>  #> #mvomnquzwd .gt_super { #>   font-size: 65%; #> } #>  #> #mvomnquzwd .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #mvomnquzwd .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #mvomnquzwd .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #mvomnquzwd .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #mvomnquzwd .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"9\" class=\"gt_heading gt_title gt_font_normal\" style>Qualitative Dependence Test (Q)<\/th> #>     <\/tr> #>     <tr> #>       <th colspan=\"9\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Distribution: mc. Distance: Euclidean<\/th> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Q<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">k<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">N<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">m<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R/n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">5k^m<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"9\" class=\"gt_group_heading\">V1 - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">217.88<\/td> #> <td class=\"gt_row gt_right\">0.15300<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">27<\/td> #> <td class=\"gt_row gt_right\">3.70<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"9\" class=\"gt_group_heading\">V1 - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">48.23<\/td> #> <td class=\"gt_row gt_right\">0.13000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">10<\/td> #> <td class=\"gt_row gt_right\">10.00<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> plot(q.test.mc) #> [[1]]  #>  #> [[2]]  #>  print(q.test.mc) #> [[1]] #>  #> \tQp (mc distrib.) for symbolization based on permutations #>  #> data:  Variable V1  m =  3  r =  2 #> Qp = 217.88, df = NA, p-value = 0.153 #>  #>  #> [[2]] #>  #> \tQc (mc distrib.) for symbolization based on combinations #>  #> data:  Variable V1  m =  3  r =  2 #> Qc = 48.226, df = NA, p-value = 0.13 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"      # Case 2: With a sf object data(\"FastFood.sf\") f1 <- ~ Type q.test <- Q.test(formula = f1, data = FastFood.sf, m = c(3, 4), r = c(1, 2, 3), control = list(distance =\"Euclidean\")) #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data summary(q.test) #> <div id=\"vrzdqffzog\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #vrzdqffzog .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #vrzdqffzog .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #vrzdqffzog .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #vrzdqffzog .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #vrzdqffzog .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #vrzdqffzog .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #vrzdqffzog .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #vrzdqffzog .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_left { #>   text-align: left; #> } #>  #> #vrzdqffzog .gt_center { #>   text-align: center; #> } #>  #> #vrzdqffzog .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #vrzdqffzog .gt_font_normal { #>   font-weight: normal; #> } #>  #> #vrzdqffzog .gt_font_bold { #>   font-weight: bold; #> } #>  #> #vrzdqffzog .gt_font_italic { #>   font-style: italic; #> } #>  #> #vrzdqffzog .gt_super { #>   font-size: 65%; #> } #>  #> #vrzdqffzog .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #vrzdqffzog .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #vrzdqffzog .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #vrzdqffzog .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #vrzdqffzog .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_title gt_font_normal\" style>Qualitative Dependence Test (Q)<\/th> #>     <\/tr> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Distribution: asymptotic. Distance: Euclidean<\/th> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Q<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">df<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">k<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">N<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">m<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">r<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R/n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">5k^m<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">Type - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">40.10<\/td> #> <td class=\"gt_row gt_right\">26<\/td> #> <td class=\"gt_row gt_right\">0.03812<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">438<\/td> #> <td class=\"gt_row gt_right\">27<\/td> #> <td class=\"gt_row gt_right\">16.22<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">71.71<\/td> #> <td class=\"gt_row gt_right\">26<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">875<\/td> #> <td class=\"gt_row gt_right\">27<\/td> #> <td class=\"gt_row gt_right\">32.41<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">94.82<\/td> #> <td class=\"gt_row gt_right\">80<\/td> #> <td class=\"gt_row gt_right\">0.12338<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">292<\/td> #> <td class=\"gt_row gt_right\">81<\/td> #> <td class=\"gt_row gt_right\">3.60<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">121.90<\/td> #> <td class=\"gt_row gt_right\">80<\/td> #> <td class=\"gt_row gt_right\">0.00178<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">437<\/td> #> <td class=\"gt_row gt_right\">81<\/td> #> <td class=\"gt_row gt_right\">5.40<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">151.65<\/td> #> <td class=\"gt_row gt_right\">80<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">874<\/td> #> <td class=\"gt_row gt_right\">81<\/td> #> <td class=\"gt_row gt_right\">10.79<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">Type - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">26.51<\/td> #> <td class=\"gt_row gt_right\">9<\/td> #> <td class=\"gt_row gt_right\">0.00169<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">438<\/td> #> <td class=\"gt_row gt_right\">10<\/td> #> <td class=\"gt_row gt_right\">43.80<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">64.67<\/td> #> <td class=\"gt_row gt_right\">9<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">875<\/td> #> <td class=\"gt_row gt_right\">10<\/td> #> <td class=\"gt_row gt_right\">87.50<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">28.83<\/td> #> <td class=\"gt_row gt_right\">14<\/td> #> <td class=\"gt_row gt_right\">0.01102<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">292<\/td> #> <td class=\"gt_row gt_right\">15<\/td> #> <td class=\"gt_row gt_right\">19.47<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">44.19<\/td> #> <td class=\"gt_row gt_right\">14<\/td> #> <td class=\"gt_row gt_right\">0.00006<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">437<\/td> #> <td class=\"gt_row gt_right\">15<\/td> #> <td class=\"gt_row gt_right\">29.13<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right\">81.26<\/td> #> <td class=\"gt_row gt_right\">14<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">877<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">874<\/td> #> <td class=\"gt_row gt_right\">15<\/td> #> <td class=\"gt_row gt_right\">58.27<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> plot(q.test) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>  #> [[5]]  #>  #> [[6]]  #>  #> [[7]]  #>  #> [[8]]  #>  #> [[9]]  #>  #> [[10]]  #>  print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  3  r =  1 #> Qp = 40.102, df = 26, p-value = 0.03812 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  3  r =  1 #> Qc = 26.507, df = 9, p-value = 0.001687 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  3  r =  2 #> Qp = 71.712, df = 26, p-value = 3.725e-06 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  3  r =  2 #> Qc = 64.671, df = 9, p-value = 1.672e-10 #>  #>  #> [[5]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  4  r =  1 #> Qp = 94.821, df = 80, p-value = 0.1234 #>  #>  #> [[6]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  4  r =  1 #> Qc = 28.831, df = 14, p-value = 0.01102 #>  #>  #> [[7]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  4  r =  2 #> Qp = 121.9, df = 80, p-value = 0.001776 #>  #>  #> [[8]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  4  r =  2 #> Qc = 44.19, df = 14, p-value = 5.516e-05 #>  #>  #> [[9]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  4  r =  3 #> Qp = 151.65, df = 80, p-value = 2.375e-06 #>  #>  #> [[10]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  4  r =  3 #> Qc = 81.256, df = 14, p-value = 1.654e-11 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     # Case 3: With a sf object with isolated areas data(\"provinces_spain\") sf::sf_use_s2(FALSE) provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Male2Female q.test <- Q.test(formula = f1, data = provinces_spain, m = 3, r = 1, control = list(seedinit = 1111)) summary(q.test) #> <div id=\"vrzdqffzog\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #vrzdqffzog .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #vrzdqffzog .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #vrzdqffzog .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #vrzdqffzog .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #vrzdqffzog .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #vrzdqffzog .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #vrzdqffzog .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #vrzdqffzog .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_left { #>   text-align: left; #> } #>  #> #vrzdqffzog .gt_center { #>   text-align: center; #> } #>  #> #vrzdqffzog .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #vrzdqffzog .gt_font_normal { #>   font-weight: normal; #> } #>  #> #vrzdqffzog .gt_font_bold { #>   font-weight: bold; #> } #>  #> #vrzdqffzog .gt_font_italic { #>   font-style: italic; #> } #>  #> #vrzdqffzog .gt_super { #>   font-size: 65%; #> } #>  #> #vrzdqffzog .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #vrzdqffzog .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #vrzdqffzog .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #vrzdqffzog .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #vrzdqffzog .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_title gt_font_normal\" style>Qualitative Dependence Test (Q)<\/th> #>     <\/tr> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Distribution: asymptotic. Distance: Euclidean<\/th> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Q<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">df<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">k<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">N<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">m<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">r<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R/n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">5k^m<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">Older - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">33.42<\/td> #> <td class=\"gt_row gt_right\">26<\/td> #> <td class=\"gt_row gt_right\">0.15023<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">24<\/td> #> <td class=\"gt_row gt_right\">27<\/td> #> <td class=\"gt_row gt_right\">0.89<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">Older - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">16.67<\/td> #> <td class=\"gt_row gt_right\">9<\/td> #> <td class=\"gt_row gt_right\">0.05412<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">24<\/td> #> <td class=\"gt_row gt_right\">10<\/td> #> <td class=\"gt_row gt_right\">2.40<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">Male2Female - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">4.34<\/td> #> <td class=\"gt_row gt_right\">7<\/td> #> <td class=\"gt_row gt_right\">0.74025<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">24<\/td> #> <td class=\"gt_row gt_right\">8<\/td> #> <td class=\"gt_row gt_right\">3.00<\/td> #> <td class=\"gt_row gt_right\">40<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">Male2Female - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">0.69<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">0.87543<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">24<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">6.00<\/td> #> <td class=\"gt_row gt_right\">40<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Older  m =  3  r =  1 #> Qp = 33.421, df = 26, p-value = 0.1502 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Older  m =  3  r =  1 #> Qc = 16.671, df = 9, p-value = 0.05412 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Male2Female  m =  3  r =  1 #> Qp = 4.3369, df = 7, p-value = 0.7403 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Male2Female  m =  3  r =  1 #> Qc = 0.69051, df = 3, p-value = 0.8754 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    plot(q.test) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>  q.test.mc <- Q.test(formula = f1, data = provinces_spain, m = 4, r = 3, distr = \"mc\", control = list(seedinit = 1111)) summary(q.test.mc) #> <div id=\"friuvihjft\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #friuvihjft .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #friuvihjft .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #friuvihjft .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #friuvihjft .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #friuvihjft .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #friuvihjft .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #friuvihjft .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #friuvihjft .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #friuvihjft .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #friuvihjft .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #friuvihjft .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #friuvihjft .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #friuvihjft .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #friuvihjft .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #friuvihjft .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #friuvihjft .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #friuvihjft .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #friuvihjft .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #friuvihjft .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #friuvihjft .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #friuvihjft .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #friuvihjft .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #friuvihjft .gt_left { #>   text-align: left; #> } #>  #> #friuvihjft .gt_center { #>   text-align: center; #> } #>  #> #friuvihjft .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #friuvihjft .gt_font_normal { #>   font-weight: normal; #> } #>  #> #friuvihjft .gt_font_bold { #>   font-weight: bold; #> } #>  #> #friuvihjft .gt_font_italic { #>   font-style: italic; #> } #>  #> #friuvihjft .gt_super { #>   font-size: 65%; #> } #>  #> #friuvihjft .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #friuvihjft .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #friuvihjft .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #friuvihjft .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #friuvihjft .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"9\" class=\"gt_heading gt_title gt_font_normal\" style>Qualitative Dependence Test (Q)<\/th> #>     <\/tr> #>     <tr> #>       <th colspan=\"9\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Distribution: mc. Distance: Euclidean<\/th> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Q<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">k<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">N<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">m<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R/n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">5k^m<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"9\" class=\"gt_group_heading\">Older - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">96.34<\/td> #> <td class=\"gt_row gt_right\">0.50000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">81<\/td> #> <td class=\"gt_row gt_right\">0.62<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"9\" class=\"gt_group_heading\">Older - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">42.74<\/td> #> <td class=\"gt_row gt_right\">0.87700<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">15<\/td> #> <td class=\"gt_row gt_right\">3.33<\/td> #> <td class=\"gt_row gt_right\">405<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"9\" class=\"gt_group_heading\">Male2Female - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">28.52<\/td> #> <td class=\"gt_row gt_right\">0.48800<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">16<\/td> #> <td class=\"gt_row gt_right\">3.12<\/td> #> <td class=\"gt_row gt_right\">80<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"9\" class=\"gt_group_heading\">Male2Female - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">6.35<\/td> #> <td class=\"gt_row gt_right\">0.90900<\/td> #> <td class=\"gt_row gt_right\">2<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">4<\/td> #> <td class=\"gt_row gt_right\">50<\/td> #> <td class=\"gt_row gt_right\">5<\/td> #> <td class=\"gt_row gt_right\">10.00<\/td> #> <td class=\"gt_row gt_right\">80<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> print(q.test.mc) #> [[1]] #>  #> \tQp (mc distrib.) for symbolization based on permutations #>  #> data:  Variable Older  m =  4  r =  3 #> Qp = 96.34, df = NA, p-value = 0.5 #>  #>  #> [[2]] #>  #> \tQc (mc distrib.) for symbolization based on combinations #>  #> data:  Variable Older  m =  4  r =  3 #> Qc = 42.739, df = NA, p-value = 0.877 #>  #>  #> [[3]] #>  #> \tQp (mc distrib.) for symbolization based on permutations #>  #> data:  Variable Male2Female  m =  4  r =  3 #> Qp = 28.522, df = NA, p-value = 0.488 #>  #>  #> [[4]] #>  #> \tQc (mc distrib.) for symbolization based on combinations #>  #> data:  Variable Male2Female  m =  4  r =  3 #> Qc = 6.3535, df = NA, p-value = 0.909 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    plot(q.test.mc) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>   # Case 4: Examples with multipolygons library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is FALSE fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 qb79 <- quantile(nc$BIR79) nc$QBIR79 <- (nc$BIR79 > qb79[2]) + (nc$BIR79 > qb79[3]) + (nc$BIR79 >= qb79[4]) + 1 nc$QBIR79 <- as.factor(nc$QBIR79) plot(nc[\"QBIR79\"], pal = c(\"#FFFEDE\",\"#FFDFA2\", \"#FFA93F\", \"#D5610D\"),      main = \"BIR79 (Quartiles)\")  sid79 <- quantile(nc$SID79) nc$QSID79 <- (nc$SID79 > sid79[2]) + (nc$SID79 > sid79[3]) + (nc$SID79 >= sid79[4]) + 1 nc$QSID79 <- as.factor(nc$QSID79) plot(nc[\"QSID79\"], pal = c(\"#FFFEDE\",\"#FFDFA2\", \"#FFA93F\", \"#D5610D\"),      main = \"SID79 (Quartiles)\")  f1 <- ~ QSID79 + QBIR79 lq1nc <- Q.test(formula = f1, data = nc, m = 5, r = 2, control = list(seedinit = 1111, dtmaxpc = 0.5, distance = \"Euclidean\") ) #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  print(lq1nc) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qp = 207.34, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qc = 142.18, df = 55, p-value = 1.195e-09 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qp = 221.81, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qc = 129.25, df = 55, p-value = 6.49e-08 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     lq2nc <- Q.test(formula = f1, data = nc, m = 5, r = 2, control = list(dtmaxpc = 0.2) ) #>  #>  Threshold distance:  1.65441 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  3  #>  #>  Index of spatial observations excluded:  19 3 28  #>  #>  Threshold distance:  1.65441 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  3  #>  #>  Index of spatial observations excluded:  19 3 28  print(lq2nc) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qp = 193.35, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qc = 124.75, df = 55, p-value = 2.466e-07 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qp = 206.72, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qc = 114.82, df = 55, p-value = 4.161e-06 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     lq3nc <- Q.test(formula = f1, data = nc, m = 5, r = 2, control = list(dtmaxknn = 5) ) print(lq3nc) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qp = 40.757, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qc = 32.933, df = 55, p-value = 0.9921 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qp = 44.361, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qc = 31.932, df = 55, p-value = 0.9946 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     # Case 5: Examples with points and matrix of variables fx <- matrix(c(nc$QBIR79, nc$QSID79), ncol = 2, byrow = TRUE) mctr <- suppressWarnings(sf::st_centroid(st_geometry(nc))) mcoor <- st_coordinates(mctr)[,c(\"X\",\"Y\")] q.test <- Q.test(fx = fx, coor = mcoor, m = 5, r = 2,                  control = list(seedinit = 1111, dtmaxpc = 0.5)) #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable V1  m =  5  r =  2 #> Qp = 212.57, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable V1  m =  5  r =  2 #> Qc = 136.55, df = 55, p-value = 6.993e-09 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable V2  m =  5  r =  2 #> Qp = 214.88, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable V2  m =  5  r =  2 #> Qc = 118.81, df = 55, p-value = 1.362e-06 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    plot(q.test) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>   # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to create symbols — cr_symb","title":"A function to create symbols — cr_symb","text":"function obtains symbols ...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to create symbols — cr_symb","text":"","code":"cr_symb(k = k, m = m)"},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to create symbols — cr_symb","text":"k number categories m length m-surrounding","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to create symbols — cr_symb","text":"list two types symbols. Permutation Combinations-totals","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to create symbols — cr_symb","text":"Aquí Antonio escribe una linda historia ...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to create symbols — cr_symb","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative     data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to create symbols — cr_symb","text":"","code":"# Example 1: Obtain symbols for k=2 classes and m-surroundings of size 5 symb25 <- cr_symb(2,5) symb25$p_symb # Permutations symbols #>        [,1] [,2] [,3] [,4] [,5] #> Perm1     1    1    1    1    1 #> Perm2     1    1    1    1    2 #> Perm3     1    1    1    2    1 #> Perm4     1    1    1    2    2 #> Perm5     1    1    2    1    1 #> Perm6     1    1    2    1    2 #> Perm7     1    1    2    2    1 #> Perm8     1    1    2    2    2 #> Perm9     1    2    1    1    1 #> Perm10    1    2    1    1    2 #> Perm11    1    2    1    2    1 #> Perm12    1    2    1    2    2 #> Perm13    1    2    2    1    1 #> Perm14    1    2    2    1    2 #> Perm15    1    2    2    2    1 #> Perm16    1    2    2    2    2 #> Perm17    2    1    1    1    1 #> Perm18    2    1    1    1    2 #> Perm19    2    1    1    2    1 #> Perm20    2    1    1    2    2 #> Perm21    2    1    2    1    1 #> Perm22    2    1    2    1    2 #> Perm23    2    1    2    2    1 #> Perm24    2    1    2    2    2 #> Perm25    2    2    1    1    1 #> Perm26    2    2    1    1    2 #> Perm27    2    2    1    2    1 #> Perm28    2    2    1    2    2 #> Perm29    2    2    2    1    1 #> Perm30    2    2    2    1    2 #> Perm31    2    2    2    2    1 #> Perm32    2    2    2    2    2 symb25$c_symb # Combinations-totals symbols #>      level1 level2 #> [1,]      5      0 #> [2,]      4      1 #> [3,]      3      2 #> [4,]      2      3 #> [5,]      1      4 #> [6,]      0      5"},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of qualitative process with spatial structure — dgp.spq","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"purpose function dgp.spq generate random dataset dimensions spatial structure decided user. function may useful pure simulation experiments aim showing specific properties characteristics spatial qualitative dataset.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"","code":"dgp.spq(listw = listw, p = p,  rho = rho, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"listw listw object class nb, knn, listw o matrix created example nb2listw spatialreg package; nb2listw given, set spatial weights listw argument. can also spatial weighting matrix order (NxN) instead listw object. Default = NULL. p vector percentage elements categories. lengths must number categories. sum elements vector must 1. rho level spatial dependence (values -1 y 1) control List additional control arguments. See control argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"factor length N (listw ia matrix order (NxN)) levels first capital letters: \"\", \"B\", .... description DGP available Páez et al. 2010 (pag 291)","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"seedinit seed generate data sets","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative     data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"","code":"# N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(cbind(cx,cy), k = 4))) xf <- dgp.spq(list = listw, p = p, rho = rho)  data(provinces_spain) listw <- spdep::poly2nb(provinces_spain, queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar p <- c(1/6,3/6,2/6) rho = 0.9 xf <- dgp.spq(p = p, listw = listw, rho = rho) provinces_spain$xf <- xf plot(provinces_spain[\"xf\"])"},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","title":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","text":"function compute joincount   tests spatial qualitative data. function   wrapper joincount.multi   joincount.test   invspdep package.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","text":"","code":"jc.test(formula = NULL,                data = NULL,                fx = NULL,                listw = NULL,                na.action,                zero.policy = NULL,                distr = \"asymptotic\",                alternative = \"greater\",                control =list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","text":"formula symbolic description factor(s). data (optional) data frame sf object points/multipolygons geometry containing variable(s) tested. fx factor  matrix factors columns listw listw object created example nb2listw spdep package; nb2listw given, spatial weights built using object given listw argument (usually sf object). Default = NULL. na.action function (default options(\"na.action\")), can also na.omit na.exclude. may necessary set zero.policy TRUE subsetting may create -neighbour observations. zero.policy Similar corresponding parameter lagsarlm function spatialreg package. TRUE assign zero lagged value zones without neighbours. Default = NULL. distr character. Distribution type \"asymptotic\" (default) \"mc\". alternative character string specifying alternative hypothesis, must one \"greater\" (default), \"less\". control list additional arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","text":"spjctest object. type object   list htest objects.   length list number   factor variables included formula number columns   fx.   element list can jclist object, binomial factors,   jcmulti object multinomial   factors. See joincount.test  joincount.multi  additional details.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","text":"Cliff, . D., Ord, J. K. 1981 Spatial processes, Pion, pp. 19-20. Upton, G., Fingleton, B. 1985 Spatial data analysis example: point pattern qualitative data, Wiley, pp. 158–170.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to compute joint-count test for\n  binomial and multinomial (asymptotic and\n  permutation distributions). — jc.test","text":"","code":"## Case 1 ## Multinomial + Binomial using a sf multipolygon # \\donttest{ data(\"provinces_spain\") sf::sf_use_s2(FALSE) provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Male2Female jc1 <- jc.test(formula = f1,                data = provinces_spain,                distr = \"mc\",                alternative = \"greater\",                zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar summary(jc1) #> <div id=\"hfdemvodhg\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #hfdemvodhg .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #hfdemvodhg .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #hfdemvodhg .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #hfdemvodhg .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #hfdemvodhg .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #hfdemvodhg .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #hfdemvodhg .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #hfdemvodhg .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #hfdemvodhg .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #hfdemvodhg .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #hfdemvodhg .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #hfdemvodhg .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #hfdemvodhg .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #hfdemvodhg .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #hfdemvodhg .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #hfdemvodhg .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #hfdemvodhg .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #hfdemvodhg .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #hfdemvodhg .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #hfdemvodhg .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #hfdemvodhg .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #hfdemvodhg .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #hfdemvodhg .gt_left { #>   text-align: left; #> } #>  #> #hfdemvodhg .gt_center { #>   text-align: center; #> } #>  #> #hfdemvodhg .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #hfdemvodhg .gt_font_normal { #>   font-weight: normal; #> } #>  #> #hfdemvodhg .gt_font_bold { #>   font-weight: bold; #> } #>  #> #hfdemvodhg .gt_font_italic { #>   font-style: italic; #> } #>  #> #hfdemvodhg .gt_super { #>   font-size: 65%; #> } #>  #> #hfdemvodhg .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #hfdemvodhg .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #hfdemvodhg .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #hfdemvodhg .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #hfdemvodhg .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"5\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (Monte Carlo)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">Older - multinomial - alternative: greater - Monte-Carlo simulation of #>         join-count statistic (nonfree sampling)<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">high:high<\/td> #> <td class=\"gt_row gt_right\">0.44100<\/td> #> <td class=\"gt_row gt_right\">14<\/td> #> <td class=\"gt_row gt_right\">13.83<\/td> #> <td class=\"gt_row gt_right\">9.76<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low:low<\/td> #> <td class=\"gt_row gt_right\">0.61700<\/td> #> <td class=\"gt_row gt_right\">7<\/td> #> <td class=\"gt_row gt_right\">8.14<\/td> #> <td class=\"gt_row gt_right\">6.91<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">middle:middle<\/td> #> <td class=\"gt_row gt_right\">0.58800<\/td> #> <td class=\"gt_row gt_right\">13<\/td> #> <td class=\"gt_row gt_right\">13.91<\/td> #> <td class=\"gt_row gt_right\">11.03<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low:high<\/td> #> <td class=\"gt_row gt_right\">0.43800<\/td> #> <td class=\"gt_row gt_right\">24<\/td> #> <td class=\"gt_row gt_right\">22.81<\/td> #> <td class=\"gt_row gt_right\">16.71<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">middle:high<\/td> #> <td class=\"gt_row gt_right\">0.62000<\/td> #> <td class=\"gt_row gt_right\">28<\/td> #> <td class=\"gt_row gt_right\">29.34<\/td> #> <td class=\"gt_row gt_right\">18.00<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">middle:low<\/td> #> <td class=\"gt_row gt_right\">0.29400<\/td> #> <td class=\"gt_row gt_right\">25<\/td> #> <td class=\"gt_row gt_right\">22.96<\/td> #> <td class=\"gt_row gt_right\">16.24<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">Jtot<\/td> #> <td class=\"gt_row gt_right\">0.38300<\/td> #> <td class=\"gt_row gt_right\">77<\/td> #> <td class=\"gt_row gt_right\">75.12<\/td> #> <td class=\"gt_row gt_right\">21.85<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">Male2Female - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">men-men<\/td> #> <td class=\"gt_row gt_right\">0.54300<\/td> #> <td class=\"gt_row gt_right\">60<\/td> #> <td class=\"gt_row gt_right\">60.50<\/td> #> <td class=\"gt_row gt_right\">22.27<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">woman-woman<\/td> #> <td class=\"gt_row gt_right\">0.01100<\/td> #> <td class=\"gt_row gt_right\">13<\/td> #> <td class=\"gt_row gt_right\">7.08<\/td> #> <td class=\"gt_row gt_right\">5.53<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  provinces_spain$Coast <- factor(provinces_spain$Coast) levels(provinces_spain$Coast) = c(\"no\",\"yes\") f2 <- ~ Male2Female + Coast jc2 <- jc.test(formula = f2,                data = provinces_spain,                distr = \"mc\",                zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar summary(jc2) #> <div id=\"nnqqyckgyh\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #nnqqyckgyh .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #nnqqyckgyh .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #nnqqyckgyh .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #nnqqyckgyh .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #nnqqyckgyh .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #nnqqyckgyh .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #nnqqyckgyh .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #nnqqyckgyh .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #nnqqyckgyh .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #nnqqyckgyh .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #nnqqyckgyh .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #nnqqyckgyh .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #nnqqyckgyh .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #nnqqyckgyh .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #nnqqyckgyh .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #nnqqyckgyh .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #nnqqyckgyh .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #nnqqyckgyh .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #nnqqyckgyh .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #nnqqyckgyh .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #nnqqyckgyh .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #nnqqyckgyh .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #nnqqyckgyh .gt_left { #>   text-align: left; #> } #>  #> #nnqqyckgyh .gt_center { #>   text-align: center; #> } #>  #> #nnqqyckgyh .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #nnqqyckgyh .gt_font_normal { #>   font-weight: normal; #> } #>  #> #nnqqyckgyh .gt_font_bold { #>   font-weight: bold; #> } #>  #> #nnqqyckgyh .gt_font_italic { #>   font-style: italic; #> } #>  #> #nnqqyckgyh .gt_super { #>   font-size: 65%; #> } #>  #> #nnqqyckgyh .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #nnqqyckgyh .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #nnqqyckgyh .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #nnqqyckgyh .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #nnqqyckgyh .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"5\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (Monte Carlo)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">Male2Female - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">men-men<\/td> #> <td class=\"gt_row gt_right\">0.51850<\/td> #> <td class=\"gt_row gt_right\">60<\/td> #> <td class=\"gt_row gt_right\">60.39<\/td> #> <td class=\"gt_row gt_right\">23.16<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">woman-woman<\/td> #> <td class=\"gt_row gt_right\">0.01250<\/td> #> <td class=\"gt_row gt_right\">13<\/td> #> <td class=\"gt_row gt_right\">6.95<\/td> #> <td class=\"gt_row gt_right\">5.42<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">Coast - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">no-no<\/td> #> <td class=\"gt_row gt_right\">0.00100<\/td> #> <td class=\"gt_row gt_right\">64<\/td> #> <td class=\"gt_row gt_right\">36.81<\/td> #> <td class=\"gt_row gt_right\">23.27<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">yes-yes<\/td> #> <td class=\"gt_row gt_right\">0.91600<\/td> #> <td class=\"gt_row gt_right\">14<\/td> #> <td class=\"gt_row gt_right\">18.96<\/td> #> <td class=\"gt_row gt_right\">13.37<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> # }  # Case 2: ## Multinomial using a sf multipoint data(\"FastFood.sf\") sf::sf_use_s2(FALSE) f1 <- ~ Type jc3 <- jc.test(formula = f1,                data = FastFood.sf,                distr = \"asymptotic\",                control = list(knn = 6)) #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: knearneigh: coordinates are not geographical: longlat argument wrong  summary(jc3) #> <div id=\"mugxchgenm\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #mugxchgenm .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #mugxchgenm .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #mugxchgenm .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #mugxchgenm .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #mugxchgenm .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #mugxchgenm .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #mugxchgenm .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #mugxchgenm .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #mugxchgenm .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #mugxchgenm .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #mugxchgenm .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #mugxchgenm .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #mugxchgenm .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mugxchgenm .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #mugxchgenm .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #mugxchgenm .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mugxchgenm .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #mugxchgenm .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mugxchgenm .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #mugxchgenm .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mugxchgenm .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #mugxchgenm .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mugxchgenm .gt_left { #>   text-align: left; #> } #>  #> #mugxchgenm .gt_center { #>   text-align: center; #> } #>  #> #mugxchgenm .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #mugxchgenm .gt_font_normal { #>   font-weight: normal; #> } #>  #> #mugxchgenm .gt_font_bold { #>   font-weight: bold; #> } #>  #> #mugxchgenm .gt_font_italic { #>   font-style: italic; #> } #>  #> #mugxchgenm .gt_super { #>   font-size: 65%; #> } #>  #> #mugxchgenm .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #mugxchgenm .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #mugxchgenm .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #mugxchgenm .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #mugxchgenm .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"6\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (asymptotic)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">z-value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">Type - multinomial - alternative: greater - Join count test under nonfree sampling<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">H:H<\/td> #> <td class=\"gt_row gt_right\">&minus;0.23<\/td> #> <td class=\"gt_row gt_right\">0.58942<\/td> #> <td class=\"gt_row gt_right\">255.5<\/td> #> <td class=\"gt_row gt_right\">258.05<\/td> #> <td class=\"gt_row gt_right\">127.06<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">P:P<\/td> #> <td class=\"gt_row gt_right\">0.30<\/td> #> <td class=\"gt_row gt_right\">0.38114<\/td> #> <td class=\"gt_row gt_right\">317.0<\/td> #> <td class=\"gt_row gt_right\">313.38<\/td> #> <td class=\"gt_row gt_right\">143.47<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">S:S<\/td> #> <td class=\"gt_row gt_right\">&minus;1.82<\/td> #> <td class=\"gt_row gt_right\">0.96574<\/td> #> <td class=\"gt_row gt_right\">283.5<\/td> #> <td class=\"gt_row gt_right\">305.14<\/td> #> <td class=\"gt_row gt_right\">141.19<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">P:H<\/td> #> <td class=\"gt_row gt_right\">0.02<\/td> #> <td class=\"gt_row gt_right\">0.49358<\/td> #> <td class=\"gt_row gt_right\">571.0<\/td> #> <td class=\"gt_row gt_right\">570.72<\/td> #> <td class=\"gt_row gt_right\">304.67<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">S:H<\/td> #> <td class=\"gt_row gt_right\">0.05<\/td> #> <td class=\"gt_row gt_right\">0.48128<\/td> #> <td class=\"gt_row gt_right\">564.0<\/td> #> <td class=\"gt_row gt_right\">563.18<\/td> #> <td class=\"gt_row gt_right\">301.61<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">S:P<\/td> #> <td class=\"gt_row gt_right\">1.08<\/td> #> <td class=\"gt_row gt_right\">0.14022<\/td> #> <td class=\"gt_row gt_right\">640.0<\/td> #> <td class=\"gt_row gt_right\">620.53<\/td> #> <td class=\"gt_row gt_right\">325.50<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">Jtot<\/td> #> <td class=\"gt_row gt_right\">0.90<\/td> #> <td class=\"gt_row gt_right\">0.18350<\/td> #> <td class=\"gt_row gt_right\">1775.0<\/td> #> <td class=\"gt_row gt_right\">1,754.43<\/td> #> <td class=\"gt_row gt_right\">519.87<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  # Examples function joincount.test data(oldcol, package = \"spdep\") HICRIME <- cut(COL.OLD$CRIME, breaks = c(0,35,80), labels = c(\"low\",\"high\")) names(HICRIME) <- rownames(COL.OLD) jc4 <- jc.test(fx = HICRIME,                listw = spdep::nb2listw(COL.nb,                style=\"B\")) summary(jc4) #> <div id=\"ocvtiiudop\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #ocvtiiudop .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #ocvtiiudop .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #ocvtiiudop .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #ocvtiiudop .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #ocvtiiudop .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #ocvtiiudop .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #ocvtiiudop .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #ocvtiiudop .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ocvtiiudop .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ocvtiiudop .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #ocvtiiudop .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #ocvtiiudop .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #ocvtiiudop .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ocvtiiudop .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #ocvtiiudop .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #ocvtiiudop .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ocvtiiudop .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #ocvtiiudop .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ocvtiiudop .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #ocvtiiudop .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ocvtiiudop .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ocvtiiudop .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ocvtiiudop .gt_left { #>   text-align: left; #> } #>  #> #ocvtiiudop .gt_center { #>   text-align: center; #> } #>  #> #ocvtiiudop .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #ocvtiiudop .gt_font_normal { #>   font-weight: normal; #> } #>  #> #ocvtiiudop .gt_font_bold { #>   font-weight: bold; #> } #>  #> #ocvtiiudop .gt_font_italic { #>   font-style: italic; #> } #>  #> #ocvtiiudop .gt_super { #>   font-size: 65%; #> } #>  #> #ocvtiiudop .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #ocvtiiudop .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #ocvtiiudop .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #ocvtiiudop .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #ocvtiiudop .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"6\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (asymptotic)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">z-value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">fx - binomial - alternative: greater - Join count test under nonfree sampling<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">high-high<\/td> #> <td class=\"gt_row gt_right\">6.33<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">54<\/td> #> <td class=\"gt_row gt_right\">27.22<\/td> #> <td class=\"gt_row gt_right\">17.89<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low-low<\/td> #> <td class=\"gt_row gt_right\">1.01<\/td> #> <td class=\"gt_row gt_right\">0.15527<\/td> #> <td class=\"gt_row gt_right\">34<\/td> #> <td class=\"gt_row gt_right\">29.59<\/td> #> <td class=\"gt_row gt_right\">18.90<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">high-low<\/td> #> <td class=\"gt_row gt_right\">&minus;6.09<\/td> #> <td class=\"gt_row gt_right\">1.00000<\/td> #> <td class=\"gt_row gt_right\">28<\/td> #> <td class=\"gt_row gt_right\">59.18<\/td> #> <td class=\"gt_row gt_right\">26.23<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  jc5 <- jc.test(fx = HICRIME,                 listw = spdep::nb2listw(COL.nb, style=\"B\"),                 distr = \"mc\")  summary(jc5) #> <div id=\"svbpsgtfdy\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #svbpsgtfdy .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #svbpsgtfdy .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #svbpsgtfdy .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #svbpsgtfdy .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #svbpsgtfdy .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #svbpsgtfdy .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #svbpsgtfdy .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #svbpsgtfdy .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #svbpsgtfdy .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #svbpsgtfdy .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #svbpsgtfdy .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #svbpsgtfdy .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #svbpsgtfdy .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svbpsgtfdy .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #svbpsgtfdy .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #svbpsgtfdy .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svbpsgtfdy .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #svbpsgtfdy .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svbpsgtfdy .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #svbpsgtfdy .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svbpsgtfdy .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #svbpsgtfdy .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svbpsgtfdy .gt_left { #>   text-align: left; #> } #>  #> #svbpsgtfdy .gt_center { #>   text-align: center; #> } #>  #> #svbpsgtfdy .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #svbpsgtfdy .gt_font_normal { #>   font-weight: normal; #> } #>  #> #svbpsgtfdy .gt_font_bold { #>   font-weight: bold; #> } #>  #> #svbpsgtfdy .gt_font_italic { #>   font-style: italic; #> } #>  #> #svbpsgtfdy .gt_super { #>   font-size: 65%; #> } #>  #> #svbpsgtfdy .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #svbpsgtfdy .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #svbpsgtfdy .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #svbpsgtfdy .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #svbpsgtfdy .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"5\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (Monte Carlo)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">fx - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">high-high<\/td> #> <td class=\"gt_row gt_right\">0.00100<\/td> #> <td class=\"gt_row gt_right\">54<\/td> #> <td class=\"gt_row gt_right\">27.16<\/td> #> <td class=\"gt_row gt_right\">17.27<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low-low<\/td> #> <td class=\"gt_row gt_right\">0.16200<\/td> #> <td class=\"gt_row gt_right\">34<\/td> #> <td class=\"gt_row gt_right\">29.57<\/td> #> <td class=\"gt_row gt_right\">19.31<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  HICRIME <- cut(COL.OLD$CRIME, breaks = c(0, 35, 80),                 labels = c(\"low\",\"high\"))  names(HICRIME) <- rownames(COL.OLD)  jc6 <- jc.test(fx = HICRIME,                 listw = spdep::nb2listw(COL.nb,                                  style = \"B\")) summary(jc6) #> <div id=\"dzyfovlwcv\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #dzyfovlwcv .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #dzyfovlwcv .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #dzyfovlwcv .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #dzyfovlwcv .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #dzyfovlwcv .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #dzyfovlwcv .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #dzyfovlwcv .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #dzyfovlwcv .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #dzyfovlwcv .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #dzyfovlwcv .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #dzyfovlwcv .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #dzyfovlwcv .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #dzyfovlwcv .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dzyfovlwcv .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #dzyfovlwcv .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #dzyfovlwcv .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dzyfovlwcv .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #dzyfovlwcv .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dzyfovlwcv .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #dzyfovlwcv .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dzyfovlwcv .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #dzyfovlwcv .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dzyfovlwcv .gt_left { #>   text-align: left; #> } #>  #> #dzyfovlwcv .gt_center { #>   text-align: center; #> } #>  #> #dzyfovlwcv .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #dzyfovlwcv .gt_font_normal { #>   font-weight: normal; #> } #>  #> #dzyfovlwcv .gt_font_bold { #>   font-weight: bold; #> } #>  #> #dzyfovlwcv .gt_font_italic { #>   font-style: italic; #> } #>  #> #dzyfovlwcv .gt_super { #>   font-size: 65%; #> } #>  #> #dzyfovlwcv .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #dzyfovlwcv .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #dzyfovlwcv .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #dzyfovlwcv .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #dzyfovlwcv .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"6\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (asymptotic)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">z-value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">fx - binomial - alternative: greater - Join count test under nonfree sampling<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">high-high<\/td> #> <td class=\"gt_row gt_right\">6.33<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">54<\/td> #> <td class=\"gt_row gt_right\">27.22<\/td> #> <td class=\"gt_row gt_right\">17.89<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low-low<\/td> #> <td class=\"gt_row gt_right\">1.01<\/td> #> <td class=\"gt_row gt_right\">0.15527<\/td> #> <td class=\"gt_row gt_right\">34<\/td> #> <td class=\"gt_row gt_right\">29.59<\/td> #> <td class=\"gt_row gt_right\">18.90<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">high-low<\/td> #> <td class=\"gt_row gt_right\">&minus;6.09<\/td> #> <td class=\"gt_row gt_right\">1.00000<\/td> #> <td class=\"gt_row gt_right\">28<\/td> #> <td class=\"gt_row gt_right\">59.18<\/td> #> <td class=\"gt_row gt_right\">26.23<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to calculate the local spatial runs tests. — local.sp.runs.test","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"function calculates local spatial runs tests localizations.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"","code":"local.sp.runs.test(formula = NULL, data = NULL, fx = NULL, distr = \"asymptotic\", listw = listw, alternative = \"two.sided\" , nsim = NULL, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"formula (optional) formula factor included data data (optional) data frame sf object containing variable testing . fx factor (optional). distr character string specifying distribution \"asymptotic\" (default) \"bootstrap\" listw neighborhood list (type knn nb) W matrix indicates order elements  $m_i-environment$ (example inverse distance). calculate number rinss $m_i-environment$, order must established, example nearest neighbor furthest one. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\". nsim Default value NULL obtain asymptotic version local test. obtain boots version number permutations obtain statistics. control Optional argument. See Control Argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"output object class localsrq local.SRQ matrix MeanNeig Mean run.MaxNeig Max run. listw object listwalternative character string describing alternative hypothesis","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"object listw can class:","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"@references Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       Working paper.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"","code":"# Case 1: Local spatial runs test based on knn library(lwgeom) #> Linking to liblwgeom 3.0.0beta1 r16016, GEOS 3.8.0, PROJ 6.3.1 N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) #>     runs.i      E.i   Std.i    z.value     p.value #> 1        8 7.183838 1.59988  0.5101392 0.695023022 #> 2        7 7.183838 1.59988 -0.1149076 0.454259185 #> 3        6 7.183838 1.59988 -0.7399544 0.229663845 #> 4        8 7.183838 1.59988  0.5101392 0.695023022 #> 5        7 7.183838 1.59988 -0.1149076 0.454259185 #> 6        5 7.183838 1.59988 -1.3650011 0.086126348 #> 7        7 7.183838 1.59988 -0.1149076 0.454259185 #> 8        8 7.183838 1.59988  0.5101392 0.695023022 #> 9        6 7.183838 1.59988 -0.7399544 0.229663845 #> 10       5 7.183838 1.59988 -1.3650011 0.086126348 #> 11       7 7.183838 1.59988 -0.1149076 0.454259185 #> 12       4 7.183838 1.59988 -1.9900479 0.023292830 #> 13       7 7.183838 1.59988 -0.1149076 0.454259185 #> 14       6 7.183838 1.59988 -0.7399544 0.229663845 #> 15       9 7.183838 1.59988  1.1351860 0.871851293 #> 16       8 7.183838 1.59988  0.5101392 0.695023022 #> 17       8 7.183838 1.59988  0.5101392 0.695023022 #> 18       8 7.183838 1.59988  0.5101392 0.695023022 #> 19       7 7.183838 1.59988 -0.1149076 0.454259185 #> 20       7 7.183838 1.59988 -0.1149076 0.454259185 #> 21       7 7.183838 1.59988 -0.1149076 0.454259185 #> 22       9 7.183838 1.59988  1.1351860 0.871851293 #> 23       3 7.183838 1.59988 -2.6150947 0.004460136 #> 24       5 7.183838 1.59988 -1.3650011 0.086126348 #> 25       8 7.183838 1.59988  0.5101392 0.695023022 #> 26       7 7.183838 1.59988 -0.1149076 0.454259185 #> 27       8 7.183838 1.59988  0.5101392 0.695023022 #> 28       7 7.183838 1.59988 -0.1149076 0.454259185 #> 29       4 7.183838 1.59988 -1.9900479 0.023292830 #> 30      10 7.183838 1.59988  1.7602327 0.960815822 #> 31       8 7.183838 1.59988  0.5101392 0.695023022 #> 32       8 7.183838 1.59988  0.5101392 0.695023022 #> 33       9 7.183838 1.59988  1.1351860 0.871851293 #> 34       6 7.183838 1.59988 -0.7399544 0.229663845 #> 35       7 7.183838 1.59988 -0.1149076 0.454259185 #> 36      10 7.183838 1.59988  1.7602327 0.960815822 #> 37       8 7.183838 1.59988  0.5101392 0.695023022 #> 38       7 7.183838 1.59988 -0.1149076 0.454259185 #> 39       6 7.183838 1.59988 -0.7399544 0.229663845 #> 40       7 7.183838 1.59988 -0.1149076 0.454259185 #> 41       9 7.183838 1.59988  1.1351860 0.871851293 #> 42       8 7.183838 1.59988  0.5101392 0.695023022 #> 43       7 7.183838 1.59988 -0.1149076 0.454259185 #> 44       6 7.183838 1.59988 -0.7399544 0.229663845 #> 45      10 7.183838 1.59988  1.7602327 0.960815822 #> 46       8 7.183838 1.59988  0.5101392 0.695023022 #> 47       5 7.183838 1.59988 -1.3650011 0.086126348 #> 48       9 7.183838 1.59988  1.1351860 0.871851293 #> 49       5 7.183838 1.59988 -1.3650011 0.086126348 #> 50       9 7.183838 1.59988  1.1351860 0.871851293 #> 51       8 7.183838 1.59988  0.5101392 0.695023022 #> 52       7 7.183838 1.59988 -0.1149076 0.454259185 #> 53       8 7.183838 1.59988  0.5101392 0.695023022 #> 54       9 7.183838 1.59988  1.1351860 0.871851293 #> 55       6 7.183838 1.59988 -0.7399544 0.229663845 #> 56       7 7.183838 1.59988 -0.1149076 0.454259185 #> 57       6 7.183838 1.59988 -0.7399544 0.229663845 #> 58       7 7.183838 1.59988 -0.1149076 0.454259185 #> 59       9 7.183838 1.59988  1.1351860 0.871851293 #> 60       4 7.183838 1.59988 -1.9900479 0.023292830 #> 61       7 7.183838 1.59988 -0.1149076 0.454259185 #> 62       8 7.183838 1.59988  0.5101392 0.695023022 #> 63       9 7.183838 1.59988  1.1351860 0.871851293 #> 64       9 7.183838 1.59988  1.1351860 0.871851293 #> 65       7 7.183838 1.59988 -0.1149076 0.454259185 #> 66       5 7.183838 1.59988 -1.3650011 0.086126348 #> 67       7 7.183838 1.59988 -0.1149076 0.454259185 #> 68       6 7.183838 1.59988 -0.7399544 0.229663845 #> 69       8 7.183838 1.59988  0.5101392 0.695023022 #> 70       6 7.183838 1.59988 -0.7399544 0.229663845 #> 71      10 7.183838 1.59988  1.7602327 0.960815822 #> 72       9 7.183838 1.59988  1.1351860 0.871851293 #> 73      10 7.183838 1.59988  1.7602327 0.960815822 #> 74       7 7.183838 1.59988 -0.1149076 0.454259185 #> 75       3 7.183838 1.59988 -2.6150947 0.004460136 #> 76       6 7.183838 1.59988 -0.7399544 0.229663845 #> 77       8 7.183838 1.59988  0.5101392 0.695023022 #> 78       8 7.183838 1.59988  0.5101392 0.695023022 #> 79       8 7.183838 1.59988  0.5101392 0.695023022 #> 80      11 7.183838 1.59988  2.3852795 0.991466925 #> 81       6 7.183838 1.59988 -0.7399544 0.229663845 #> 82       5 7.183838 1.59988 -1.3650011 0.086126348 #> 83       6 7.183838 1.59988 -0.7399544 0.229663845 #> 84       6 7.183838 1.59988 -0.7399544 0.229663845 #> 85       8 7.183838 1.59988  0.5101392 0.695023022 #> 86       6 7.183838 1.59988 -0.7399544 0.229663845 #> 87       3 7.183838 1.59988 -2.6150947 0.004460136 #> 88       7 7.183838 1.59988 -0.1149076 0.454259185 #> 89       8 7.183838 1.59988  0.5101392 0.695023022 #> 90       7 7.183838 1.59988 -0.1149076 0.454259185 #> 91       6 7.183838 1.59988 -0.7399544 0.229663845 #> 92       8 7.183838 1.59988  0.5101392 0.695023022 #> 93       3 7.183838 1.59988 -2.6150947 0.004460136 #> 94       7 7.183838 1.59988 -0.1149076 0.454259185 #> 95       7 7.183838 1.59988 -0.1149076 0.454259185 #> 96       5 7.183838 1.59988 -1.3650011 0.086126348 #> 97       4 7.183838 1.59988 -1.9900479 0.023292830 #> 98       8 7.183838 1.59988  0.5101392 0.695023022 #> 99       9 7.183838 1.59988  1.1351860 0.871851293 #> 100      5 7.183838 1.59988 -1.3650011 0.086126348 plot(lsrq, sig = 0.05)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"two.sided\",                            distr =\"bootstrap\", nsim = 399) print(lsrq) #>     SRQ     EP.i    SdP.i zseudo.value pseudo.value #> 1     8 7.080201 1.626904  0.565367871  0.571823573 #> 2     7 7.325815 1.551174 -0.210043827  0.833633467 #> 3     6 7.358396 1.675833 -0.810579674  0.417607093 #> 4     8 7.145363 1.650011  0.517958243  0.604487404 #> 5     7 7.195489 1.617082 -0.120889795  0.903778325 #> 6     5 7.318296 1.606032 -1.443493147  0.148881602 #> 7     7 7.177945 1.673294 -0.106344021  0.915309406 #> 8     8 7.223058 1.618942  0.479907345  0.631293279 #> 9     6 7.240602 1.640338 -0.756308398  0.449464314 #> 10    5 7.085213 1.629735 -1.279479594  0.200728221 #> 11    7 7.180451 1.628119 -0.110834090  0.911747912 #> 12    4 7.253133 1.614502 -2.014944931  0.043910419 #> 13    7 7.293233 1.547158 -0.189530149  0.849677328 #> 14    6 7.208020 1.575355 -0.766823834  0.443186263 #> 15    9 7.333333 1.545513  1.078390746  0.280859415 #> 16    8 7.095238 1.698640  0.532638865  0.594283593 #> 17    8 7.330827 1.689705  0.396029473  0.692083286 #> 18    8 7.115288 1.617039  0.547118309  0.584297455 #> 19    7 7.177945 1.580635 -0.112578090  0.910365057 #> 20    7 7.155388 1.608993 -0.096574971  0.923063934 #> 21    7 7.062657 1.639213 -0.038223613  0.969509394 #> 22    9 7.280702 1.609146  1.068453976  0.285315781 #> 23    3 7.333333 1.606102 -2.698043222  0.006974838 #> 24    5 7.042607 1.553304 -1.315007658  0.188507329 #> 25    8 7.213033 1.579463  0.498249914  0.618307905 #> 26    7 7.182957 1.552793 -0.117824715  0.906206546 #> 27    8 7.137845 1.636133  0.526947025  0.598230377 #> 28    7 7.253133 1.722912 -0.146921501  0.883193980 #> 29    4 7.072682 1.646446 -1.866251104  0.062006242 #> 30   10 7.228070 1.593206  1.739843883  0.081886435 #> 31    8 7.258145 1.574300  0.471228330  0.637477690 #> 32    8 7.200501 1.668478  0.479178476  0.631811665 #> 33    9 7.230576 1.587314  1.114728233  0.264966898 #> 34    6 7.135338 1.627876 -0.697435536  0.485530269 #> 35    7 7.160401 1.589645 -0.100903673  0.919626927 #> 36   10 7.260652 1.581053  1.732609864  0.083165035 #> 37    8 7.298246 1.662103  0.422208840  0.672872589 #> 38    7 7.025063 1.668319 -0.015022696  0.988014074 #> 39    6 7.015038 1.650270 -0.615073615  0.538506106 #> 40    7 7.195489 1.585702 -0.123282103  0.901883712 #> 41    9 7.325815 1.633232  1.025074961  0.305327819 #> 42    8 7.205514 1.629770  0.487483626  0.625915643 #> 43    7 7.228070 1.564562 -0.145772567  0.884100933 #> 44    6 7.152882 1.611574 -0.715376446  0.474376463 #> 45   10 7.233083 1.623727  1.704052826  0.088371219 #> 46    8 7.218045 1.596187  0.489889145  0.624212345 #> 47    5 7.240602 1.631122 -1.373656743  0.169548272 #> 48    9 7.323308 1.666469  1.006134411  0.314350918 #> 49    5 7.283208 1.584312 -1.441135505  0.149546405 #> 50    9 7.238095 1.528934  1.152374289  0.249167302 #> 51    8 7.255639 1.557866  0.477808013  0.632786857 #> 52    7 7.170426 1.558258 -0.109369598  0.912909347 #> 53    8 7.360902 1.613410  0.396116232  0.692019284 #> 54    9 7.102757 1.644839  1.153452261  0.248724802 #> 55    6 7.220551 1.652310 -0.738693800  0.460092951 #> 56    7 7.165414 1.566838 -0.105571554  0.915922296 #> 57    6 7.255639 1.569115 -0.800221083  0.423582717 #> 58    7 7.238095 1.594889 -0.149286406  0.881327641 #> 59    9 7.167920 1.515207  1.209128537  0.226613467 #> 60    4 7.243108 1.620703 -2.001049429  0.045387063 #> 61    7 7.175439 1.640964 -0.106911926  0.914858852 #> 62    8 7.265664 1.616373  0.454310825  0.649605126 #> 63    9 7.283208 1.547406  1.109464301  0.267229937 #> 64    9 7.090226 1.574572  1.212885015  0.225173786 #> 65    7 7.245614 1.531848 -0.160338418  0.872614497 #> 66    5 7.248120 1.561500 -1.439718594  0.149947031 #> 67    7 7.187970 1.604722 -0.117135539  0.906752648 #> 68    6 7.248120 1.556665 -0.801791146  0.422673781 #> 69    8 7.270677 1.580954  0.461318597  0.644570044 #> 70    6 7.378446 1.665384 -0.827704634  0.407837794 #> 71   10 7.122807 1.529429  1.881220834  0.059941885 #> 72    9 7.220551 1.545452  1.151410089  0.249563565 #> 73   10 7.077694 1.604478  1.821343336  0.068554683 #> 74    7 7.110276 1.584431 -0.069599550  0.944512395 #> 75    3 7.195489 1.646339 -2.548374855  0.010822611 #> 76    6 7.115288 1.569733 -0.710495424  0.477396968 #> 77    8 7.187970 1.571497  0.516723823  0.605348963 #> 78    8 7.215539 1.669610  0.469846977  0.638464349 #> 79    8 7.195489 1.664552  0.483320003  0.628868539 #> 80   11 7.187970 1.571497  2.425731280  0.015277578 #> 81    6 7.165414 1.626633 -0.716457367  0.473708983 #> 82    5 7.157895 1.531128 -1.409349549  0.158731834 #> 83    6 7.127820 1.612203 -0.699551758  0.484207279 #> 84    6 7.288221 1.605467 -0.802396169  0.422323828 #> 85    8 7.298246 1.573580  0.445960532  0.655625756 #> 86    6 7.235589 1.559422 -0.792338013  0.428163612 #> 87    3 7.120301 1.653552 -2.491787435  0.012710208 #> 88    7 7.145363 1.666677 -0.087217518  0.930498615 #> 89    8 7.130326 1.652790  0.526185393  0.598759402 #> 90    7 7.097744 1.708086 -0.057224497  0.954366364 #> 91    6 7.208020 1.603807 -0.753220348  0.451317514 #> 92    8 7.235589 1.605467  0.476130022  0.633981749 #> 93    3 7.115288 1.643242 -2.504371928  0.012266901 #> 94    7 7.122807 1.574756 -0.077984807  0.937840138 #> 95    7 7.010025 1.690916 -0.005928778  0.995269548 #> 96    5 7.298246 1.533142 -1.499042839  0.133862519 #> 97    4 7.125313 1.589645 -1.966045006  0.049293412 #> 98    8 7.130326 1.536183  0.566126836  0.571307562 #> 99    9 7.195489 1.606169  1.123487859  0.261230354 #> 100   5 7.240602 1.615645 -1.386815907  0.165497905 plot(lsrq, sig = 0.1)  # \\donttest{ # Case 2:Fastfood example. sf (points) library(lwgeom) data(\"FastFood.sf\") sf::sf_use_s2(FALSE) x <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data listw <- spdep::knearneigh(x, k = 10) formula <- ~ Type lsrq <- local.sp.runs.test(formula = formula, data = FastFood.sf, listw = listw) print(lsrq) #>     runs.i      E.i    Std.i    z.value    p.value #> 1        8 7.668307 1.490157  0.2225895 0.82385504 #> 2        9 7.668307 1.490157  0.8936597 0.37150400 #> 3        9 7.668307 1.490157  0.8936597 0.37150400 #> 4        8 7.668307 1.490157  0.2225895 0.82385504 #> 5       10 7.668307 1.490157  1.5647299 0.11764625 #> 6        8 7.668307 1.490157  0.2225895 0.82385504 #> 7        8 7.668307 1.490157  0.2225895 0.82385504 #> 8        7 7.668307 1.490157 -0.4484808 0.65380626 #> 9        7 7.668307 1.490157 -0.4484808 0.65380626 #> 10       7 7.668307 1.490157 -0.4484808 0.65380626 #> 11       7 7.668307 1.490157 -0.4484808 0.65380626 #> 12       8 7.668307 1.490157  0.2225895 0.82385504 #> 13       9 7.668307 1.490157  0.8936597 0.37150400 #> 14       7 7.668307 1.490157 -0.4484808 0.65380626 #> 15      10 7.668307 1.490157  1.5647299 0.11764625 #> 16       9 7.668307 1.490157  0.8936597 0.37150400 #> 17       7 7.668307 1.490157 -0.4484808 0.65380626 #> 18       9 7.668307 1.490157  0.8936597 0.37150400 #> 19      10 7.668307 1.490157  1.5647299 0.11764625 #> 20       9 7.668307 1.490157  0.8936597 0.37150400 #> 21       9 7.668307 1.490157  0.8936597 0.37150400 #> 22      10 7.668307 1.490157  1.5647299 0.11764625 #> 23       7 7.668307 1.490157 -0.4484808 0.65380626 #> 24       6 7.668307 1.490157 -1.1195510 0.26290515 #> 25       9 7.668307 1.490157  0.8936597 0.37150400 #> 26       9 7.668307 1.490157  0.8936597 0.37150400 #> 27      10 7.668307 1.490157  1.5647299 0.11764625 #> 28       8 7.668307 1.490157  0.2225895 0.82385504 #> 29       8 7.668307 1.490157  0.2225895 0.82385504 #> 30      10 7.668307 1.490157  1.5647299 0.11764625 #> 31       9 7.668307 1.490157  0.8936597 0.37150400 #> 32       8 7.668307 1.490157  0.2225895 0.82385504 #> 33       6 7.668307 1.490157 -1.1195510 0.26290515 #> 34       8 7.668307 1.490157  0.2225895 0.82385504 #> 35       8 7.668307 1.490157  0.2225895 0.82385504 #> 36       9 7.668307 1.490157  0.8936597 0.37150400 #> 37       8 7.668307 1.490157  0.2225895 0.82385504 #> 38       7 7.668307 1.490157 -0.4484808 0.65380626 #> 39       8 7.668307 1.490157  0.2225895 0.82385504 #> 40       9 7.668307 1.490157  0.8936597 0.37150400 #> 41       8 7.668307 1.490157  0.2225895 0.82385504 #> 42       9 7.668307 1.490157  0.8936597 0.37150400 #> 43       7 7.668307 1.490157 -0.4484808 0.65380626 #> 44       8 7.668307 1.490157  0.2225895 0.82385504 #> 45       8 7.668307 1.490157  0.2225895 0.82385504 #> 46       8 7.668307 1.490157  0.2225895 0.82385504 #> 47       7 7.668307 1.490157 -0.4484808 0.65380626 #> 48       6 7.668307 1.490157 -1.1195510 0.26290515 #> 49       6 7.668307 1.490157 -1.1195510 0.26290515 #> 50       8 7.668307 1.490157  0.2225895 0.82385504 #> 51       6 7.668307 1.490157 -1.1195510 0.26290515 #> 52       7 7.668307 1.490157 -0.4484808 0.65380626 #> 53       4 7.668307 1.490157 -2.4616914 0.01382836 #> 54       7 7.668307 1.490157 -0.4484808 0.65380626 #> 55       8 7.668307 1.490157  0.2225895 0.82385504 #> 56       8 7.668307 1.490157  0.2225895 0.82385504 #> 57       4 7.668307 1.490157 -2.4616914 0.01382836 #> 58       5 7.668307 1.490157 -1.7906212 0.07335410 #> 59       9 7.668307 1.490157  0.8936597 0.37150400 #> 60      11 7.668307 1.490157  2.2358001 0.02536487 #> 61       4 7.668307 1.490157 -2.4616914 0.01382836 #> 62       7 7.668307 1.490157 -0.4484808 0.65380626 #> 63       6 7.668307 1.490157 -1.1195510 0.26290515 #> 64      10 7.668307 1.490157  1.5647299 0.11764625 #> 65       9 7.668307 1.490157  0.8936597 0.37150400 #> 66       7 7.668307 1.490157 -0.4484808 0.65380626 #> 67       7 7.668307 1.490157 -0.4484808 0.65380626 #> 68       6 7.668307 1.490157 -1.1195510 0.26290515 #> 69       8 7.668307 1.490157  0.2225895 0.82385504 #> 70      10 7.668307 1.490157  1.5647299 0.11764625 #> 71       8 7.668307 1.490157  0.2225895 0.82385504 #> 72       8 7.668307 1.490157  0.2225895 0.82385504 #> 73       6 7.668307 1.490157 -1.1195510 0.26290515 #> 74       8 7.668307 1.490157  0.2225895 0.82385504 #> 75       8 7.668307 1.490157  0.2225895 0.82385504 #> 76       8 7.668307 1.490157  0.2225895 0.82385504 #> 77      10 7.668307 1.490157  1.5647299 0.11764625 #> 78       8 7.668307 1.490157  0.2225895 0.82385504 #> 79       9 7.668307 1.490157  0.8936597 0.37150400 #> 80       8 7.668307 1.490157  0.2225895 0.82385504 #> 81       8 7.668307 1.490157  0.2225895 0.82385504 #> 82       8 7.668307 1.490157  0.2225895 0.82385504 #> 83       9 7.668307 1.490157  0.8936597 0.37150400 #> 84       8 7.668307 1.490157  0.2225895 0.82385504 #> 85       9 7.668307 1.490157  0.8936597 0.37150400 #> 86      10 7.668307 1.490157  1.5647299 0.11764625 #> 87       7 7.668307 1.490157 -0.4484808 0.65380626 #> 88       9 7.668307 1.490157  0.8936597 0.37150400 #> 89       7 7.668307 1.490157 -0.4484808 0.65380626 #> 90       7 7.668307 1.490157 -0.4484808 0.65380626 #> 91       8 7.668307 1.490157  0.2225895 0.82385504 #> 92      11 7.668307 1.490157  2.2358001 0.02536487 #> 93       7 7.668307 1.490157 -0.4484808 0.65380626 #> 94       6 7.668307 1.490157 -1.1195510 0.26290515 #> 95       9 7.668307 1.490157  0.8936597 0.37150400 #> 96       8 7.668307 1.490157  0.2225895 0.82385504 #> 97       8 7.668307 1.490157  0.2225895 0.82385504 #> 98       9 7.668307 1.490157  0.8936597 0.37150400 #> 99      10 7.668307 1.490157  1.5647299 0.11764625 #> 100     10 7.668307 1.490157  1.5647299 0.11764625 #> 101      9 7.668307 1.490157  0.8936597 0.37150400 #> 102      7 7.668307 1.490157 -0.4484808 0.65380626 #> 103     10 7.668307 1.490157  1.5647299 0.11764625 #> 104     10 7.668307 1.490157  1.5647299 0.11764625 #> 105      9 7.668307 1.490157  0.8936597 0.37150400 #> 106     10 7.668307 1.490157  1.5647299 0.11764625 #> 107      7 7.668307 1.490157 -0.4484808 0.65380626 #> 108      8 7.668307 1.490157  0.2225895 0.82385504 #> 109     10 7.668307 1.490157  1.5647299 0.11764625 #> 110      7 7.668307 1.490157 -0.4484808 0.65380626 #> 111     11 7.668307 1.490157  2.2358001 0.02536487 #> 112      7 7.668307 1.490157 -0.4484808 0.65380626 #> 113      9 7.668307 1.490157  0.8936597 0.37150400 #> 114     10 7.668307 1.490157  1.5647299 0.11764625 #> 115      5 7.668307 1.490157 -1.7906212 0.07335410 #> 116      7 7.668307 1.490157 -0.4484808 0.65380626 #> 117      8 7.668307 1.490157  0.2225895 0.82385504 #> 118      9 7.668307 1.490157  0.8936597 0.37150400 #> 119      7 7.668307 1.490157 -0.4484808 0.65380626 #> 120      9 7.668307 1.490157  0.8936597 0.37150400 #> 121      9 7.668307 1.490157  0.8936597 0.37150400 #> 122      3 7.668307 1.490157 -3.1327617 0.00173170 #> 123      7 7.668307 1.490157 -0.4484808 0.65380626 #> 124      9 7.668307 1.490157  0.8936597 0.37150400 #> 125      9 7.668307 1.490157  0.8936597 0.37150400 #> 126      7 7.668307 1.490157 -0.4484808 0.65380626 #> 127      7 7.668307 1.490157 -0.4484808 0.65380626 #> 128     10 7.668307 1.490157  1.5647299 0.11764625 #> 129      9 7.668307 1.490157  0.8936597 0.37150400 #> 130      8 7.668307 1.490157  0.2225895 0.82385504 #> 131      6 7.668307 1.490157 -1.1195510 0.26290515 #> 132      9 7.668307 1.490157  0.8936597 0.37150400 #> 133      8 7.668307 1.490157  0.2225895 0.82385504 #> 134      9 7.668307 1.490157  0.8936597 0.37150400 #> 135      8 7.668307 1.490157  0.2225895 0.82385504 #> 136      7 7.668307 1.490157 -0.4484808 0.65380626 #> 137      5 7.668307 1.490157 -1.7906212 0.07335410 #> 138      9 7.668307 1.490157  0.8936597 0.37150400 #> 139      8 7.668307 1.490157  0.2225895 0.82385504 #> 140      8 7.668307 1.490157  0.2225895 0.82385504 #> 141      7 7.668307 1.490157 -0.4484808 0.65380626 #> 142      7 7.668307 1.490157 -0.4484808 0.65380626 #> 143     10 7.668307 1.490157  1.5647299 0.11764625 #> 144      8 7.668307 1.490157  0.2225895 0.82385504 #> 145      9 7.668307 1.490157  0.8936597 0.37150400 #> 146      7 7.668307 1.490157 -0.4484808 0.65380626 #> 147      9 7.668307 1.490157  0.8936597 0.37150400 #> 148      9 7.668307 1.490157  0.8936597 0.37150400 #> 149      9 7.668307 1.490157  0.8936597 0.37150400 #> 150      8 7.668307 1.490157  0.2225895 0.82385504 #> 151      9 7.668307 1.490157  0.8936597 0.37150400 #> 152      7 7.668307 1.490157 -0.4484808 0.65380626 #> 153      7 7.668307 1.490157 -0.4484808 0.65380626 #> 154      9 7.668307 1.490157  0.8936597 0.37150400 #> 155      9 7.668307 1.490157  0.8936597 0.37150400 #> 156      9 7.668307 1.490157  0.8936597 0.37150400 #> 157     10 7.668307 1.490157  1.5647299 0.11764625 #> 158      8 7.668307 1.490157  0.2225895 0.82385504 #> 159      8 7.668307 1.490157  0.2225895 0.82385504 #> 160      8 7.668307 1.490157  0.2225895 0.82385504 #> 161      8 7.668307 1.490157  0.2225895 0.82385504 #> 162      9 7.668307 1.490157  0.8936597 0.37150400 #> 163      8 7.668307 1.490157  0.2225895 0.82385504 #> 164     10 7.668307 1.490157  1.5647299 0.11764625 #> 165      8 7.668307 1.490157  0.2225895 0.82385504 #> 166      8 7.668307 1.490157  0.2225895 0.82385504 #> 167     10 7.668307 1.490157  1.5647299 0.11764625 #> 168      8 7.668307 1.490157  0.2225895 0.82385504 #> 169      6 7.668307 1.490157 -1.1195510 0.26290515 #> 170      9 7.668307 1.490157  0.8936597 0.37150400 #> 171      9 7.668307 1.490157  0.8936597 0.37150400 #> 172      9 7.668307 1.490157  0.8936597 0.37150400 #> 173      7 7.668307 1.490157 -0.4484808 0.65380626 #> 174      9 7.668307 1.490157  0.8936597 0.37150400 #> 175      7 7.668307 1.490157 -0.4484808 0.65380626 #> 176     10 7.668307 1.490157  1.5647299 0.11764625 #> 177      9 7.668307 1.490157  0.8936597 0.37150400 #> 178      7 7.668307 1.490157 -0.4484808 0.65380626 #> 179      7 7.668307 1.490157 -0.4484808 0.65380626 #> 180     10 7.668307 1.490157  1.5647299 0.11764625 #> 181      8 7.668307 1.490157  0.2225895 0.82385504 #> 182     11 7.668307 1.490157  2.2358001 0.02536487 #> 183      8 7.668307 1.490157  0.2225895 0.82385504 #> 184      8 7.668307 1.490157  0.2225895 0.82385504 #> 185      9 7.668307 1.490157  0.8936597 0.37150400 #> 186      4 7.668307 1.490157 -2.4616914 0.01382836 #> 187      8 7.668307 1.490157  0.2225895 0.82385504 #> 188      7 7.668307 1.490157 -0.4484808 0.65380626 #> 189      9 7.668307 1.490157  0.8936597 0.37150400 #> 190      8 7.668307 1.490157  0.2225895 0.82385504 #> 191      9 7.668307 1.490157  0.8936597 0.37150400 #> 192      8 7.668307 1.490157  0.2225895 0.82385504 #> 193      7 7.668307 1.490157 -0.4484808 0.65380626 #> 194      9 7.668307 1.490157  0.8936597 0.37150400 #> 195     10 7.668307 1.490157  1.5647299 0.11764625 #> 196      8 7.668307 1.490157  0.2225895 0.82385504 #> 197      8 7.668307 1.490157  0.2225895 0.82385504 #> 198     10 7.668307 1.490157  1.5647299 0.11764625 #> 199      7 7.668307 1.490157 -0.4484808 0.65380626 #> 200     10 7.668307 1.490157  1.5647299 0.11764625 #> 201      7 7.668307 1.490157 -0.4484808 0.65380626 #> 202      8 7.668307 1.490157  0.2225895 0.82385504 #> 203      7 7.668307 1.490157 -0.4484808 0.65380626 #> 204      9 7.668307 1.490157  0.8936597 0.37150400 #> 205      7 7.668307 1.490157 -0.4484808 0.65380626 #> 206      8 7.668307 1.490157  0.2225895 0.82385504 #> 207      7 7.668307 1.490157 -0.4484808 0.65380626 #> 208      8 7.668307 1.490157  0.2225895 0.82385504 #> 209      6 7.668307 1.490157 -1.1195510 0.26290515 #> 210      8 7.668307 1.490157  0.2225895 0.82385504 #> 211      9 7.668307 1.490157  0.8936597 0.37150400 #> 212      8 7.668307 1.490157  0.2225895 0.82385504 #> 213     10 7.668307 1.490157  1.5647299 0.11764625 #> 214      7 7.668307 1.490157 -0.4484808 0.65380626 #> 215      8 7.668307 1.490157  0.2225895 0.82385504 #> 216      7 7.668307 1.490157 -0.4484808 0.65380626 #> 217      8 7.668307 1.490157  0.2225895 0.82385504 #> 218      9 7.668307 1.490157  0.8936597 0.37150400 #> 219      7 7.668307 1.490157 -0.4484808 0.65380626 #> 220      8 7.668307 1.490157  0.2225895 0.82385504 #> 221      6 7.668307 1.490157 -1.1195510 0.26290515 #> 222      9 7.668307 1.490157  0.8936597 0.37150400 #> 223      7 7.668307 1.490157 -0.4484808 0.65380626 #> 224      4 7.668307 1.490157 -2.4616914 0.01382836 #> 225     11 7.668307 1.490157  2.2358001 0.02536487 #> 226      6 7.668307 1.490157 -1.1195510 0.26290515 #> 227      9 7.668307 1.490157  0.8936597 0.37150400 #> 228      6 7.668307 1.490157 -1.1195510 0.26290515 #> 229      6 7.668307 1.490157 -1.1195510 0.26290515 #> 230      7 7.668307 1.490157 -0.4484808 0.65380626 #> 231      7 7.668307 1.490157 -0.4484808 0.65380626 #> 232      7 7.668307 1.490157 -0.4484808 0.65380626 #> 233      6 7.668307 1.490157 -1.1195510 0.26290515 #> 234      7 7.668307 1.490157 -0.4484808 0.65380626 #> 235      8 7.668307 1.490157  0.2225895 0.82385504 #> 236      9 7.668307 1.490157  0.8936597 0.37150400 #> 237      6 7.668307 1.490157 -1.1195510 0.26290515 #> 238     10 7.668307 1.490157  1.5647299 0.11764625 #> 239     10 7.668307 1.490157  1.5647299 0.11764625 #> 240     10 7.668307 1.490157  1.5647299 0.11764625 #> 241     11 7.668307 1.490157  2.2358001 0.02536487 #> 242     11 7.668307 1.490157  2.2358001 0.02536487 #> 243      6 7.668307 1.490157 -1.1195510 0.26290515 #> 244      8 7.668307 1.490157  0.2225895 0.82385504 #> 245      7 7.668307 1.490157 -0.4484808 0.65380626 #> 246      7 7.668307 1.490157 -0.4484808 0.65380626 #> 247      9 7.668307 1.490157  0.8936597 0.37150400 #> 248      9 7.668307 1.490157  0.8936597 0.37150400 #> 249      7 7.668307 1.490157 -0.4484808 0.65380626 #> 250      9 7.668307 1.490157  0.8936597 0.37150400 #> 251      9 7.668307 1.490157  0.8936597 0.37150400 #> 252      6 7.668307 1.490157 -1.1195510 0.26290515 #> 253      7 7.668307 1.490157 -0.4484808 0.65380626 #> 254     10 7.668307 1.490157  1.5647299 0.11764625 #> 255      5 7.668307 1.490157 -1.7906212 0.07335410 #> 256      5 7.668307 1.490157 -1.7906212 0.07335410 #> 257     10 7.668307 1.490157  1.5647299 0.11764625 #> 258      8 7.668307 1.490157  0.2225895 0.82385504 #> 259      9 7.668307 1.490157  0.8936597 0.37150400 #> 260      7 7.668307 1.490157 -0.4484808 0.65380626 #> 261     10 7.668307 1.490157  1.5647299 0.11764625 #> 262      6 7.668307 1.490157 -1.1195510 0.26290515 #> 263      8 7.668307 1.490157  0.2225895 0.82385504 #> 264      6 7.668307 1.490157 -1.1195510 0.26290515 #> 265      7 7.668307 1.490157 -0.4484808 0.65380626 #> 266      7 7.668307 1.490157 -0.4484808 0.65380626 #> 267      7 7.668307 1.490157 -0.4484808 0.65380626 #> 268      9 7.668307 1.490157  0.8936597 0.37150400 #> 269      6 7.668307 1.490157 -1.1195510 0.26290515 #> 270      7 7.668307 1.490157 -0.4484808 0.65380626 #> 271      7 7.668307 1.490157 -0.4484808 0.65380626 #> 272      8 7.668307 1.490157  0.2225895 0.82385504 #> 273      8 7.668307 1.490157  0.2225895 0.82385504 #> 274     10 7.668307 1.490157  1.5647299 0.11764625 #> 275      5 7.668307 1.490157 -1.7906212 0.07335410 #> 276      7 7.668307 1.490157 -0.4484808 0.65380626 #> 277     10 7.668307 1.490157  1.5647299 0.11764625 #> 278      7 7.668307 1.490157 -0.4484808 0.65380626 #> 279      8 7.668307 1.490157  0.2225895 0.82385504 #> 280      7 7.668307 1.490157 -0.4484808 0.65380626 #> 281      7 7.668307 1.490157 -0.4484808 0.65380626 #> 282      8 7.668307 1.490157  0.2225895 0.82385504 #> 283      8 7.668307 1.490157  0.2225895 0.82385504 #> 284      9 7.668307 1.490157  0.8936597 0.37150400 #> 285     10 7.668307 1.490157  1.5647299 0.11764625 #> 286      8 7.668307 1.490157  0.2225895 0.82385504 #> 287      8 7.668307 1.490157  0.2225895 0.82385504 #> 288      9 7.668307 1.490157  0.8936597 0.37150400 #> 289      9 7.668307 1.490157  0.8936597 0.37150400 #> 290     10 7.668307 1.490157  1.5647299 0.11764625 #> 291      9 7.668307 1.490157  0.8936597 0.37150400 #> 292      9 7.668307 1.490157  0.8936597 0.37150400 #> 293     10 7.668307 1.490157  1.5647299 0.11764625 #> 294      8 7.668307 1.490157  0.2225895 0.82385504 #> 295     10 7.668307 1.490157  1.5647299 0.11764625 #> 296      8 7.668307 1.490157  0.2225895 0.82385504 #> 297     10 7.668307 1.490157  1.5647299 0.11764625 #> 298      8 7.668307 1.490157  0.2225895 0.82385504 #> 299      9 7.668307 1.490157  0.8936597 0.37150400 #> 300      9 7.668307 1.490157  0.8936597 0.37150400 #> 301      9 7.668307 1.490157  0.8936597 0.37150400 #> 302      7 7.668307 1.490157 -0.4484808 0.65380626 #> 303      7 7.668307 1.490157 -0.4484808 0.65380626 #> 304      9 7.668307 1.490157  0.8936597 0.37150400 #> 305      8 7.668307 1.490157  0.2225895 0.82385504 #> 306     10 7.668307 1.490157  1.5647299 0.11764625 #> 307      9 7.668307 1.490157  0.8936597 0.37150400 #> 308      6 7.668307 1.490157 -1.1195510 0.26290515 #> 309      8 7.668307 1.490157  0.2225895 0.82385504 #> 310      7 7.668307 1.490157 -0.4484808 0.65380626 #> 311      8 7.668307 1.490157  0.2225895 0.82385504 #> 312      8 7.668307 1.490157  0.2225895 0.82385504 #> 313      9 7.668307 1.490157  0.8936597 0.37150400 #> 314      4 7.668307 1.490157 -2.4616914 0.01382836 #> 315      6 7.668307 1.490157 -1.1195510 0.26290515 #> 316      7 7.668307 1.490157 -0.4484808 0.65380626 #> 317      8 7.668307 1.490157  0.2225895 0.82385504 #> 318      9 7.668307 1.490157  0.8936597 0.37150400 #> 319      8 7.668307 1.490157  0.2225895 0.82385504 #> 320      9 7.668307 1.490157  0.8936597 0.37150400 #> 321      7 7.668307 1.490157 -0.4484808 0.65380626 #> 322      9 7.668307 1.490157  0.8936597 0.37150400 #> 323      9 7.668307 1.490157  0.8936597 0.37150400 #> 324      9 7.668307 1.490157  0.8936597 0.37150400 #> 325      9 7.668307 1.490157  0.8936597 0.37150400 #> 326      5 7.668307 1.490157 -1.7906212 0.07335410 #> 327      6 7.668307 1.490157 -1.1195510 0.26290515 #> 328      8 7.668307 1.490157  0.2225895 0.82385504 #> 329      9 7.668307 1.490157  0.8936597 0.37150400 #> 330     10 7.668307 1.490157  1.5647299 0.11764625 #> 331      8 7.668307 1.490157  0.2225895 0.82385504 #> 332      8 7.668307 1.490157  0.2225895 0.82385504 #> 333      9 7.668307 1.490157  0.8936597 0.37150400 #> 334      8 7.668307 1.490157  0.2225895 0.82385504 #> 335      7 7.668307 1.490157 -0.4484808 0.65380626 #> 336      5 7.668307 1.490157 -1.7906212 0.07335410 #> 337      6 7.668307 1.490157 -1.1195510 0.26290515 #> 338      9 7.668307 1.490157  0.8936597 0.37150400 #> 339      8 7.668307 1.490157  0.2225895 0.82385504 #> 340      6 7.668307 1.490157 -1.1195510 0.26290515 #> 341      6 7.668307 1.490157 -1.1195510 0.26290515 #> 342     11 7.668307 1.490157  2.2358001 0.02536487 #> 343      9 7.668307 1.490157  0.8936597 0.37150400 #> 344     11 7.668307 1.490157  2.2358001 0.02536487 #> 345      9 7.668307 1.490157  0.8936597 0.37150400 #> 346      8 7.668307 1.490157  0.2225895 0.82385504 #> 347      9 7.668307 1.490157  0.8936597 0.37150400 #> 348      8 7.668307 1.490157  0.2225895 0.82385504 #> 349     11 7.668307 1.490157  2.2358001 0.02536487 #> 350      9 7.668307 1.490157  0.8936597 0.37150400 #> 351      9 7.668307 1.490157  0.8936597 0.37150400 #> 352      9 7.668307 1.490157  0.8936597 0.37150400 #> 353      7 7.668307 1.490157 -0.4484808 0.65380626 #> 354      9 7.668307 1.490157  0.8936597 0.37150400 #> 355      8 7.668307 1.490157  0.2225895 0.82385504 #> 356     11 7.668307 1.490157  2.2358001 0.02536487 #> 357      8 7.668307 1.490157  0.2225895 0.82385504 #> 358      9 7.668307 1.490157  0.8936597 0.37150400 #> 359      9 7.668307 1.490157  0.8936597 0.37150400 #> 360      9 7.668307 1.490157  0.8936597 0.37150400 #> 361      9 7.668307 1.490157  0.8936597 0.37150400 #> 362      8 7.668307 1.490157  0.2225895 0.82385504 #> 363      9 7.668307 1.490157  0.8936597 0.37150400 #> 364      6 7.668307 1.490157 -1.1195510 0.26290515 #> 365     10 7.668307 1.490157  1.5647299 0.11764625 #> 366      8 7.668307 1.490157  0.2225895 0.82385504 #> 367     10 7.668307 1.490157  1.5647299 0.11764625 #> 368     10 7.668307 1.490157  1.5647299 0.11764625 #> 369      7 7.668307 1.490157 -0.4484808 0.65380626 #> 370      8 7.668307 1.490157  0.2225895 0.82385504 #> 371      8 7.668307 1.490157  0.2225895 0.82385504 #> 372      9 7.668307 1.490157  0.8936597 0.37150400 #> 373      9 7.668307 1.490157  0.8936597 0.37150400 #> 374     10 7.668307 1.490157  1.5647299 0.11764625 #> 375      9 7.668307 1.490157  0.8936597 0.37150400 #> 376      8 7.668307 1.490157  0.2225895 0.82385504 #> 377     10 7.668307 1.490157  1.5647299 0.11764625 #> 378      8 7.668307 1.490157  0.2225895 0.82385504 #> 379      8 7.668307 1.490157  0.2225895 0.82385504 #> 380      8 7.668307 1.490157  0.2225895 0.82385504 #> 381      7 7.668307 1.490157 -0.4484808 0.65380626 #> 382      6 7.668307 1.490157 -1.1195510 0.26290515 #> 383      8 7.668307 1.490157  0.2225895 0.82385504 #> 384     10 7.668307 1.490157  1.5647299 0.11764625 #> 385      7 7.668307 1.490157 -0.4484808 0.65380626 #> 386      9 7.668307 1.490157  0.8936597 0.37150400 #> 387      8 7.668307 1.490157  0.2225895 0.82385504 #> 388      9 7.668307 1.490157  0.8936597 0.37150400 #> 389      8 7.668307 1.490157  0.2225895 0.82385504 #> 390      7 7.668307 1.490157 -0.4484808 0.65380626 #> 391      4 7.668307 1.490157 -2.4616914 0.01382836 #> 392     10 7.668307 1.490157  1.5647299 0.11764625 #> 393      6 7.668307 1.490157 -1.1195510 0.26290515 #> 394      8 7.668307 1.490157  0.2225895 0.82385504 #> 395      8 7.668307 1.490157  0.2225895 0.82385504 #> 396      7 7.668307 1.490157 -0.4484808 0.65380626 #> 397      8 7.668307 1.490157  0.2225895 0.82385504 #> 398      8 7.668307 1.490157  0.2225895 0.82385504 #> 399      9 7.668307 1.490157  0.8936597 0.37150400 #> 400      9 7.668307 1.490157  0.8936597 0.37150400 #> 401      9 7.668307 1.490157  0.8936597 0.37150400 #> 402      9 7.668307 1.490157  0.8936597 0.37150400 #> 403      9 7.668307 1.490157  0.8936597 0.37150400 #> 404      8 7.668307 1.490157  0.2225895 0.82385504 #> 405      5 7.668307 1.490157 -1.7906212 0.07335410 #> 406      7 7.668307 1.490157 -0.4484808 0.65380626 #> 407      8 7.668307 1.490157  0.2225895 0.82385504 #> 408      8 7.668307 1.490157  0.2225895 0.82385504 #> 409      8 7.668307 1.490157  0.2225895 0.82385504 #> 410      8 7.668307 1.490157  0.2225895 0.82385504 #> 411      8 7.668307 1.490157  0.2225895 0.82385504 #> 412      7 7.668307 1.490157 -0.4484808 0.65380626 #> 413      8 7.668307 1.490157  0.2225895 0.82385504 #> 414     10 7.668307 1.490157  1.5647299 0.11764625 #> 415      8 7.668307 1.490157  0.2225895 0.82385504 #> 416      9 7.668307 1.490157  0.8936597 0.37150400 #> 417      9 7.668307 1.490157  0.8936597 0.37150400 #> 418      8 7.668307 1.490157  0.2225895 0.82385504 #> 419      9 7.668307 1.490157  0.8936597 0.37150400 #> 420      8 7.668307 1.490157  0.2225895 0.82385504 #> 421     11 7.668307 1.490157  2.2358001 0.02536487 #> 422      7 7.668307 1.490157 -0.4484808 0.65380626 #> 423      6 7.668307 1.490157 -1.1195510 0.26290515 #> 424      8 7.668307 1.490157  0.2225895 0.82385504 #> 425      9 7.668307 1.490157  0.8936597 0.37150400 #> 426      5 7.668307 1.490157 -1.7906212 0.07335410 #> 427      9 7.668307 1.490157  0.8936597 0.37150400 #> 428      9 7.668307 1.490157  0.8936597 0.37150400 #> 429     11 7.668307 1.490157  2.2358001 0.02536487 #> 430      8 7.668307 1.490157  0.2225895 0.82385504 #> 431      7 7.668307 1.490157 -0.4484808 0.65380626 #> 432      7 7.668307 1.490157 -0.4484808 0.65380626 #> 433      7 7.668307 1.490157 -0.4484808 0.65380626 #> 434      9 7.668307 1.490157  0.8936597 0.37150400 #> 435      9 7.668307 1.490157  0.8936597 0.37150400 #> 436      8 7.668307 1.490157  0.2225895 0.82385504 #> 437     10 7.668307 1.490157  1.5647299 0.11764625 #> 438      9 7.668307 1.490157  0.8936597 0.37150400 #> 439     10 7.668307 1.490157  1.5647299 0.11764625 #> 440      8 7.668307 1.490157  0.2225895 0.82385504 #> 441     10 7.668307 1.490157  1.5647299 0.11764625 #> 442      9 7.668307 1.490157  0.8936597 0.37150400 #> 443      7 7.668307 1.490157 -0.4484808 0.65380626 #> 444      8 7.668307 1.490157  0.2225895 0.82385504 #> 445     10 7.668307 1.490157  1.5647299 0.11764625 #> 446      8 7.668307 1.490157  0.2225895 0.82385504 #> 447      5 7.668307 1.490157 -1.7906212 0.07335410 #> 448      6 7.668307 1.490157 -1.1195510 0.26290515 #> 449      8 7.668307 1.490157  0.2225895 0.82385504 #> 450      8 7.668307 1.490157  0.2225895 0.82385504 #> 451      8 7.668307 1.490157  0.2225895 0.82385504 #> 452      8 7.668307 1.490157  0.2225895 0.82385504 #> 453      9 7.668307 1.490157  0.8936597 0.37150400 #> 454     10 7.668307 1.490157  1.5647299 0.11764625 #> 455     10 7.668307 1.490157  1.5647299 0.11764625 #> 456      8 7.668307 1.490157  0.2225895 0.82385504 #> 457      7 7.668307 1.490157 -0.4484808 0.65380626 #> 458      7 7.668307 1.490157 -0.4484808 0.65380626 #> 459      9 7.668307 1.490157  0.8936597 0.37150400 #> 460      9 7.668307 1.490157  0.8936597 0.37150400 #> 461      6 7.668307 1.490157 -1.1195510 0.26290515 #> 462      5 7.668307 1.490157 -1.7906212 0.07335410 #> 463     10 7.668307 1.490157  1.5647299 0.11764625 #> 464      8 7.668307 1.490157  0.2225895 0.82385504 #> 465      8 7.668307 1.490157  0.2225895 0.82385504 #> 466      7 7.668307 1.490157 -0.4484808 0.65380626 #> 467      6 7.668307 1.490157 -1.1195510 0.26290515 #> 468      9 7.668307 1.490157  0.8936597 0.37150400 #> 469      8 7.668307 1.490157  0.2225895 0.82385504 #> 470      8 7.668307 1.490157  0.2225895 0.82385504 #> 471      8 7.668307 1.490157  0.2225895 0.82385504 #> 472      7 7.668307 1.490157 -0.4484808 0.65380626 #> 473     10 7.668307 1.490157  1.5647299 0.11764625 #> 474      8 7.668307 1.490157  0.2225895 0.82385504 #> 475      9 7.668307 1.490157  0.8936597 0.37150400 #> 476     10 7.668307 1.490157  1.5647299 0.11764625 #> 477      7 7.668307 1.490157 -0.4484808 0.65380626 #> 478      4 7.668307 1.490157 -2.4616914 0.01382836 #> 479      6 7.668307 1.490157 -1.1195510 0.26290515 #> 480      8 7.668307 1.490157  0.2225895 0.82385504 #> 481      8 7.668307 1.490157  0.2225895 0.82385504 #> 482      8 7.668307 1.490157  0.2225895 0.82385504 #> 483      7 7.668307 1.490157 -0.4484808 0.65380626 #> 484      7 7.668307 1.490157 -0.4484808 0.65380626 #> 485      6 7.668307 1.490157 -1.1195510 0.26290515 #> 486      8 7.668307 1.490157  0.2225895 0.82385504 #> 487      9 7.668307 1.490157  0.8936597 0.37150400 #> 488      8 7.668307 1.490157  0.2225895 0.82385504 #> 489     10 7.668307 1.490157  1.5647299 0.11764625 #> 490     10 7.668307 1.490157  1.5647299 0.11764625 #> 491      8 7.668307 1.490157  0.2225895 0.82385504 #> 492      6 7.668307 1.490157 -1.1195510 0.26290515 #> 493      9 7.668307 1.490157  0.8936597 0.37150400 #> 494      6 7.668307 1.490157 -1.1195510 0.26290515 #> 495      7 7.668307 1.490157 -0.4484808 0.65380626 #> 496      9 7.668307 1.490157  0.8936597 0.37150400 #> 497      8 7.668307 1.490157  0.2225895 0.82385504 #> 498      6 7.668307 1.490157 -1.1195510 0.26290515 #> 499      7 7.668307 1.490157 -0.4484808 0.65380626 #> 500      8 7.668307 1.490157  0.2225895 0.82385504 #> 501      9 7.668307 1.490157  0.8936597 0.37150400 #> 502     10 7.668307 1.490157  1.5647299 0.11764625 #> 503      7 7.668307 1.490157 -0.4484808 0.65380626 #> 504      5 7.668307 1.490157 -1.7906212 0.07335410 #> 505      9 7.668307 1.490157  0.8936597 0.37150400 #> 506      7 7.668307 1.490157 -0.4484808 0.65380626 #> 507      6 7.668307 1.490157 -1.1195510 0.26290515 #> 508     10 7.668307 1.490157  1.5647299 0.11764625 #> 509      8 7.668307 1.490157  0.2225895 0.82385504 #> 510      7 7.668307 1.490157 -0.4484808 0.65380626 #> 511      8 7.668307 1.490157  0.2225895 0.82385504 #> 512     10 7.668307 1.490157  1.5647299 0.11764625 #> 513      9 7.668307 1.490157  0.8936597 0.37150400 #> 514      9 7.668307 1.490157  0.8936597 0.37150400 #> 515     10 7.668307 1.490157  1.5647299 0.11764625 #> 516     11 7.668307 1.490157  2.2358001 0.02536487 #> 517      7 7.668307 1.490157 -0.4484808 0.65380626 #> 518      7 7.668307 1.490157 -0.4484808 0.65380626 #> 519      9 7.668307 1.490157  0.8936597 0.37150400 #> 520      9 7.668307 1.490157  0.8936597 0.37150400 #> 521      7 7.668307 1.490157 -0.4484808 0.65380626 #> 522      6 7.668307 1.490157 -1.1195510 0.26290515 #> 523     10 7.668307 1.490157  1.5647299 0.11764625 #> 524      8 7.668307 1.490157  0.2225895 0.82385504 #> 525     10 7.668307 1.490157  1.5647299 0.11764625 #> 526      7 7.668307 1.490157 -0.4484808 0.65380626 #> 527      6 7.668307 1.490157 -1.1195510 0.26290515 #> 528      7 7.668307 1.490157 -0.4484808 0.65380626 #> 529      9 7.668307 1.490157  0.8936597 0.37150400 #> 530      6 7.668307 1.490157 -1.1195510 0.26290515 #> 531      9 7.668307 1.490157  0.8936597 0.37150400 #> 532     10 7.668307 1.490157  1.5647299 0.11764625 #> 533     10 7.668307 1.490157  1.5647299 0.11764625 #> 534      8 7.668307 1.490157  0.2225895 0.82385504 #> 535     10 7.668307 1.490157  1.5647299 0.11764625 #> 536      8 7.668307 1.490157  0.2225895 0.82385504 #> 537      9 7.668307 1.490157  0.8936597 0.37150400 #> 538      8 7.668307 1.490157  0.2225895 0.82385504 #> 539      8 7.668307 1.490157  0.2225895 0.82385504 #> 540      8 7.668307 1.490157  0.2225895 0.82385504 #> 541      9 7.668307 1.490157  0.8936597 0.37150400 #> 542      9 7.668307 1.490157  0.8936597 0.37150400 #> 543      8 7.668307 1.490157  0.2225895 0.82385504 #> 544      8 7.668307 1.490157  0.2225895 0.82385504 #> 545      8 7.668307 1.490157  0.2225895 0.82385504 #> 546      9 7.668307 1.490157  0.8936597 0.37150400 #> 547      9 7.668307 1.490157  0.8936597 0.37150400 #> 548      8 7.668307 1.490157  0.2225895 0.82385504 #> 549      7 7.668307 1.490157 -0.4484808 0.65380626 #> 550     10 7.668307 1.490157  1.5647299 0.11764625 #> 551     10 7.668307 1.490157  1.5647299 0.11764625 #> 552      9 7.668307 1.490157  0.8936597 0.37150400 #> 553     10 7.668307 1.490157  1.5647299 0.11764625 #> 554      9 7.668307 1.490157  0.8936597 0.37150400 #> 555      8 7.668307 1.490157  0.2225895 0.82385504 #> 556      8 7.668307 1.490157  0.2225895 0.82385504 #> 557     10 7.668307 1.490157  1.5647299 0.11764625 #> 558      7 7.668307 1.490157 -0.4484808 0.65380626 #> 559      9 7.668307 1.490157  0.8936597 0.37150400 #> 560      8 7.668307 1.490157  0.2225895 0.82385504 #> 561      9 7.668307 1.490157  0.8936597 0.37150400 #> 562      9 7.668307 1.490157  0.8936597 0.37150400 #> 563      8 7.668307 1.490157  0.2225895 0.82385504 #> 564      9 7.668307 1.490157  0.8936597 0.37150400 #> 565      6 7.668307 1.490157 -1.1195510 0.26290515 #> 566     10 7.668307 1.490157  1.5647299 0.11764625 #> 567     10 7.668307 1.490157  1.5647299 0.11764625 #> 568     10 7.668307 1.490157  1.5647299 0.11764625 #> 569     10 7.668307 1.490157  1.5647299 0.11764625 #> 570      8 7.668307 1.490157  0.2225895 0.82385504 #> 571      9 7.668307 1.490157  0.8936597 0.37150400 #> 572      6 7.668307 1.490157 -1.1195510 0.26290515 #> 573      9 7.668307 1.490157  0.8936597 0.37150400 #> 574      9 7.668307 1.490157  0.8936597 0.37150400 #> 575      9 7.668307 1.490157  0.8936597 0.37150400 #> 576      8 7.668307 1.490157  0.2225895 0.82385504 #> 577     10 7.668307 1.490157  1.5647299 0.11764625 #> 578      7 7.668307 1.490157 -0.4484808 0.65380626 #> 579      8 7.668307 1.490157  0.2225895 0.82385504 #> 580      7 7.668307 1.490157 -0.4484808 0.65380626 #> 581      8 7.668307 1.490157  0.2225895 0.82385504 #> 582     10 7.668307 1.490157  1.5647299 0.11764625 #> 583      7 7.668307 1.490157 -0.4484808 0.65380626 #> 584      9 7.668307 1.490157  0.8936597 0.37150400 #> 585      7 7.668307 1.490157 -0.4484808 0.65380626 #> 586      5 7.668307 1.490157 -1.7906212 0.07335410 #> 587      6 7.668307 1.490157 -1.1195510 0.26290515 #> 588      6 7.668307 1.490157 -1.1195510 0.26290515 #> 589      7 7.668307 1.490157 -0.4484808 0.65380626 #> 590     10 7.668307 1.490157  1.5647299 0.11764625 #> 591      7 7.668307 1.490157 -0.4484808 0.65380626 #> 592      8 7.668307 1.490157  0.2225895 0.82385504 #> 593      9 7.668307 1.490157  0.8936597 0.37150400 #> 594      9 7.668307 1.490157  0.8936597 0.37150400 #> 595     10 7.668307 1.490157  1.5647299 0.11764625 #> 596      9 7.668307 1.490157  0.8936597 0.37150400 #> 597      5 7.668307 1.490157 -1.7906212 0.07335410 #> 598      9 7.668307 1.490157  0.8936597 0.37150400 #> 599     10 7.668307 1.490157  1.5647299 0.11764625 #> 600      6 7.668307 1.490157 -1.1195510 0.26290515 #> 601      5 7.668307 1.490157 -1.7906212 0.07335410 #> 602      8 7.668307 1.490157  0.2225895 0.82385504 #> 603      9 7.668307 1.490157  0.8936597 0.37150400 #> 604     10 7.668307 1.490157  1.5647299 0.11764625 #> 605      8 7.668307 1.490157  0.2225895 0.82385504 #> 606      8 7.668307 1.490157  0.2225895 0.82385504 #> 607      4 7.668307 1.490157 -2.4616914 0.01382836 #> 608      9 7.668307 1.490157  0.8936597 0.37150400 #> 609      8 7.668307 1.490157  0.2225895 0.82385504 #> 610      9 7.668307 1.490157  0.8936597 0.37150400 #> 611     10 7.668307 1.490157  1.5647299 0.11764625 #> 612      7 7.668307 1.490157 -0.4484808 0.65380626 #> 613      8 7.668307 1.490157  0.2225895 0.82385504 #> 614      9 7.668307 1.490157  0.8936597 0.37150400 #> 615      7 7.668307 1.490157 -0.4484808 0.65380626 #> 616      6 7.668307 1.490157 -1.1195510 0.26290515 #> 617      4 7.668307 1.490157 -2.4616914 0.01382836 #> 618      6 7.668307 1.490157 -1.1195510 0.26290515 #> 619      6 7.668307 1.490157 -1.1195510 0.26290515 #> 620      8 7.668307 1.490157  0.2225895 0.82385504 #> 621      8 7.668307 1.490157  0.2225895 0.82385504 #> 622      7 7.668307 1.490157 -0.4484808 0.65380626 #> 623      5 7.668307 1.490157 -1.7906212 0.07335410 #> 624      6 7.668307 1.490157 -1.1195510 0.26290515 #> 625      9 7.668307 1.490157  0.8936597 0.37150400 #> 626      8 7.668307 1.490157  0.2225895 0.82385504 #> 627      7 7.668307 1.490157 -0.4484808 0.65380626 #> 628      9 7.668307 1.490157  0.8936597 0.37150400 #> 629      9 7.668307 1.490157  0.8936597 0.37150400 #> 630      7 7.668307 1.490157 -0.4484808 0.65380626 #> 631      8 7.668307 1.490157  0.2225895 0.82385504 #> 632      8 7.668307 1.490157  0.2225895 0.82385504 #> 633      9 7.668307 1.490157  0.8936597 0.37150400 #> 634      8 7.668307 1.490157  0.2225895 0.82385504 #> 635      8 7.668307 1.490157  0.2225895 0.82385504 #> 636      8 7.668307 1.490157  0.2225895 0.82385504 #> 637     10 7.668307 1.490157  1.5647299 0.11764625 #> 638      9 7.668307 1.490157  0.8936597 0.37150400 #> 639      7 7.668307 1.490157 -0.4484808 0.65380626 #> 640      9 7.668307 1.490157  0.8936597 0.37150400 #> 641      7 7.668307 1.490157 -0.4484808 0.65380626 #> 642     11 7.668307 1.490157  2.2358001 0.02536487 #> 643      8 7.668307 1.490157  0.2225895 0.82385504 #> 644      9 7.668307 1.490157  0.8936597 0.37150400 #> 645      7 7.668307 1.490157 -0.4484808 0.65380626 #> 646     10 7.668307 1.490157  1.5647299 0.11764625 #> 647      5 7.668307 1.490157 -1.7906212 0.07335410 #> 648      5 7.668307 1.490157 -1.7906212 0.07335410 #> 649      8 7.668307 1.490157  0.2225895 0.82385504 #> 650      9 7.668307 1.490157  0.8936597 0.37150400 #> 651      9 7.668307 1.490157  0.8936597 0.37150400 #> 652      6 7.668307 1.490157 -1.1195510 0.26290515 #> 653      7 7.668307 1.490157 -0.4484808 0.65380626 #> 654      8 7.668307 1.490157  0.2225895 0.82385504 #> 655      7 7.668307 1.490157 -0.4484808 0.65380626 #> 656      8 7.668307 1.490157  0.2225895 0.82385504 #> 657      8 7.668307 1.490157  0.2225895 0.82385504 #> 658      9 7.668307 1.490157  0.8936597 0.37150400 #> 659      7 7.668307 1.490157 -0.4484808 0.65380626 #> 660      9 7.668307 1.490157  0.8936597 0.37150400 #> 661      9 7.668307 1.490157  0.8936597 0.37150400 #> 662      7 7.668307 1.490157 -0.4484808 0.65380626 #> 663      9 7.668307 1.490157  0.8936597 0.37150400 #> 664      8 7.668307 1.490157  0.2225895 0.82385504 #> 665      8 7.668307 1.490157  0.2225895 0.82385504 #> 666     11 7.668307 1.490157  2.2358001 0.02536487 #> 667      8 7.668307 1.490157  0.2225895 0.82385504 #> 668      9 7.668307 1.490157  0.8936597 0.37150400 #> 669      9 7.668307 1.490157  0.8936597 0.37150400 #> 670      8 7.668307 1.490157  0.2225895 0.82385504 #> 671      9 7.668307 1.490157  0.8936597 0.37150400 #> 672     10 7.668307 1.490157  1.5647299 0.11764625 #> 673     10 7.668307 1.490157  1.5647299 0.11764625 #> 674      8 7.668307 1.490157  0.2225895 0.82385504 #> 675      9 7.668307 1.490157  0.8936597 0.37150400 #> 676      9 7.668307 1.490157  0.8936597 0.37150400 #> 677      9 7.668307 1.490157  0.8936597 0.37150400 #> 678      9 7.668307 1.490157  0.8936597 0.37150400 #> 679      9 7.668307 1.490157  0.8936597 0.37150400 #> 680      9 7.668307 1.490157  0.8936597 0.37150400 #> 681      6 7.668307 1.490157 -1.1195510 0.26290515 #> 682      6 7.668307 1.490157 -1.1195510 0.26290515 #> 683      7 7.668307 1.490157 -0.4484808 0.65380626 #> 684      8 7.668307 1.490157  0.2225895 0.82385504 #> 685      8 7.668307 1.490157  0.2225895 0.82385504 #> 686      7 7.668307 1.490157 -0.4484808 0.65380626 #> 687      8 7.668307 1.490157  0.2225895 0.82385504 #> 688      8 7.668307 1.490157  0.2225895 0.82385504 #> 689      8 7.668307 1.490157  0.2225895 0.82385504 #> 690      8 7.668307 1.490157  0.2225895 0.82385504 #> 691      7 7.668307 1.490157 -0.4484808 0.65380626 #> 692      6 7.668307 1.490157 -1.1195510 0.26290515 #> 693     10 7.668307 1.490157  1.5647299 0.11764625 #> 694      7 7.668307 1.490157 -0.4484808 0.65380626 #> 695      6 7.668307 1.490157 -1.1195510 0.26290515 #> 696     11 7.668307 1.490157  2.2358001 0.02536487 #> 697      8 7.668307 1.490157  0.2225895 0.82385504 #> 698      6 7.668307 1.490157 -1.1195510 0.26290515 #> 699      7 7.668307 1.490157 -0.4484808 0.65380626 #> 700      7 7.668307 1.490157 -0.4484808 0.65380626 #> 701      6 7.668307 1.490157 -1.1195510 0.26290515 #> 702      8 7.668307 1.490157  0.2225895 0.82385504 #> 703      8 7.668307 1.490157  0.2225895 0.82385504 #> 704      8 7.668307 1.490157  0.2225895 0.82385504 #> 705      8 7.668307 1.490157  0.2225895 0.82385504 #> 706     10 7.668307 1.490157  1.5647299 0.11764625 #> 707      9 7.668307 1.490157  0.8936597 0.37150400 #> 708      6 7.668307 1.490157 -1.1195510 0.26290515 #> 709      8 7.668307 1.490157  0.2225895 0.82385504 #> 710     10 7.668307 1.490157  1.5647299 0.11764625 #> 711      9 7.668307 1.490157  0.8936597 0.37150400 #> 712      9 7.668307 1.490157  0.8936597 0.37150400 #> 713      8 7.668307 1.490157  0.2225895 0.82385504 #> 714      8 7.668307 1.490157  0.2225895 0.82385504 #> 715     10 7.668307 1.490157  1.5647299 0.11764625 #> 716      7 7.668307 1.490157 -0.4484808 0.65380626 #> 717      7 7.668307 1.490157 -0.4484808 0.65380626 #> 718      9 7.668307 1.490157  0.8936597 0.37150400 #> 719      8 7.668307 1.490157  0.2225895 0.82385504 #> 720      8 7.668307 1.490157  0.2225895 0.82385504 #> 721      9 7.668307 1.490157  0.8936597 0.37150400 #> 722      9 7.668307 1.490157  0.8936597 0.37150400 #> 723      8 7.668307 1.490157  0.2225895 0.82385504 #> 724      8 7.668307 1.490157  0.2225895 0.82385504 #> 725      6 7.668307 1.490157 -1.1195510 0.26290515 #> 726     10 7.668307 1.490157  1.5647299 0.11764625 #> 727      8 7.668307 1.490157  0.2225895 0.82385504 #> 728      9 7.668307 1.490157  0.8936597 0.37150400 #> 729      7 7.668307 1.490157 -0.4484808 0.65380626 #> 730      9 7.668307 1.490157  0.8936597 0.37150400 #> 731      9 7.668307 1.490157  0.8936597 0.37150400 #> 732      7 7.668307 1.490157 -0.4484808 0.65380626 #> 733     10 7.668307 1.490157  1.5647299 0.11764625 #> 734      6 7.668307 1.490157 -1.1195510 0.26290515 #> 735      6 7.668307 1.490157 -1.1195510 0.26290515 #> 736      5 7.668307 1.490157 -1.7906212 0.07335410 #> 737      6 7.668307 1.490157 -1.1195510 0.26290515 #> 738      7 7.668307 1.490157 -0.4484808 0.65380626 #> 739     10 7.668307 1.490157  1.5647299 0.11764625 #> 740      9 7.668307 1.490157  0.8936597 0.37150400 #> 741      9 7.668307 1.490157  0.8936597 0.37150400 #> 742      7 7.668307 1.490157 -0.4484808 0.65380626 #> 743      8 7.668307 1.490157  0.2225895 0.82385504 #> 744      7 7.668307 1.490157 -0.4484808 0.65380626 #> 745      9 7.668307 1.490157  0.8936597 0.37150400 #> 746      9 7.668307 1.490157  0.8936597 0.37150400 #> 747      6 7.668307 1.490157 -1.1195510 0.26290515 #> 748      9 7.668307 1.490157  0.8936597 0.37150400 #> 749      9 7.668307 1.490157  0.8936597 0.37150400 #> 750      6 7.668307 1.490157 -1.1195510 0.26290515 #> 751      8 7.668307 1.490157  0.2225895 0.82385504 #> 752      8 7.668307 1.490157  0.2225895 0.82385504 #> 753      9 7.668307 1.490157  0.8936597 0.37150400 #> 754      9 7.668307 1.490157  0.8936597 0.37150400 #> 755      7 7.668307 1.490157 -0.4484808 0.65380626 #> 756      9 7.668307 1.490157  0.8936597 0.37150400 #> 757     11 7.668307 1.490157  2.2358001 0.02536487 #> 758      7 7.668307 1.490157 -0.4484808 0.65380626 #> 759      9 7.668307 1.490157  0.8936597 0.37150400 #> 760      7 7.668307 1.490157 -0.4484808 0.65380626 #> 761      9 7.668307 1.490157  0.8936597 0.37150400 #> 762      7 7.668307 1.490157 -0.4484808 0.65380626 #> 763      8 7.668307 1.490157  0.2225895 0.82385504 #> 764      8 7.668307 1.490157  0.2225895 0.82385504 #> 765      4 7.668307 1.490157 -2.4616914 0.01382836 #> 766      8 7.668307 1.490157  0.2225895 0.82385504 #> 767      9 7.668307 1.490157  0.8936597 0.37150400 #> 768      8 7.668307 1.490157  0.2225895 0.82385504 #> 769     11 7.668307 1.490157  2.2358001 0.02536487 #> 770      8 7.668307 1.490157  0.2225895 0.82385504 #> 771     10 7.668307 1.490157  1.5647299 0.11764625 #> 772      7 7.668307 1.490157 -0.4484808 0.65380626 #> 773      6 7.668307 1.490157 -1.1195510 0.26290515 #> 774     10 7.668307 1.490157  1.5647299 0.11764625 #> 775      7 7.668307 1.490157 -0.4484808 0.65380626 #> 776      9 7.668307 1.490157  0.8936597 0.37150400 #> 777      8 7.668307 1.490157  0.2225895 0.82385504 #> 778      6 7.668307 1.490157 -1.1195510 0.26290515 #> 779      8 7.668307 1.490157  0.2225895 0.82385504 #> 780     10 7.668307 1.490157  1.5647299 0.11764625 #> 781     10 7.668307 1.490157  1.5647299 0.11764625 #> 782     10 7.668307 1.490157  1.5647299 0.11764625 #> 783      9 7.668307 1.490157  0.8936597 0.37150400 #> 784      6 7.668307 1.490157 -1.1195510 0.26290515 #> 785     10 7.668307 1.490157  1.5647299 0.11764625 #> 786      7 7.668307 1.490157 -0.4484808 0.65380626 #> 787      8 7.668307 1.490157  0.2225895 0.82385504 #> 788      9 7.668307 1.490157  0.8936597 0.37150400 #> 789     10 7.668307 1.490157  1.5647299 0.11764625 #> 790      5 7.668307 1.490157 -1.7906212 0.07335410 #> 791      9 7.668307 1.490157  0.8936597 0.37150400 #> 792      8 7.668307 1.490157  0.2225895 0.82385504 #> 793      8 7.668307 1.490157  0.2225895 0.82385504 #> 794      8 7.668307 1.490157  0.2225895 0.82385504 #> 795      7 7.668307 1.490157 -0.4484808 0.65380626 #> 796      7 7.668307 1.490157 -0.4484808 0.65380626 #> 797      6 7.668307 1.490157 -1.1195510 0.26290515 #> 798      8 7.668307 1.490157  0.2225895 0.82385504 #> 799      8 7.668307 1.490157  0.2225895 0.82385504 #> 800      9 7.668307 1.490157  0.8936597 0.37150400 #> 801      8 7.668307 1.490157  0.2225895 0.82385504 #> 802     10 7.668307 1.490157  1.5647299 0.11764625 #> 803      7 7.668307 1.490157 -0.4484808 0.65380626 #> 804      9 7.668307 1.490157  0.8936597 0.37150400 #> 805     10 7.668307 1.490157  1.5647299 0.11764625 #> 806      8 7.668307 1.490157  0.2225895 0.82385504 #> 807     10 7.668307 1.490157  1.5647299 0.11764625 #> 808      8 7.668307 1.490157  0.2225895 0.82385504 #> 809      7 7.668307 1.490157 -0.4484808 0.65380626 #> 810     10 7.668307 1.490157  1.5647299 0.11764625 #> 811     10 7.668307 1.490157  1.5647299 0.11764625 #> 812      9 7.668307 1.490157  0.8936597 0.37150400 #> 813      9 7.668307 1.490157  0.8936597 0.37150400 #> 814      5 7.668307 1.490157 -1.7906212 0.07335410 #> 815     10 7.668307 1.490157  1.5647299 0.11764625 #> 816     10 7.668307 1.490157  1.5647299 0.11764625 #> 817      9 7.668307 1.490157  0.8936597 0.37150400 #> 818     10 7.668307 1.490157  1.5647299 0.11764625 #> 819      9 7.668307 1.490157  0.8936597 0.37150400 #> 820      7 7.668307 1.490157 -0.4484808 0.65380626 #> 821      8 7.668307 1.490157  0.2225895 0.82385504 #> 822      7 7.668307 1.490157 -0.4484808 0.65380626 #> 823      6 7.668307 1.490157 -1.1195510 0.26290515 #> 824      5 7.668307 1.490157 -1.7906212 0.07335410 #> 825      7 7.668307 1.490157 -0.4484808 0.65380626 #> 826      7 7.668307 1.490157 -0.4484808 0.65380626 #> 827      9 7.668307 1.490157  0.8936597 0.37150400 #> 828      6 7.668307 1.490157 -1.1195510 0.26290515 #> 829      8 7.668307 1.490157  0.2225895 0.82385504 #> 830      9 7.668307 1.490157  0.8936597 0.37150400 #> 831      9 7.668307 1.490157  0.8936597 0.37150400 #> 832      9 7.668307 1.490157  0.8936597 0.37150400 #> 833      7 7.668307 1.490157 -0.4484808 0.65380626 #> 834      8 7.668307 1.490157  0.2225895 0.82385504 #> 835      8 7.668307 1.490157  0.2225895 0.82385504 #> 836      8 7.668307 1.490157  0.2225895 0.82385504 #> 837      9 7.668307 1.490157  0.8936597 0.37150400 #> 838      8 7.668307 1.490157  0.2225895 0.82385504 #> 839      8 7.668307 1.490157  0.2225895 0.82385504 #> 840      7 7.668307 1.490157 -0.4484808 0.65380626 #> 841      9 7.668307 1.490157  0.8936597 0.37150400 #> 842      9 7.668307 1.490157  0.8936597 0.37150400 #> 843      7 7.668307 1.490157 -0.4484808 0.65380626 #> 844     10 7.668307 1.490157  1.5647299 0.11764625 #> 845      9 7.668307 1.490157  0.8936597 0.37150400 #> 846      9 7.668307 1.490157  0.8936597 0.37150400 #> 847      9 7.668307 1.490157  0.8936597 0.37150400 #> 848      8 7.668307 1.490157  0.2225895 0.82385504 #> 849      5 7.668307 1.490157 -1.7906212 0.07335410 #> 850      9 7.668307 1.490157  0.8936597 0.37150400 #> 851     10 7.668307 1.490157  1.5647299 0.11764625 #> 852      8 7.668307 1.490157  0.2225895 0.82385504 #> 853      7 7.668307 1.490157 -0.4484808 0.65380626 #> 854     10 7.668307 1.490157  1.5647299 0.11764625 #> 855      7 7.668307 1.490157 -0.4484808 0.65380626 #> 856      9 7.668307 1.490157  0.8936597 0.37150400 #> 857      9 7.668307 1.490157  0.8936597 0.37150400 #> 858      7 7.668307 1.490157 -0.4484808 0.65380626 #> 859      8 7.668307 1.490157  0.2225895 0.82385504 #> 860     10 7.668307 1.490157  1.5647299 0.11764625 #> 861      8 7.668307 1.490157  0.2225895 0.82385504 #> 862      7 7.668307 1.490157 -0.4484808 0.65380626 #> 863      7 7.668307 1.490157 -0.4484808 0.65380626 #> 864      7 7.668307 1.490157 -0.4484808 0.65380626 #> 865      7 7.668307 1.490157 -0.4484808 0.65380626 #> 866      9 7.668307 1.490157  0.8936597 0.37150400 #> 867      6 7.668307 1.490157 -1.1195510 0.26290515 #> 868      8 7.668307 1.490157  0.2225895 0.82385504 #> 869      9 7.668307 1.490157  0.8936597 0.37150400 #> 870      8 7.668307 1.490157  0.2225895 0.82385504 #> 871      8 7.668307 1.490157  0.2225895 0.82385504 #> 872     10 7.668307 1.490157  1.5647299 0.11764625 #> 873      6 7.668307 1.490157 -1.1195510 0.26290515 #> 874      7 7.668307 1.490157 -0.4484808 0.65380626 #> 875      8 7.668307 1.490157  0.2225895 0.82385504 #> 876      8 7.668307 1.490157  0.2225895 0.82385504 #> 877      7 7.668307 1.490157 -0.4484808 0.65380626 plot(lsrq, sf = FastFood.sf, sig = 0.05) #> Warning: bounding box has potentially an invalid value range for longlat data  # }  # Case 3: With a sf object (poligons) library(lwgeom) fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 listw <- spdep::poly2nb(as(nc,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar p <- c(1/6,3/6,2/6) rho = 0.5 nc$fx <- dgp.spq(p = p, listw = listw, rho = rho) plot(nc[\"fx\"])  formula <- ~ fx lsrq <- local.sp.runs.test(formula = formula, data = nc, listw = listw) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>     runs.i      E.i     Std.i     z.value     p.value #> 1        4 2.855152 0.8722689  1.31249497 0.189353181 #> 2        3 2.855152 0.8722689  0.16605945 0.868110166 #> 3        5 4.091919 1.1317511  0.80236794 0.422340153 #> 4        1 2.236768 0.7064182 -1.75075861 0.079987499 #> 5        4 3.473535 1.0106752  0.52090392 0.602433708 #> 6        3 2.855152 0.8722689  0.16605945 0.868110166 #> 7        3 2.855152 0.8722689  0.16605945 0.868110166 #> 8        5 4.091919 1.1317511  0.80236794 0.422340153 #> 9        4 3.473535 1.0106752  0.52090392 0.602433708 #> 10       4 2.855152 0.8722689  1.31249497 0.189353181 #> 11       3 3.473535 1.0106752 -0.46853368 0.639402990 #> 12       2 3.473535 1.0106752 -1.45797128 0.144848459 #> 13       3 4.091919 1.1317511 -0.96480505 0.334642465 #> 14       5 3.473535 1.0106752  1.51034151 0.130956304 #> 15       3 2.855152 0.8722689  0.16605945 0.868110166 #> 16       6 4.710303 1.2405813  1.03959088 0.298530015 #> 17       4 2.855152 0.8722689  1.31249497 0.189353181 #> 18       8 5.947071 1.4323964  1.43321312 0.151796942 #> 19       4 3.473535 1.0106752  0.52090392 0.602433708 #> 20       4 2.855152 0.8722689  1.31249497 0.189353181 #> 21       3 2.236768 0.7064182  1.08042568 0.279952664 #> 22       5 4.091919 1.1317511  0.80236794 0.422340153 #> 23       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 24       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 25       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 26       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 27       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 28       3 4.091919 1.1317511 -0.96480505 0.334642465 #> 29       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 30       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 31       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 32       4 2.855152 0.8722689  1.31249497 0.189353181 #> 33       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 34       6 4.710303 1.2405813  1.03959088 0.298530015 #> 35       4 3.473535 1.0106752  0.52090392 0.602433708 #> 36       5 4.710303 1.2405813  0.23351712 0.815359874 #> 37       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 38       3 2.855152 0.8722689  0.16605945 0.868110166 #> 39       8 6.565455 1.5186493  0.94461932 0.344853262 #> 40       6 4.091919 1.1317511  1.68595444 0.091804576 #> 41       4 3.473535 1.0106752  0.52090392 0.602433708 #> 42       6 4.710303 1.2405813  1.03959088 0.298530015 #> 43       5 4.710303 1.2405813  0.23351712 0.815359874 #> 44       3 4.091919 1.1317511 -0.96480505 0.334642465 #> 45       3 2.236768 0.7064182  1.08042568 0.279952664 #> 46       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 47       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 48       6 5.947071 1.4323964  0.03695157 0.970523622 #> 49       5 4.710303 1.2405813  0.23351712 0.815359874 #> 50       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 51       6 5.328687 1.3401523  0.50092302 0.616425301 #> 52       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 53       5 4.710303 1.2405813  0.23351712 0.815359874 #> 54       5 4.710303 1.2405813  0.23351712 0.815359874 #> 55       2 4.091919 1.1317511 -1.84839155 0.064545720 #> 56       3 2.236768 0.7064182  1.08042568 0.279952664 #> 57       7 4.710303 1.2405813  1.84566464 0.064940915 #> 58       2 3.473535 1.0106752 -1.45797128 0.144848459 #> 59       2 3.473535 1.0106752 -1.45797128 0.144848459 #> 60       3 2.855152 0.8722689  0.16605945 0.868110166 #> 61       5 4.710303 1.2405813  0.23351712 0.815359874 #> 62       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 63       5 5.328687 1.3401523 -0.24526083 0.806254475 #> 64       2 3.473535 1.0106752 -1.45797128 0.144848459 #> 65       4 4.091919 1.1317511 -0.08121856 0.935268142 #> 66       3 3.473535 1.0106752 -0.46853368 0.639402990 #> 67       5 5.947071 1.4323964 -0.66117921 0.508497395 #> 68       3 4.091919 1.1317511 -0.96480505 0.334642465 #> 69       6 4.091919 1.1317511  1.68595444 0.091804576 #> 70       6 4.710303 1.2405813  1.03959088 0.298530015 #> 71       3 4.091919 1.1317511 -0.96480505 0.334642465 #> 72       3 3.473535 1.0106752 -0.46853368 0.639402990 #> 73       1 2.855152 0.8722689 -2.12681160 0.033435740 #> 74       6 4.710303 1.2405813  1.03959088 0.298530015 #> 75       2 2.855152 0.8722689 -0.98037608 0.326900515 #> 76       2 2.855152 0.8722689 -0.98037608 0.326900515 #> 77       2 2.236768 0.7064182 -0.33516646 0.737499518 #> 78       1 4.091919 1.1317511 -2.73197805 0.006295534 #> 79       3 5.328687 1.3401523 -1.73762855 0.082276287 #> 80       2 2.236768 0.7064182 -0.33516646 0.737499518 #> 81       1 2.855152 0.8722689 -2.12681160 0.033435740 #> 82       4 4.710303 1.2405813 -0.57255663 0.566944931 #> 83       3 4.091919 1.1317511 -0.96480505 0.334642465 #> 84       3 3.473535 1.0106752 -0.46853368 0.639402990 #> 85       3 3.473535 1.0106752 -0.46853368 0.639402990 #> 86       2 3.473535 1.0106752 -1.45797128 0.144848459 #> 87       4 3.473535 1.0106752  0.52090392 0.602433708 #> 88       5 4.710303 1.2405813  0.23351712 0.815359874 #> 89       3 3.473535 1.0106752 -0.46853368 0.639402990 #> 90       1 2.236768 0.7064182 -1.75075861 0.079987499 #> 91       6 4.710303 1.2405813  1.03959088 0.298530015 #> 92       2 2.855152 0.8722689 -0.98037608 0.326900515 #> 93       2 3.473535 1.0106752 -1.45797128 0.144848459 #> 94       5 4.091919 1.1317511  0.80236794 0.422340153 #> 95       4 2.855152 0.8722689  1.31249497 0.189353181 #> 96       5 4.091919 1.1317511  0.80236794 0.422340153 #> 97       6 5.328687 1.3401523  0.50092302 0.616425301 #> 98       4 3.473535 1.0106752  0.52090392 0.602433708 #> 99       2 2.236768 0.7064182 -0.33516646 0.737499518 #> 100      3 2.855152 0.8722689  0.16605945 0.868110166 plot(lsrq, sf = nc)  # Version boot lsrq <- local.sp.runs.test(formula = formula, data = nc, listw = listw,                            distr =\"bootstrap\", nsim = 399) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>     SRQ     EP.i     SdP.i zseudo.value pseudo.value #> 1     4 2.827068 0.8925539   1.31413056  0.188802273 #> 2     3 2.844612 0.8716154   0.17827642  0.858505893 #> 3     5 4.065163 1.1256553   0.83048254  0.406266016 #> 4     1 2.345865 0.6730092  -1.99977153  0.045524940 #> 5     4 3.483709 0.9970359   0.51782559  0.604579963 #> 6     3 2.862155 0.8348841   0.16510628  0.868860333 #> 7     3 2.919799 0.8557133   0.09372357  0.925328747 #> 8     5 4.177945 1.0778327   0.76269268  0.445646697 #> 9     4 3.418546 1.0431672   0.55739254  0.577259262 #> 10    4 2.859649 0.8798989   1.29600224  0.194974715 #> 11    3 3.476190 1.0532598  -0.45211111  0.651188942 #> 12    2 3.483709 1.0341458  -1.43471961  0.151367015 #> 13    3 4.180451 1.0502542  -1.12396702  0.261027017 #> 14    5 3.528822 0.9789474   1.50281610  0.132886474 #> 15    3 2.844612 0.8242035   0.18853169  0.850459876 #> 16    6 4.601504 1.2376415   1.12996875  0.258489392 #> 17    4 2.869674 0.9039598   1.25041599  0.211147627 #> 18    8 5.904762 1.5338566   1.36599350  0.171941004 #> 19    4 3.498747 0.9895806   0.50653088  0.612484020 #> 20    4 2.887218 0.8881193   1.25296457  0.210218603 #> 21    3 2.253133 0.6825786   1.09418488  0.273873902 #> 22    5 4.002506 1.1872411   0.84017790  0.400808650 #> 23    4 4.090226 1.1283820  -0.07996012  0.936268971 #> 24    4 4.047619 1.1365283  -0.04189869  0.966579460 #> 25    4 4.776942 1.2000292  -0.64743622  0.517349660 #> 26    4 4.082707 1.2012040  -0.06885322  0.945106455 #> 27    4 4.761905 1.2241097  -0.62241542  0.533668745 #> 28    3 4.060150 1.1610907  -0.91306421  0.361208770 #> 29    4 4.082707 1.1970133  -0.06909427  0.944914579 #> 30    4 4.150376 1.1441104  -0.13143482  0.895431346 #> 31    4 4.150376 1.1701667  -0.12850814  0.897746859 #> 32    4 2.744361 0.9132261   1.37494874  0.169147337 #> 33    4 4.105263 1.1181227  -0.09414276  0.924995753 #> 34    6 4.624060 1.2130043   1.13432396  0.256658683 #> 35    4 3.488722 0.9895170   0.51669472  0.605369282 #> 36    5 4.674185 1.2109676   0.26905306  0.787888850 #> 37    4 4.769424 1.2306665  -0.62520881  0.531834021 #> 38    3 2.879699 0.8685249   0.13851157  0.889836128 #> 39    8 6.726817 1.5230417   0.83594755  0.403184408 #> 40    6 4.092732 1.1793544   1.61721383  0.105832132 #> 41    4 3.421053 1.0140510   0.57092531  0.568050275 #> 42    6 4.611529 1.2767607   1.08749519  0.276818021 #> 43    5 4.626566 1.2534960   0.29791366  0.765769062 #> 44    3 4.012531 1.1196479  -0.90433013  0.365820375 #> 45    3 2.182957 0.6755681   1.20941564  0.226503203 #> 46    4 4.604010 1.2832841  -0.47067522  0.637872680 #> 47    4 4.649123 1.2510068  -0.51888031  0.603844210 #> 48    6 6.030075 1.4524620  -0.02070635  0.983479903 #> 49    5 4.686717 1.2007531   0.26090560  0.794165308 #> 50    4 4.000000 1.1583214   0.00000000  1.000000000 #> 51    6 5.308271 1.2592200   0.54933160  0.582777905 #> 52    4 4.015038 1.1966345  -0.01256657  0.989973590 #> 53    5 4.601504 1.2457355   0.31988831  0.749052997 #> 54    5 4.709273 1.2116226   0.23994832  0.810370318 #> 55    2 4.137845 1.1357801  -1.88226989  0.059799380 #> 56    3 2.200501 0.7123461   1.12234597  0.261715369 #> 57    7 4.606516 1.3140362   1.82147473  0.068534724 #> 58    2 3.438596 1.0003085  -1.43815280  0.150390703 #> 59    2 3.501253 1.0367001  -1.44810740  0.147587017 #> 60    3 2.872180 0.8775268   0.14565886  0.884190703 #> 61    5 4.764411 1.2519880   0.18817191  0.850741893 #> 62    4 4.699248 1.2256777  -0.57049917  0.568339185 #> 63    5 5.365915 1.3529945  -0.27044810  0.786815540 #> 64    2 3.508772 1.0342371  -1.45882589  0.144613034 #> 65    4 4.087719 1.1274664  -0.07780214  0.937985444 #> 66    3 3.516291 0.9995528  -0.51652171  0.605490077 #> 67    5 5.947368 1.4457482  -0.65527900  0.512288137 #> 68    3 4.177945 1.0301558  -1.14346287  0.252846463 #> 69    6 4.132832 1.1274999   1.65602491  0.097716775 #> 70    6 4.666667 1.2427343   1.07290296  0.283314660 #> 71    3 4.042607 1.1098867  -0.93938104  0.347535143 #> 72    3 3.566416 0.9949495  -0.56929123  0.569158517 #> 73    1 2.859649 0.8940624  -2.07999920  0.037525606 #> 74    6 4.701754 1.2715566   1.02098924  0.307259537 #> 75    2 2.849624 0.9036184  -0.94024651  0.347091130 #> 76    2 2.887218 0.8446176  -1.05043753  0.293516999 #> 77    2 2.283208 0.6927432  -0.40882105  0.682670991 #> 78    1 4.050125 1.1061699  -2.75737514  0.005826746 #> 79    3 5.456140 1.3271256  -1.85072180  0.064209586 #> 80    2 2.263158 0.7006250  -0.37560447  0.707210965 #> 81    1 2.879699 0.8568752  -2.19366750  0.028259322 #> 82    4 4.736842 1.1598046  -0.63531571  0.525222529 #> 83    3 4.067669 1.1443250  -0.93301218  0.350813680 #> 84    3 3.466165 0.9787866  -0.47626869  0.633882965 #> 85    3 3.433584 1.0024969  -0.43250406  0.665375101 #> 86    2 3.483709 1.0317134  -1.43810223  0.150405049 #> 87    4 3.521303 1.0389027   0.46077147  0.644962573 #> 88    5 4.666667 1.2825331   0.25990233  0.794939117 #> 89    3 3.446115 1.0206308  -0.43709764  0.662040542 #> 90    1 2.263158 0.7183321  -1.75845940  0.078669374 #> 91    6 4.656642 1.2175021   1.10337257  0.269865403 #> 92    2 2.869674 0.8670737  -1.00299920  0.315861247 #> 93    2 3.340852 1.0414091  -1.28753639  0.197907394 #> 94    5 4.065163 1.1256553   0.83048254  0.406266016 #> 95    4 2.759398 0.8695032   1.42679349  0.153639430 #> 96    5 4.182957 1.1069040   0.73813322  0.460433501 #> 97    6 5.368421 1.4114055   0.44748227  0.654526890 #> 98    4 3.458647 1.0261256   0.52757027  0.597797633 #> 99    2 2.265664 0.6906402  -0.38466361  0.700486660 #> 100   3 2.872180 0.8630919   0.14809494  0.882267839 plot(lsrq, sf = nc)   # Case 4: With isolated areas library(lwgeom) data(provinces_spain) listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") plot(provinces_spain[\"Male2Female\"])  formula <- ~ Male2Female lsrq <- local.sp.runs.test(formula = formula, data = provinces_spain, listw = listw) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>    runs.i      E.i     Std.i     z.value    p.value #> 1       3 2.963265 1.2181954  0.03015501 0.97594343 #> 2       3 3.748571 1.4356803 -0.52140538 0.60208441 #> 3       3 2.177959 0.9361800  0.87807987 0.37990038 #> 4       3 1.785306 0.7491685  1.62138936 0.10493416 #> 5       4 3.355918 1.3328119  0.48325020 0.62891810 #> 6       3 3.355918 1.3328119 -0.26704320 0.78943590 #> 7       0 1.000000       NaN         NaN        NaN #> 8       3 2.177959 0.9361800  0.87807987 0.37990038 #> 9       4 4.141224 1.5291733 -0.09235349 0.92641719 #> 10      2 2.570612 1.0881246 -0.52439971 0.60000056 #> 11      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 12      3 2.177959 0.9361800  0.87807987 0.37990038 #> 13      5 3.355918 1.3328119  1.23354359 0.21737302 #> 14      1 3.355918 1.3328119 -1.76762999 0.07712278 #> 15      1 1.785306 0.7491685 -1.04823694 0.29452945 #> 16      5 3.748571 1.4356803  0.87166242 0.38339257 #> 17      2 1.785306 0.7491685  0.28657621 0.77443683 #> 18      5 3.355918 1.3328119  1.23354359 0.21737302 #> 19      5 3.355918 1.3328119  1.23354359 0.21737302 #> 20      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 21      2 2.177959 0.9361800 -0.19009078 0.84923800 #> 22      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 23      1 3.748571 1.4356803 -1.91447317 0.05555972 #> 24      4 2.963265 1.2181954  0.85104136 0.39474638 #> 25      5 2.963265 1.2181954  1.67192771 0.09453858 #> 26      1 2.963265 1.2181954 -1.61161769 0.10704516 #> 27      2 2.963265 1.2181954 -0.79073134 0.42910078 #> 28      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 29      4 2.570612 1.0881246  1.31362503 0.18897242 #> 30      2 2.963265 1.2181954 -0.79073134 0.42910078 #> 31      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 32      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 33      3 2.570612 1.0881246  0.39461266 0.69312877 #> 34      0 1.000000       NaN         NaN        NaN #> 35      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 36      3 2.570612 1.0881246  0.39461266 0.69312877 #> 37      0 1.000000       NaN         NaN        NaN #> 38      3 2.963265 1.2181954  0.03015501 0.97594343 #> 39      3 3.355918 1.3328119 -0.26704320 0.78943590 #> 40      1 2.963265 1.2181954 -1.61161769 0.10704516 #> 41      5 2.963265 1.2181954  1.67192771 0.09453858 #> 42      5 3.355918 1.3328119  1.23354359 0.21737302 #> 43      4 3.355918 1.3328119  0.48325020 0.62891810 #> 44      4 2.963265 1.2181954  0.85104136 0.39474638 #> 45      5 3.748571 1.4356803  0.87166242 0.38339257 #> 46      3 2.570612 1.0881246  0.39461266 0.69312877 #> 47      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 48      8 4.141224 1.5291733  2.52343903 0.01162132 #> 49      5 2.963265 1.2181954  1.67192771 0.09453858 #> 50      1 2.177959 0.9361800 -1.25826142 0.20829723 plot(lsrq, sf = provinces_spain, sig = 0.1)   # Boots Version lsrq <- local.sp.runs.test(formula = formula, data = provinces_spain, listw = listw,                            distr =\"bootstrap\", nsim = 199) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>    SRQ     EP.i     SdP.i zseudo.value pseudo.value #> 1    3 2.904523 1.2333455   0.07741334   0.93829473 #> 2    3 3.748744 1.3696516  -0.54666730   0.58460732 #> 3    3 2.120603 0.9241582   0.95156545   0.34131741 #> 4    3 1.768844 0.7432077   1.65654326   0.09761185 #> 5    4 3.296482 1.2900308   0.54534945   0.58551320 #> 6    3 3.487437 1.2667436  -0.38479546   0.70038896 #> 7    0 0.000000 0.0000000          NaN          NaN #> 8    3 2.266332 0.9125512   0.80397503   0.42141140 #> 9    4 4.160804 1.5256300  -0.10540172   0.91605705 #> 10   2 2.623116 1.1297932  -0.55153065   0.58126996 #> 11   1 2.261307 0.9385462  -1.34389390   0.17898270 #> 12   3 2.211055 1.0128859   0.77890782   0.43603401 #> 13   5 3.467337 1.3362424   1.14699493   0.25138372 #> 14   1 3.457286 1.2897947  -1.90517640   0.05675714 #> 15   1 1.723618 0.7170330  -1.00918379   0.31288650 #> 16   5 3.814070 1.4179951   0.83634255   0.40296222 #> 17   2 1.824121 0.7681942   0.22895174   0.81890643 #> 18   5 3.195980 1.2700051   1.42048252   0.15546725 #> 19   5 3.552764 1.4688620   0.98527719   0.32448793 #> 20   1 2.221106 0.9163811  -1.33253024   0.18268601 #> 21   2 2.100503 0.8989049  -0.11180550   0.91097763 #> 22   1 2.567839 1.0797357  -1.45205833   0.14648539 #> 23   1 3.839196 1.5189947  -1.86912834   0.06160496 #> 24   4 3.005025 1.1827783   0.84121840   0.40022559 #> 25   5 2.919598 1.2364693   1.68253426   0.09246529 #> 26   1 2.869347 1.1472475  -1.62941887   0.10322438 #> 27   2 3.030151 1.2427956  -0.82889798   0.40716214 #> 28   1 2.633166 1.1464066  -1.42459567   0.15427411 #> 29   4 2.452261 1.0132867   1.52744402   0.12665064 #> 30   2 3.035176 1.2406291  -0.83439597   0.40405789 #> 31   1 2.603015 1.0580098  -1.51512304   0.12974125 #> 32   1 2.110553 0.9308621  -1.19303683   0.23285495 #> 33   3 2.547739 1.0232067   0.44200386   0.65848641 #> 34   0 0.000000 0.0000000          NaN          NaN #> 35   1 2.125628 0.8985378  -1.25273320   0.21030282 #> 36   3 2.587940 1.1595259   0.35536964   0.72231269 #> 37   0 0.000000 0.0000000          NaN          NaN #> 38   3 2.864322 1.2499226   0.10854944   0.91355987 #> 39   3 3.417085 1.4431691  -0.28900663   0.77257630 #> 40   1 2.974874 1.1825208  -1.67005468   0.09490855 #> 41   5 2.934673 1.1852433   1.74253384   0.08141508 #> 42   5 3.351759 1.3768961   1.19707015   0.23127922 #> 43   4 3.452261 1.3013134   0.42091220   0.67381919 #> 44   4 2.974874 1.1739478   0.87322932   0.38253809 #> 45   5 3.944724 1.4536474   0.72595073   0.46786897 #> 46   3 2.648241 1.1750282   0.29936199   0.76466386 #> 47   1 2.497487 1.0292410  -1.45494340   0.14568493 #> 48   8 4.130653 1.5995628   2.41900273   0.01556312 #> 49   5 2.984925 1.2491508   1.61315625   0.10671056 #> 50   1 2.251256 0.9832876  -1.27252322   0.20318728 plot(lsrq, sf = provinces_spain, sig = 0.10)   # Case 5: SRQ test based on a distance matrix (inverse distance) # \\donttest{ library(lwgeom) N <- 100 cx <- runif(N) cy <- runif(N) coor <- as.data.frame(cbind(cx,cy)) coor <- sf::st_as_sf(coor,coords = c(\"cx\",\"cy\")) n = dim(coor)[1] dis <- 1/matrix(as.numeric(sf::st_distance(coor,coor)), ncol = n, nrow = n) diag(dis) <- 0 dis <- (dis < quantile(dis,.10))*dis p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = dis, rho = rho) lsrq <- local.sp.runs.test(fx = fx, listw = dis) print(lsrq) #>     runs.i       E.i     Std.i     z.value    p.value #> 1        4  2.855152 0.8722689  1.31249497 0.18935318 #> 2        3  4.091919 1.1317511 -0.96480505 0.33464246 #> 3        2  3.473535 1.0106752 -1.45797128 0.14484846 #> 4        3  3.473535 1.0106752 -0.46853368 0.63940299 #> 5       12 14.604444 2.3462098 -1.11006458 0.26697120 #> 6       14 14.604444 2.3462098 -0.25762591 0.79669563 #> 7       22 22.643434 2.9150932 -0.22072514 0.82530646 #> 8        1  2.236768 0.7064182 -1.75075861 0.07998750 #> 9        2  3.473535 1.0106752 -1.45797128 0.14484846 #> 10       0  1.000000       NaN         NaN        NaN #> 11      23 22.025051 2.8765991  0.33892436 0.73466671 #> 12       0  1.000000       NaN         NaN        NaN #> 13      10 10.275758 1.9514092 -0.14131202 0.88762345 #> 14       0  1.000000       NaN         NaN        NaN #> 15       0  1.000000       NaN         NaN        NaN #> 16       0  1.000000       NaN         NaN        NaN #> 17       5  5.328687 1.3401523 -0.24526083 0.80625447 #> 18       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 19      15 17.696364 2.5846046 -1.04324030 0.29683701 #> 20       4  2.855152 0.8722689  1.31249497 0.18935318 #> 21       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 22       3  2.236768 0.7064182  1.08042568 0.27995266 #> 23      23 23.261818 2.9528798 -0.08866537 0.92934785 #> 24       7  7.183838 1.5998803 -0.11490759 0.90851837 #> 25      10 10.275758 1.9514092 -0.14131202 0.88762345 #> 26       0  1.000000       NaN         NaN        NaN #> 27       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 28       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 29       0  1.000000       NaN         NaN        NaN #> 30      23 24.498586 3.0264361 -0.49516520 0.62048351 #> 31       2  2.236768 0.7064182 -0.33516646 0.73749952 #> 32       4  4.091919 1.1317511 -0.08121856 0.93526814 #> 33       1  2.855152 0.8722689 -2.12681160 0.03343574 #> 34       7  9.038990 1.8199699 -1.12034263 0.26256778 #> 35       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 36       5  7.183838 1.5998803 -1.36500113 0.17225270 #> 37       7  8.420606 1.7500327 -0.81175974 0.41692951 #> 38       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 39       0  1.000000       NaN         NaN        NaN #> 40       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 41       2  1.618384 0.4857831  0.78556896 0.43212006 #> 42      10  9.038990 1.8199699  0.52803625 0.59747417 #> 43       4  6.565455 1.5186493 -1.68930020 0.09116192 #> 44       6  9.038990 1.8199699 -1.66980226 0.09495849 #> 45       3  2.236768 0.7064182  1.08042568 0.27995266 #> 46       4  2.855152 0.8722689  1.31249497 0.18935318 #> 47       7  6.565455 1.5186493  0.28613944 0.77477133 #> 48       4  7.183838 1.5998803 -1.99004790 0.04658566 #> 49       8 10.275758 1.9514092 -1.16621238 0.24352859 #> 50       7  7.802222 1.6768193 -0.47841899 0.63235202 #> 51       1  3.473535 1.0106752 -2.44740888 0.01438875 #> 52       5  6.565455 1.5186493 -1.03082032 0.30262509 #> 53       4  4.710303 1.2405813 -0.57255663 0.56694493 #> 54       7  9.657374 1.8869954 -1.40825659 0.15905510 #> 55      10  7.802222 1.6768193  1.31068250 0.18996505 #> 56       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 57       3  4.091919 1.1317511 -0.96480505 0.33464246 #> 58       0  1.000000       NaN         NaN        NaN #> 59       0  1.000000       NaN         NaN        NaN #> 60       3  5.328687 1.3401523 -1.73762855 0.08227629 #> 61       9  8.420606 1.7500327  0.33107607 0.74058703 #> 62       5  7.802222 1.6768193 -1.67115332 0.09469140 #> 63       0  1.000000       NaN         NaN        NaN #> 64       7 11.512525 2.0733657 -2.17642519 0.02952348 #> 65       9 10.894141 2.0134619 -0.94073862 0.34683882 #> 66       7 10.275758 1.9514092 -1.67866257 0.09321783 #> 67       0  1.000000       NaN         NaN        NaN #> 68       6  5.328687 1.3401523  0.50092302 0.61642530 #> 69       0  1.000000       NaN         NaN        NaN #> 70       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 71       8  9.657374 1.8869954 -0.87831360 0.37977356 #> 72       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 73       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 74       3  2.855152 0.8722689  0.16605945 0.86811017 #> 75      13 16.459596 2.4927161 -1.38788204 0.16517297 #> 76       5  6.565455 1.5186493 -1.03082032 0.30262509 #> 77       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 78      23 20.788283 2.7973712  0.79064130 0.42915334 #> 79       3  5.947071 1.4323964 -2.05744075 0.03964385 #> 80       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 81       6  7.802222 1.6768193 -1.07478616 0.28247048 #> 82      15 12.749293 2.1874260  1.02892948 0.30351281 #> 83       0  1.000000       NaN         NaN        NaN #> 84       4  4.091919 1.1317511 -0.08121856 0.93526814 #> 85      19 17.696364 2.5846046  0.50438523 0.61399070 #> 86       8  7.183838 1.5998803  0.51013918 0.60995396 #> 87       4  4.091919 1.1317511 -0.08121856 0.93526814 #> 88       0  1.000000       NaN         NaN        NaN #> 89       0  1.000000       NaN         NaN        NaN #> 90       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 91       2  1.618384 0.4857831  0.78556896 0.43212006 #> 92      11 11.512525 2.0733657 -0.24719482 0.80475745 #> 93      15 17.696364 2.5846046 -1.04324030 0.29683701 #> 94       6  6.565455 1.5186493 -0.37234044 0.70963939 #> 95       5  6.565455 1.5186493 -1.03082032 0.30262509 #> 96       3  2.855152 0.8722689  0.16605945 0.86811017 #> 97      13 15.841212 2.4451048 -1.16200012 0.24523542 #> 98      23 21.406667 2.8373687  0.56155314 0.57442051 #> 99       4  5.947071 1.4323964 -1.35930998 0.17404838 #> 100      0  1.000000       NaN         NaN        NaN plot(lsrq, coor = cbind(cx,cy), sig = 0.05)  lsrq <- local.sp.runs.test(fx = fx, listw = dis, data = ) print(lsrq) #>     runs.i       E.i     Std.i     z.value    p.value #> 1        4  2.855152 0.8722689  1.31249497 0.18935318 #> 2        3  4.091919 1.1317511 -0.96480505 0.33464246 #> 3        2  3.473535 1.0106752 -1.45797128 0.14484846 #> 4        3  3.473535 1.0106752 -0.46853368 0.63940299 #> 5       12 14.604444 2.3462098 -1.11006458 0.26697120 #> 6       14 14.604444 2.3462098 -0.25762591 0.79669563 #> 7       22 22.643434 2.9150932 -0.22072514 0.82530646 #> 8        1  2.236768 0.7064182 -1.75075861 0.07998750 #> 9        2  3.473535 1.0106752 -1.45797128 0.14484846 #> 10       0  1.000000       NaN         NaN        NaN #> 11      23 22.025051 2.8765991  0.33892436 0.73466671 #> 12       0  1.000000       NaN         NaN        NaN #> 13      10 10.275758 1.9514092 -0.14131202 0.88762345 #> 14       0  1.000000       NaN         NaN        NaN #> 15       0  1.000000       NaN         NaN        NaN #> 16       0  1.000000       NaN         NaN        NaN #> 17       5  5.328687 1.3401523 -0.24526083 0.80625447 #> 18       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 19      15 17.696364 2.5846046 -1.04324030 0.29683701 #> 20       4  2.855152 0.8722689  1.31249497 0.18935318 #> 21       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 22       3  2.236768 0.7064182  1.08042568 0.27995266 #> 23      23 23.261818 2.9528798 -0.08866537 0.92934785 #> 24       7  7.183838 1.5998803 -0.11490759 0.90851837 #> 25      10 10.275758 1.9514092 -0.14131202 0.88762345 #> 26       0  1.000000       NaN         NaN        NaN #> 27       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 28       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 29       0  1.000000       NaN         NaN        NaN #> 30      23 24.498586 3.0264361 -0.49516520 0.62048351 #> 31       2  2.236768 0.7064182 -0.33516646 0.73749952 #> 32       4  4.091919 1.1317511 -0.08121856 0.93526814 #> 33       1  2.855152 0.8722689 -2.12681160 0.03343574 #> 34       7  9.038990 1.8199699 -1.12034263 0.26256778 #> 35       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 36       5  7.183838 1.5998803 -1.36500113 0.17225270 #> 37       7  8.420606 1.7500327 -0.81175974 0.41692951 #> 38       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 39       0  1.000000       NaN         NaN        NaN #> 40       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 41       2  1.618384 0.4857831  0.78556896 0.43212006 #> 42      10  9.038990 1.8199699  0.52803625 0.59747417 #> 43       4  6.565455 1.5186493 -1.68930020 0.09116192 #> 44       6  9.038990 1.8199699 -1.66980226 0.09495849 #> 45       3  2.236768 0.7064182  1.08042568 0.27995266 #> 46       4  2.855152 0.8722689  1.31249497 0.18935318 #> 47       7  6.565455 1.5186493  0.28613944 0.77477133 #> 48       4  7.183838 1.5998803 -1.99004790 0.04658566 #> 49       8 10.275758 1.9514092 -1.16621238 0.24352859 #> 50       7  7.802222 1.6768193 -0.47841899 0.63235202 #> 51       1  3.473535 1.0106752 -2.44740888 0.01438875 #> 52       5  6.565455 1.5186493 -1.03082032 0.30262509 #> 53       4  4.710303 1.2405813 -0.57255663 0.56694493 #> 54       7  9.657374 1.8869954 -1.40825659 0.15905510 #> 55      10  7.802222 1.6768193  1.31068250 0.18996505 #> 56       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 57       3  4.091919 1.1317511 -0.96480505 0.33464246 #> 58       0  1.000000       NaN         NaN        NaN #> 59       0  1.000000       NaN         NaN        NaN #> 60       3  5.328687 1.3401523 -1.73762855 0.08227629 #> 61       9  8.420606 1.7500327  0.33107607 0.74058703 #> 62       5  7.802222 1.6768193 -1.67115332 0.09469140 #> 63       0  1.000000       NaN         NaN        NaN #> 64       7 11.512525 2.0733657 -2.17642519 0.02952348 #> 65       9 10.894141 2.0134619 -0.94073862 0.34683882 #> 66       7 10.275758 1.9514092 -1.67866257 0.09321783 #> 67       0  1.000000       NaN         NaN        NaN #> 68       6  5.328687 1.3401523  0.50092302 0.61642530 #> 69       0  1.000000       NaN         NaN        NaN #> 70       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 71       8  9.657374 1.8869954 -0.87831360 0.37977356 #> 72       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 73       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 74       3  2.855152 0.8722689  0.16605945 0.86811017 #> 75      13 16.459596 2.4927161 -1.38788204 0.16517297 #> 76       5  6.565455 1.5186493 -1.03082032 0.30262509 #> 77       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 78      23 20.788283 2.7973712  0.79064130 0.42915334 #> 79       3  5.947071 1.4323964 -2.05744075 0.03964385 #> 80       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 81       6  7.802222 1.6768193 -1.07478616 0.28247048 #> 82      15 12.749293 2.1874260  1.02892948 0.30351281 #> 83       0  1.000000       NaN         NaN        NaN #> 84       4  4.091919 1.1317511 -0.08121856 0.93526814 #> 85      19 17.696364 2.5846046  0.50438523 0.61399070 #> 86       8  7.183838 1.5998803  0.51013918 0.60995396 #> 87       4  4.091919 1.1317511 -0.08121856 0.93526814 #> 88       0  1.000000       NaN         NaN        NaN #> 89       0  1.000000       NaN         NaN        NaN #> 90       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 91       2  1.618384 0.4857831  0.78556896 0.43212006 #> 92      11 11.512525 2.0733657 -0.24719482 0.80475745 #> 93      15 17.696364 2.5846046 -1.04324030 0.29683701 #> 94       6  6.565455 1.5186493 -0.37234044 0.70963939 #> 95       5  6.565455 1.5186493 -1.03082032 0.30262509 #> 96       3  2.855152 0.8722689  0.16605945 0.86811017 #> 97      13 15.841212 2.4451048 -1.16200012 0.24523542 #> 98      23 21.406667 2.8373687  0.56155314 0.57442051 #> 99       4  5.947071 1.4323964 -1.35930998 0.17404838 #> 100      0  1.000000       NaN         NaN        NaN plot(lsrq, sf = coor)  # Version boots lsrq <- local.sp.runs.test(fx = fx, listw = dis, data = coor,                            distr =\"bootstrap\", nsim = 299) print(lsrq) #>     SRQ      EP.i     SdP.i zseudo.value pseudo.value #> 1     4  2.829431 0.8519638   1.37396516   0.16945250 #> 2     3  4.113712 1.1084389  -1.00475755   0.31501361 #> 3     2  3.488294 1.0111941  -1.47181862   0.14106986 #> 4     3  3.461538 0.9801857  -0.47086837   0.63773473 #> 5    12 14.585284 2.4375249  -1.06061861   0.28886326 #> 6    14 14.678930 2.4269027  -0.27975154   0.77966813 #> 7    22 22.608696 2.7885296  -0.21828553   0.82720665 #> 8     1  2.217391 0.7162298  -1.69972167   0.08918329 #> 9     2  3.428094 0.9714101  -1.47012432   0.14152809 #> 10    0  0.000000 0.0000000          NaN          NaN #> 11   23 21.876254 2.6762825   0.41989059   0.67456539 #> 12    0  0.000000 0.0000000          NaN          NaN #> 13   10 10.287625 2.0077569  -0.14325709   0.88608714 #> 14    0  0.000000 0.0000000          NaN          NaN #> 15    0  0.000000 0.0000000          NaN          NaN #> 16    0  0.000000 0.0000000          NaN          NaN #> 17    5  5.324415 1.2632277  -0.25681413   0.79732226 #> 18    3  3.431438 0.9921580  -0.43484822   0.66367260 #> 19   15 17.745819 2.5241666  -1.08781227   0.27667799 #> 20    4  2.879599 0.8307544   1.34865533   0.17744770 #> 21    3  3.441472 0.9860193  -0.44773116   0.65434723 #> 22    3  2.280936 0.6864003   1.04758623   0.29482929 #> 23   23 23.421405 3.0060917  -0.14018358   0.88851495 #> 24    7  7.270903 1.6292800  -0.16627161   0.86794320 #> 25   10 10.294314 1.9662422  -0.14968368   0.88101418 #> 26    0  0.000000 0.0000000          NaN          NaN #> 27    3  3.384615 0.9706589  -0.39624156   0.69192683 #> 28    1  2.290970 0.6895325  -1.87223932   0.06117350 #> 29    0  0.000000 0.0000000          NaN          NaN #> 30   23 24.698997 2.8795214  -0.59002745   0.55517224 #> 31    2  2.163880 0.7117657  -0.23024374   0.81790237 #> 32    4  4.133779 1.1122395  -0.12027919   0.90426199 #> 33    1  2.862876 0.8461875  -2.20149343   0.02770111 #> 34    7  8.973244 1.8132491  -1.08823666   0.27649065 #> 35    2  3.464883 1.0368727  -1.41278962   0.15771759 #> 36    5  7.297659 1.5869734  -1.44782447   0.14766615 #> 37    7  8.578595 1.6125587  -0.97893818   0.32761052 #> 38    2  2.872910 0.9033320  -0.96632218   0.33388299 #> 39    0  0.000000 0.0000000          NaN          NaN #> 40    3  3.418060 0.9461020  -0.44187646   0.65857860 #> 41    2  1.658863 0.4748861   0.71835565   0.47253803 #> 42   10  9.080268 1.8789487   0.48949311   0.62449263 #> 43    4  6.511706 1.5486615  -1.62185583   0.10483422 #> 44    6  9.073579 1.8648832  -1.64813460   0.09932505 #> 45    3  2.244147 0.6931526   1.09045654   0.27551209 #> 46    4  2.822742 0.8584467   1.37138106   0.17025620 #> 47    7  6.468227 1.5199437   0.34986335   0.72644126 #> 48    4  7.217391 1.6475216  -1.95286746   0.05083530 #> 49    8 10.224080 1.9797521  -1.12341354   0.26126190 #> 50    7  7.822742 1.6865092  -0.48783753   0.62566493 #> 51    1  3.394649 0.9718029  -2.46413025   0.01373462 #> 52    5  6.655518 1.5011387  -1.10284172   0.27009591 #> 53    4  4.652174 1.2820732  -0.50868695   0.61097167 #> 54    7  9.742475 1.7846950  -1.53666311   0.12437583 #> 55   10  7.812709 1.6884047   1.29547790   0.19515542 #> 56    1  2.257525 0.6784570  -1.85350738   0.06380967 #> 57    3  4.086957 1.1048082  -0.98384185   0.32519328 #> 58    0  0.000000 0.0000000          NaN          NaN #> 59    0  0.000000 0.0000000          NaN          NaN #> 60    3  5.351171 1.3134910  -1.79001646   0.07345127 #> 61    9  8.454849 1.7912356   0.30434327   0.76086639 #> 62    5  7.809365 1.7009016  -1.65169137   0.09859748 #> 63    0  0.000000 0.0000000          NaN          NaN #> 64    7 11.387960 2.0603289  -2.12973756   0.03319329 #> 65    9 10.929766 2.1296289  -0.90615127   0.36485579 #> 66    7 10.113712 2.0774709  -1.49879954   0.13392564 #> 67    0  0.000000 0.0000000          NaN          NaN #> 68    6  5.227425 1.3641320   0.56634934   0.57115633 #> 69    0  0.000000 0.0000000          NaN          NaN #> 70    3  3.478261 0.9738333  -0.49111163   0.62334749 #> 71    8  9.789298 1.9556541  -0.91493564   0.36022542 #> 72    2  3.414716 0.9874638  -1.43267605   0.15195044 #> 73    1  2.264214 0.7002566  -1.80535817   0.07101865 #> 74    3  2.906355 0.8773395   0.10673803   0.91499682 #> 75   13 16.448161 2.6317285  -1.31022654   0.19011921 #> 76    5  6.742475 1.4320991  -1.21672786   0.22370778 #> 77    2  3.471572 0.9385630  -1.56789888   0.11690473 #> 78   23 20.672241 2.6872053   0.86623794   0.38635969 #> 79    3  5.956522 1.3689201  -2.15974749   0.03079222 #> 80    2  2.903010 0.8712163  -1.03649356   0.29997194 #> 81    6  7.966555 1.5583350  -1.26195922   0.20696346 #> 82   15 12.678930 2.2399494   1.03621547   0.30010163 #> 83    0  0.000000 0.0000000          NaN          NaN #> 84    4  4.100334 1.0945104  -0.09167063   0.92695974 #> 85   19 17.695652 2.4749106   0.52702826   0.59817396 #> 86    8  7.076923 1.6149789   0.57157212   0.56761189 #> 87    4  4.123746 1.1058438  -0.11190171   0.91090134 #> 88    0  0.000000 0.0000000          NaN          NaN #> 89    0  0.000000 0.0000000          NaN          NaN #> 90    3  3.418060 0.9945193  -0.42036408   0.67421951 #> 91    2  1.638796 0.4811548   0.75070227   0.45283185 #> 92   11 11.374582 2.0918882  -0.17906404   0.85788742 #> 93   15 17.836120 2.4638118  -1.15111079   0.24968666 #> 94    6  6.578595 1.4480987  -0.39955516   0.68948419 #> 95    5  6.474916 1.5178600  -0.97170781   0.33119593 #> 96    3  2.903010 0.8556706   0.11334966   0.90975335 #> 97   13 15.826087 2.4638027  -1.14704271   0.25136397 #> 98   23 21.628763 2.8484027   0.48140575   0.63022815 #> 99    4  5.866221 1.4385032  -1.29733516   0.19451589 #> 100   0  0.000000 0.0000000          NaN          NaN plot(lsrq, sf = coor)   # SRQ test based on inverse distance library(lwgeom) data(\"FastFood.sf\") sf::sf_use_s2(FALSE) n = dim(FastFood.sf)[1] dis <- 1000000/matrix(as.numeric(           sf::st_distance(FastFood.sf, FastFood.sf)),           ncol = n, nrow = n) #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data diag(dis) <- 0 dis <- (dis < quantile(dis,.01))*dis formula <- ~ Type lsrq <- local.sp.runs.test(formula = formula, data = FastFood.sf, listw = dis) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>     runs.i       E.i      Std.i       z.value     p.value #> 1        8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 2        2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 3        3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 4        8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 5        6  7.001476 1.41369228 -7.084116e-01 0.478689660 #> 6        5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 7        5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 8        5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 9        8 11.669291 1.88488922 -1.946688e+00 0.051572177 #> 10      16 22.338582 2.66558409 -2.377933e+00 0.017409967 #> 11      26 21.004920 2.58094570  1.935368e+00 0.052945152 #> 12       3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 13       1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 14       1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 15       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 16       2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 17       4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 18       7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 19       4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 20      30 25.005904 2.82726846  1.766403e+00 0.077328250 #> 21       2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 22       6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 23       3  5.000984 1.15429461 -1.733512e+00 0.083004632 #> 24       4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 25       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 26       5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 27       2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 28       1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 29       4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 30       2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 31       8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 32       5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 33       9  7.001476 1.41369228  1.413691e+00 0.157452675 #> 34       1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 35      12  9.668799 1.69902630  1.372081e+00 0.170038313 #> 36      27 25.672735 2.86626456  4.630644e-01 0.643318223 #> 37       5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 38       1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 39       4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 40       4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 41       2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 42       2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 43       8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 44       6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 45       8  8.335137 1.56288494 -2.144351e-01 0.830207752 #> 46       8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 47       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 48       4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 49       2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 50       7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 51       2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 52       5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 53      11  9.668799 1.69902630  7.835083e-01 0.433328678 #> 54       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 55      13 13.002952 1.99922042 -1.476654e-03 0.998821801 #> 56       0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 57       2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 58       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 59       4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 60       3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 61       3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 62       2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 63       2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 64       5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 65       1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 66       4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 67       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 68       3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 69       9  7.001476 1.41369228  1.413691e+00 0.157452675 #> 70       8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 71       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 72       3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 73       2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 74       7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 75       3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 76      18 15.670275 2.21020923  1.054074e+00 0.291848820 #> 77      12 11.669291 1.88488922  1.754529e-01 0.860723812 #> 78      28 29.006888 3.05378310 -3.297184e-01 0.741612777 #> 79      14 17.670767 2.35608263 -1.557996e+00 0.119234240 #> 80       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 81      23 22.338582 2.66558409  2.481326e-01 0.804031790 #> 82      18 19.004428 2.44850757 -4.102206e-01 0.681644134 #> 83       3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 84      22 22.338582 2.66558409 -1.270197e-01 0.898924830 #> 85       6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 86       4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 87       4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 88       8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 89       4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 90       4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 91       1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 92       5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 93       5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 94      24 23.005412 2.70691089  3.674254e-01 0.713301756 #> 95       3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 96       5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 97       3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 98       3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 99      10  9.668799 1.69902630  1.949359e-01 0.845443130 #> 100      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 101      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 102     10  7.668307 1.49015700  1.564730e+00 0.117646250 #> 103      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 104      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 105      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 106      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 107      9  8.335137 1.56288494  4.254072e-01 0.670539828 #> 108     17 16.337106 2.25988030  2.933317e-01 0.769268647 #> 109      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 110      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 111      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 112      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 113      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 114      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 115      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 116      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 117      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 118     14 14.336614 2.10735730 -1.597325e-01 0.873091777 #> 119      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 120      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 121      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 122      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 123      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 124     15 14.336614 2.10735730  3.147955e-01 0.752916966 #> 125      7  5.000984 1.15429461  1.731807e+00 0.083307861 #> 126      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 127      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 128     16 13.669783 2.05400069  1.134477e+00 0.256594389 #> 129      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 130      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 131      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 132      8  9.001968 1.63237562 -6.138098e-01 0.539341040 #> 133      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 134      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 135      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 136      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 137      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 138     25 20.338090 2.53756790  1.837157e+00 0.066186734 #> 139      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 140      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 141      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 142      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 143     14 13.669783 2.05400069  1.607678e-01 0.872276289 #> 144      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 145      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 146      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 147      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 148     13 12.336121 1.94289607  3.416953e-01 0.732580185 #> 149      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 150      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 151      8  9.001968 1.63237562 -6.138098e-01 0.539341040 #> 152      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 153      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 154      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 155     13 13.002952 1.99922042 -1.476654e-03 0.998821801 #> 156     10  9.668799 1.69902630  1.949359e-01 0.845443130 #> 157     13 13.669783 2.05400069 -3.260870e-01 0.744358567 #> 158      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 159      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 160      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 161     28 29.006888 3.05378310 -3.297184e-01 0.741612777 #> 162      8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 163      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 164      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 165      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 166      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 167      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 168      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 169      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 170      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 171     10  8.335137 1.56288494  1.065250e+00 0.286762989 #> 172      4  7.001476 1.41369228 -2.123147e+00 0.033741562 #> 173      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 174      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 175      2  4.334153 1.05373221 -2.215130e+00 0.026751172 #> 176      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 177     14 12.336121 1.94289607  8.563909e-01 0.391781595 #> 178      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 179     23 19.004428 2.44850757  1.631840e+00 0.102713268 #> 180      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 181      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 182     23 25.005904 2.82726846 -7.094849e-01 0.478023611 #> 183      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 184      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 185      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 186      7  7.668307 1.49015700 -4.484808e-01 0.653806265 #> 187     12 13.002952 1.99922042 -5.016716e-01 0.615898528 #> 188     19 21.671751 2.62360628 -1.018351e+00 0.308511387 #> 189      9  7.001476 1.41369228  1.413691e+00 0.157452675 #> 190      6  7.668307 1.49015700 -1.119551e+00 0.262905149 #> 191      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 192      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 193     15 15.670275 2.21020923 -3.032631e-01 0.761689381 #> 194      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 195      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 196     28 24.339074 2.78772681  1.313230e+00 0.189105471 #> 197     14 12.336121 1.94289607  8.563909e-01 0.391781595 #> 198      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 199      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 200      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 201      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 202      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 203      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 204      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 205     11  8.335137 1.56288494  1.705092e+00 0.088177272 #> 206      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 207      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 208      9  7.668307 1.49015700  8.936597e-01 0.371503999 #> 209      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 210      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 211     11  9.001968 1.63237562  1.224003e+00 0.220951271 #> 212      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 213      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 214     12  9.668799 1.69902630  1.372081e+00 0.170038313 #> 215      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 216      1  3.667323 0.94250012 -2.830050e+00 0.004654069 #> 217      7  5.000984 1.15429461  1.731807e+00 0.083307861 #> 218      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 219      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 220     22 21.671751 2.62360628  1.251137e-01 0.900433545 #> 221      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 222     14 13.669783 2.05400069  1.607678e-01 0.872276289 #> 223      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 224     24 18.337598 2.40273961  2.356644e+00 0.018440905 #> 225      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 226      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 227      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 228     26 23.672243 2.74761605  8.471915e-01 0.396888375 #> 229      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 230     22 24.339074 2.78772681 -8.390613e-01 0.401434920 #> 231      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 232      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 233      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 234      4  5.667815 1.24677180 -1.337706e+00 0.180992136 #> 235      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 236      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 237      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 238      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 239      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 240      1  3.000492 0.81624798 -2.450839e+00 0.014252386 #> 241      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 242      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 243      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 244     18 20.338090 2.53756790 -9.213900e-01 0.356846869 #> 245      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 246      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 247      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 248      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 249      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 250     10  9.001968 1.63237562  6.113984e-01 0.540935839 #> 251      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 252      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 253     12 12.336121 1.94289607 -1.730002e-01 0.862651241 #> 254      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 255     19 19.004428 2.44850757 -1.808544e-03 0.998556991 #> 256      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 257      7  8.335137 1.56288494 -8.542775e-01 0.392951254 #> 258      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 259      9  9.001968 1.63237562 -1.205669e-03 0.999038016 #> 260      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 261      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 262      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 263      7  5.000984 1.15429461  1.731807e+00 0.083307861 #> 264      3  7.001476 1.41369228 -2.830514e+00 0.004647325 #> 265      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 266      9  9.668799 1.69902630 -3.936365e-01 0.693849424 #> 267      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 268      8  8.335137 1.56288494 -2.144351e-01 0.830207752 #> 269      9  9.668799 1.69902630 -3.936365e-01 0.693849424 #> 270     16 14.336614 2.10735730  7.893234e-01 0.429922996 #> 271      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 272      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 273      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 274      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 275      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 276      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 277      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 278      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 279      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 280      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 281     21 28.340058 3.01721207 -2.432728e+00 0.014985534 #> 282      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 283      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 284      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 285      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 286     19 20.338090 2.53756790 -5.273118e-01 0.597977057 #> 287      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 288     11 11.002460 1.82503944 -1.347987e-03 0.998924462 #> 289      5  7.001476 1.41369228 -1.415779e+00 0.156840170 #> 290      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 291      6  7.668307 1.49015700 -1.119551e+00 0.262905149 #> 292      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 293      8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 294      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 295      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 296     20 19.671259 2.49343546  1.318426e-01 0.895108767 #> 297     12  9.668799 1.69902630  1.372081e+00 0.170038313 #> 298     29 28.340058 3.01721207  2.187259e-01 0.826863602 #> 299      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 300      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 301      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 302      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 303      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 304      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 305      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 306      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 307      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 308      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 309     19 20.338090 2.53756790 -5.273118e-01 0.597977057 #> 310      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 311      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 312      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 313     18 15.670275 2.21020923  1.054074e+00 0.291848820 #> 314     21 17.670767 2.35608263  1.413038e+00 0.157644698 #> 315      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 316      1  3.000492 0.81624798 -2.450839e+00 0.014252386 #> 317      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 318      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 319      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 320      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 321      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 322      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 323      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 324      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 325      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 326      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 327      7  5.000984 1.15429461  1.731807e+00 0.083307861 #> 328      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 329      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 330      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 331     14 13.002952 1.99922042  4.987183e-01 0.617977839 #> 332      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 333      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 334      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 335      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 336      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 337     26 27.673227 2.98019220 -5.614494e-01 0.574491241 #> 338      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 339      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 340      7  7.668307 1.49015700 -4.484808e-01 0.653806265 #> 341     19 22.338582 2.66558409 -1.252477e+00 0.210396262 #> 342      6  7.001476 1.41369228 -7.084116e-01 0.478689660 #> 343      4  5.667815 1.24677180 -1.337706e+00 0.180992136 #> 344     17 18.337598 2.40273961 -5.566968e-01 0.577734574 #> 345      5  6.334645 1.33284778 -1.001349e+00 0.316658251 #> 346      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 347      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 348      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 349     21 18.337598 2.40273961  1.108069e+00 0.267831809 #> 350      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 351      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 352     17 12.336121 1.94289607  2.400478e+00 0.016373692 #> 353      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 354     21 21.671751 2.62360628 -2.560411e-01 0.797919132 #> 355      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 356      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 357      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 358      6  7.001476 1.41369228 -7.084116e-01 0.478689660 #> 359      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 360      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 361      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 362      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 363      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 364     22 20.338090 2.53756790  6.549225e-01 0.512517627 #> 365      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 366      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 367      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 368      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 369      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 370      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 371     20 22.338582 2.66558409 -8.773243e-01 0.380310534 #> 372      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 373      9 10.335629 1.76315909 -7.575207e-01 0.448737987 #> 374     16 13.002952 1.99922042  1.499108e+00 0.133845550 #> 375      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 376      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 377      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 378     19 20.338090 2.53756790 -5.273118e-01 0.597977057 #> 379      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 380      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 381      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 382     13 12.336121 1.94289607  3.416953e-01 0.732580185 #> 383      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 384      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 385      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 386      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 387      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 388      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 389      6  7.001476 1.41369228 -7.084116e-01 0.478689660 #> 390      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 391      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 392      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 393      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 394      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 395      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 396      9  8.335137 1.56288494  4.254072e-01 0.670539828 #> 397      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 398      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 399      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 400      9  7.001476 1.41369228  1.413691e+00 0.157452675 #> 401      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 402      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 403      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 404      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 405      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 406      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 407      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 408      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 409      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 410      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 411     26 28.340058 3.01721207 -7.755695e-01 0.438003209 #> 412      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 413     13 12.336121 1.94289607  3.416953e-01 0.732580185 #> 414      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 415      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 416     20 19.671259 2.49343546  1.318426e-01 0.895108767 #> 417      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 418      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 419      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 420      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 421      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 422      9 11.669291 1.88488922 -1.416153e+00 0.156730824 #> 423      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 424      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 425      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 426      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 427     30 27.673227 2.98019220  7.807459e-01 0.434951931 #> 428      1  4.334153 1.05373221 -3.164137e+00 0.001555434 #> 429      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 430      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 431      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 432      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 433      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 434     10  8.335137 1.56288494  1.065250e+00 0.286762989 #> 435      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 436      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 437      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 438     11  9.001968 1.63237562  1.224003e+00 0.220951271 #> 439      4  6.334645 1.33284778 -1.751622e+00 0.079838838 #> 440      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 441      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 442      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 443     19 18.337598 2.40273961  2.756863e-01 0.782789004 #> 444      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 445      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 446      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 447      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 448      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 449      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 450      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 451      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 452     10 13.669783 2.05400069 -1.786651e+00 0.073993879 #> 453      6  7.001476 1.41369228 -7.084116e-01 0.478689660 #> 454      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 455      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 456     26 21.671751 2.62360628  1.649733e+00 0.098997620 #> 457      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 458     11 10.335629 1.76315909  3.768069e-01 0.706317098 #> 459      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 460      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 461      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 462      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 463      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 464      9 10.335629 1.76315909 -7.575207e-01 0.448737987 #> 465     27 23.005412 2.70691089  1.475700e+00 0.140024514 #> 466      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 467      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 468      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 469     10  9.668799 1.69902630  1.949359e-01 0.845443130 #> 470      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 471      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 472     10  9.001968 1.63237562  6.113984e-01 0.540935839 #> 473      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 474      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 475      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 476      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 477      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 478      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 479      6  8.335137 1.56288494 -1.494120e+00 0.135144294 #> 480      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 481      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 482      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 483      7  7.668307 1.49015700 -4.484808e-01 0.653806265 #> 484      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 485      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 486     12 11.002460 1.82503944  5.465854e-01 0.584663619 #> 487      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 488      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 489      7  5.000984 1.15429461  1.731807e+00 0.083307861 #> 490      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 491      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 492     30 29.673719 3.08992122  1.055952e-01 0.915903505 #> 493      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 494      7  8.335137 1.56288494 -8.542775e-01 0.392951254 #> 495      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 496      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 497      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 498      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 499      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 500      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 501     19 17.003936 2.30848272  8.646648e-01 0.387222785 #> 502      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 503      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 504      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 505      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 506      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 507      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 508      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 509      5  6.334645 1.33284778 -1.001349e+00 0.316658251 #> 510      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 511      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 512      8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 513      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 514      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 515      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 516      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 517     25 28.340058 3.01721207 -1.107001e+00 0.268293366 #> 518      8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 519      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 520      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 521      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 522      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 523      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 524      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 525      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 526      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 527      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 528      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 529      5  6.334645 1.33284778 -1.001349e+00 0.316658251 #> 530      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 531     19 20.338090 2.53756790 -5.273118e-01 0.597977057 #> 532     10  8.335137 1.56288494  1.065250e+00 0.286762989 #> 533      8  9.001968 1.63237562 -6.138098e-01 0.539341040 #> 534      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 535      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 536      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 537      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 538     19 21.671751 2.62360628 -1.018351e+00 0.308511387 #> 539      7  7.668307 1.49015700 -4.484808e-01 0.653806265 #> 540      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 541      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 542      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 543      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 544      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 545      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 546      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 547      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 548      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 549      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 550      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 551      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 552      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 553      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 554      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 555      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 556      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 557      5  6.334645 1.33284778 -1.001349e+00 0.316658251 #> 558      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 559      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 560     27 24.339074 2.78772681  9.545148e-01 0.339823146 #> 561      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 562      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 563      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 564     25 23.005412 2.70691089  7.368502e-01 0.461213477 #> 565     10  8.335137 1.56288494  1.065250e+00 0.286762989 #> 566      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 567      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 568     20 19.671259 2.49343546  1.318426e-01 0.895108767 #> 569      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 570      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 571      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 572      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 573     16 16.337106 2.25988030 -1.491696e-01 0.881419775 #> 574      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 575      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 576      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 577      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 578      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 579      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 580      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 581      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 582      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 583      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 584      9  7.668307 1.49015700  8.936597e-01 0.371503999 #> 585     17 16.337106 2.25988030  2.933317e-01 0.769268647 #> 586      8  9.001968 1.63237562 -6.138098e-01 0.539341040 #> 587      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 588      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 589      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 590      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 591      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 592      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 593      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 594      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 595      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 596      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 597      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 598     21 22.338582 2.66558409 -5.021720e-01 0.615546559 #> 599      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 600      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 601      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 602      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 603      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 604     20 19.671259 2.49343546  1.318426e-01 0.895108767 #> 605     18 20.338090 2.53756790 -9.213900e-01 0.356846869 #> 606      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 607      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 608      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 609      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 610      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 611      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 612      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 613      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 614      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 615      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 616      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 617      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 618      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 619      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 620      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 621      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 622      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 623     17 15.670275 2.21020923  6.016286e-01 0.547421370 #> 624      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 625      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 626      9  9.001968 1.63237562 -1.205669e-03 0.999038016 #> 627      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 628     17 19.004428 2.44850757 -8.186326e-01 0.412996035 #> 629      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 630      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 631      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 632      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 633     14 13.002952 1.99922042  4.987183e-01 0.617977839 #> 634      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 635      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 636     15 19.671259 2.49343546 -1.873423e+00 0.061010020 #> 637      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 638      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 639      7  7.001476 1.41369228 -1.044130e-03 0.999166905 #> 640     22 20.338090 2.53756790  6.549225e-01 0.512517627 #> 641      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 642      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 643      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 644      5  6.334645 1.33284778 -1.001349e+00 0.316658251 #> 645      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 646      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 647      8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 648      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 649      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 650     11  9.001968 1.63237562  1.224003e+00 0.220951271 #> 651     10 12.336121 1.94289607 -1.202391e+00 0.229211928 #> 652      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 653      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 654      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 655      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 656      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 657      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 658      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 659      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 660      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 661     27 23.005412 2.70691089  1.475700e+00 0.140024514 #> 662      6  9.001968 1.63237562 -1.839018e+00 0.065912542 #> 663      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 664      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 665      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 666      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 667      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 668      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 669      3  5.000984 1.15429461 -1.733512e+00 0.083004632 #> 670     10 11.002460 1.82503944 -5.492814e-01 0.582812384 #> 671      9  6.334645 1.33284778  1.999744e+00 0.045527894 #> 672      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 673      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 674      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 675      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 676      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 677      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 678     12 11.002460 1.82503944  5.465854e-01 0.584663619 #> 679      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 680      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 681      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 682      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 683      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 684      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 685      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 686      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 687      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 688      9  9.001968 1.63237562 -1.205669e-03 0.999038016 #> 689      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 690      6  8.335137 1.56288494 -1.494120e+00 0.135144294 #> 691      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 692      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 693      2  5.000984 1.15429461 -2.599842e+00 0.009326659 #> 694      4  5.667815 1.24677180 -1.337706e+00 0.180992136 #> 695      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 696     13 11.669291 1.88488922  7.059880e-01 0.480195591 #> 697      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 698      9  7.668307 1.49015700  8.936597e-01 0.371503999 #> 699      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 700      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 701      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 702     19 15.670275 2.21020923  1.506520e+00 0.131933652 #> 703      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 704      9  8.335137 1.56288494  4.254072e-01 0.670539828 #> 705      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 706      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 707     17 16.337106 2.25988030  2.933317e-01 0.769268647 #> 708      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 709      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 710     10  9.668799 1.69902630  1.949359e-01 0.845443130 #> 711      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 712      5  7.001476 1.41369228 -1.415779e+00 0.156840170 #> 713      1  3.000492 0.81624798 -2.450839e+00 0.014252386 #> 714      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 715      2  4.334153 1.05373221 -2.215130e+00 0.026751172 #> 716      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 717      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 718      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 719      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 720      8  9.001968 1.63237562 -6.138098e-01 0.539341040 #> 721      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 722      3  5.000984 1.15429461 -1.733512e+00 0.083004632 #> 723     13 13.669783 2.05400069 -3.260870e-01 0.744358567 #> 724      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 725     10  7.668307 1.49015700  1.564730e+00 0.117646250 #> 726      9  7.001476 1.41369228  1.413691e+00 0.157452675 #> 727      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 728      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 729      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 730      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 731      4  5.667815 1.24677180 -1.337706e+00 0.180992136 #> 732      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 733     15 17.670767 2.35608263 -1.133562e+00 0.256978117 #> 734      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 735      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 736      8  8.335137 1.56288494 -2.144351e-01 0.830207752 #> 737     22 21.004920 2.58094570  3.855485e-01 0.699831081 #> 738      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 739     10  7.668307 1.49015700  1.564730e+00 0.117646250 #> 740      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 741      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 742      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 743      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 744     16 14.336614 2.10735730  7.893234e-01 0.429922996 #> 745      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 746      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 747      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 748      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 749      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 750      4  6.334645 1.33284778 -1.751622e+00 0.079838838 #> 751     10 10.335629 1.76315909 -1.903569e-01 0.849029488 #> 752      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 753      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 754     25 21.671751 2.62360628  1.268578e+00 0.204591635 #> 755      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 756      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 757      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 758      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 759      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 760      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 761     10  9.668799 1.69902630  1.949359e-01 0.845443130 #> 762      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 763      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 764      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 765      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 766      4  4.334153 1.05373221 -3.171141e-01 0.751157001 #> 767      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 768      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 769      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 770      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 771      2  3.667323 0.94250012 -1.769042e+00 0.076886794 #> 772      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 773      7  7.668307 1.49015700 -4.484808e-01 0.653806265 #> 774     13 11.669291 1.88488922  7.059880e-01 0.480195591 #> 775     20 20.338090 2.53756790 -1.332337e-01 0.894008552 #> 776     27 29.006888 3.05378310 -6.571810e-01 0.511064513 #> 777      1  3.667323 0.94250012 -2.830050e+00 0.004654069 #> 778      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 779      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 780     18 12.336121 1.94289607  2.915173e+00 0.003554912 #> 781      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 782      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 783      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 784      4  5.667815 1.24677180 -1.337706e+00 0.180992136 #> 785      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 786     11 10.335629 1.76315909  3.768069e-01 0.706317098 #> 787      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 788      4  5.667815 1.24677180 -1.337706e+00 0.180992136 #> 789     10  9.668799 1.69902630  1.949359e-01 0.845443130 #> 790      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 791      6  6.334645 1.33284778 -2.510755e-01 0.801755749 #> 792      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 793      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 794      7  8.335137 1.56288494 -8.542775e-01 0.392951254 #> 795      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 796     11  9.668799 1.69902630  7.835083e-01 0.433328678 #> 797      8  7.668307 1.49015700  2.225895e-01 0.823855039 #> 798      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 799     19 18.337598 2.40273961  2.756863e-01 0.782789004 #> 800      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 801      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 802      5  5.667815 1.24677180 -5.356351e-01 0.592210772 #> 803      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 804      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 805      5  3.667323 0.94250012  1.413981e+00 0.157367469 #> 806      5  6.334645 1.33284778 -1.001349e+00 0.316658251 #> 807     11  7.668307 1.49015700  2.235800e+00 0.025364865 #> 808      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 809      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 810      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 811     13 13.669783 2.05400069 -3.260870e-01 0.744358567 #> 812      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 813     30 29.006888 3.05378310  3.252070e-01 0.745024412 #> 814      0  1.000000 0.01095397 -9.129110e+01 0.000000000 #> 815      6  9.001968 1.63237562 -1.839018e+00 0.065912542 #> 816      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 817      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 818      9  9.001968 1.63237562 -1.205669e-03 0.999038016 #> 819      1  1.666831 0.47134650 -1.414736e+00 0.157146034 #> 820      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 821      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 822      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 823      7  5.667815 1.24677180  1.068508e+00 0.285291559 #> 824      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 825      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 826      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 827     13 11.669291 1.88488922  7.059880e-01 0.480195591 #> 828      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 829      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 830      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 831      4  3.667323 0.94250012  3.529732e-01 0.724108520 #> 832      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 833      5  4.334153 1.05373221  6.318936e-01 0.527456416 #> 834      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 835     19 16.337106 2.25988030  1.178334e+00 0.238663359 #> 836      6  4.334153 1.05373221  1.580901e+00 0.113900606 #> 837      7  8.335137 1.56288494 -8.542775e-01 0.392951254 #> 838      8  6.334645 1.33284778  1.249471e+00 0.211492867 #> 839      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 840     27 29.673719 3.08992122 -8.653033e-01 0.386872338 #> 841      8  5.667815 1.24677180  1.870579e+00 0.061403444 #> 842      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 843      2  4.334153 1.05373221 -2.215130e+00 0.026751172 #> 844      6  5.000984 1.15429461  8.654774e-01 0.386776793 #> 845      6  5.667815 1.24677180  2.664363e-01 0.789903208 #> 846      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 847     18 16.337106 2.25988030  7.358330e-01 0.461832345 #> 848     10  7.668307 1.49015700  1.564730e+00 0.117646250 #> 849      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 850      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 851     21 20.338090 2.53756790  2.608444e-01 0.794212491 #> 852      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 853      1  3.000492 0.81624798 -2.450839e+00 0.014252386 #> 854      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 855      8  7.001476 1.41369228  7.063234e-01 0.479987051 #> 856      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 857      7  6.334645 1.33284778  4.991977e-01 0.617640087 #> 858     27 23.005412 2.70691089  1.475700e+00 0.140024514 #> 859      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 860      3  2.333661 0.66649415  9.997667e-01 0.317423430 #> 861      9  8.335137 1.56288494  4.254072e-01 0.670539828 #> 862      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 863      2  2.333661 0.66649415 -5.006216e-01 0.616637476 #> 864      2  1.666831 0.47134650  7.068459e-01 0.479662271 #> 865      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 866      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 867      1  2.333661 0.66649415 -2.001010e+00 0.045391330 #> 868      5  5.000984 1.15429461 -8.525138e-04 0.999319792 #> 869      2  3.000492 0.81624798 -1.225721e+00 0.220303808 #> 870      3  3.667323 0.94250012 -7.080346e-01 0.478923767 #> 871      4  5.000984 1.15429461 -8.671825e-01 0.385842041 #> 872      4  3.000492 0.81624798  1.224515e+00 0.220757976 #> 873      3  4.334153 1.05373221 -1.266122e+00 0.205469460 #> 874     23 21.004920 2.58094570  7.730034e-01 0.439520382 #> 875      5  7.001476 1.41369228 -1.415779e+00 0.156840170 #> 876      3  3.000492 0.81624798 -6.027899e-04 0.999519043 #> 877      7  7.668307 1.49015700 -4.484808e-01 0.653806265 plot(lsrq, sf = FastFood.sf) #> Warning: bounding box has potentially an invalid value range for longlat data  # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate m-surroundings — m.surround","title":"A function to generate m-surroundings — m.surround","text":"function obtains m-surroundings   selecting *m-1* nearest neighbors   observation, allowing degree   overlap *r*.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate m-surroundings — m.surround","text":"","code":"m.surround(x, m, r = 1, distance = \"Euclidean\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate m-surroundings — m.surround","text":"x input sf object points/multipolygons geometry matrix spatial coordinates m dimension m-surrounding r maximum overlapping two m-surroundings. distance character. Cartesian coordinates : one Euclidean, Hausdorff Frechet; geodetic coordinates, Great Circle distances computed. (see sf::st_distance()). Default = \"Euclidean\". control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to generate m-surroundings — m.surround","text":"list class list m_surr containing following components:","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to generate m-surroundings — m.surround","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative     data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate m-surroundings — m.surround","text":"","code":"# Example 1: Obtain m-surroundings with degree of overlapping r N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) m <- 3 r <- 1 msurr_points <- m.surround(x = x, m = m, r = r) plot(msurr_points, type = 1)  plot(msurr_points, type = 2)  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 49 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 1 #>  #> List of no-symbolized observations: #> 38 #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 1 m-surrounding #>     There are 47 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.9592 msurr_points <- m.surround(x = x, m = m, r = r,                 control = list(dtmaxpc = 0.1)) #>  #>  Threshold distance:  0.1316995 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  17  #>  #>  Index of spatial observations excluded:  5 30 42 3 9 11 13 17 20 25 27 31 34 39 41 44 45  plot(msurr_points, type = 1)  plot(msurr_points, type = 2)  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 32 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 26 #>  #> List of no-symbolized observations: #> 8 9 10 11 14 15 25 31 35 38 51 52 53 54 57 61 62 64 71 75 77 85 89 93 95 96 #>  #> List of the degree overlaping: #>     There are 4 m-surrounding that have intersection with 0 m-surrounding #>     There are 12 m-surrounding that have intersection with 1 m-surrounding #>     There are 16 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.375 msurr_points <- m.surround(x = x, m = m, r = r,                    control = list(dtmaxknn = 20)) plot(msurr_points, type = 1)  plot(msurr_points, type = 2)  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 47 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 4 #>  #> List of no-symbolized observations: #> 10 25 38 52 #>  #> List of the degree overlaping: #>     There are 4 m-surrounding that have intersection with 1 m-surrounding #>     There are 43 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.9149  # Example 2: # \\donttest{ data(\"FastFood.sf\") m <- 3 r <- 1 msurr_points <- m.surround(x = FastFood.sf, m = m, r = r,                            distance = \"Euclidean\",                            control = list(dtmaxpc = .001)) #> Warning: bounding box has potentially an invalid value range for longlat data #>  #>  Threshold distance:  105.4512 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  424  #>  #>  Index of spatial observations excludedplot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: bounding box has potentially an invalid value range for longlat data  print(msurr_points) #>       [,1] [,2] [,3] #>  [1,]    1  180  675 #>  [2,]    7  580  196 #>  [3,]   65  520  793 #>  [4,]   87  234  136 #>  [5,]  139  284  343 #>  [6,]  366  347  217 #>  [7,]  390   17  742 #>  [8,]  422    9  662 #>  [9,]  467  199  271 #> [10,]  488  133  657 #> [11,]  637  515  103 #> [12,]  654  832  387 #> [13,]  664  175  852 #> [14,]  791  650   81 summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 14 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 835 #>  #> List of no-symbolized observations: #> 2 3 4 5 6 8 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 82 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 134 135 137 138 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 176 177 178 179 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 197 198 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 277 278 279 280 281 282 283 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 344 345 346 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 388 389 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 516 517 518 519 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 638 639 640 641 642 643 644 645 646 647 648 649 651 652 653 655 656 658 659 660 661 663 665 666 667 668 669 670 671 672 673 674 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 792 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 #>  #> List of the degree overlaping: #>     There are 14 m-surrounding that have intersection with 0 m-surrounding #> Mean degree of overlaping: 0 msurr_points <- m.surround(x = FastFood.sf, m = m, r = r,                            distance = \"Euclidean\",                            control = list(dtmaxknn = 20)) #> Warning: bounding box has potentially an invalid value range for longlat data plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: bounding box has potentially an invalid value range for longlat data  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 409 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 34 #>  #> List of no-symbolized observations: #> 21 30 56 94 99 115 119 211 285 312 345 418 432 494 523 525 567 618 646 655 660 663 736 776 789 796 798 799 809 815 827 862 871 876 #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 0 m-surrounding #>     There are 46 m-surrounding that have intersection with 1 m-surrounding #>     There are 361 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.8778 # }  # Example 3: With isolated areas data(provinces_spain) sf::sf_use_s2(FALSE) plot(sf::st_geometry(provinces_spain))  m <- 3 r <- 1 msurr_points <- m.surround(x = provinces_spain, m = m, r = r,                            distance = \"Euclidean\",                            control = list(dtmaxknn = 8)) plot(msurr_points, type = 1) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data  plot(msurr_points, type = 2) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data   # Example 4: Examples with multipolygons fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 plot(sf::st_geometry(nc))  m <- 3 r <- 1 msurr_polygonsf <- m.surround(x = nc, m = m, r = r,                    distance = \"Great Circle\",                    control=list(dtmaxpc = 0.20)) #>  #>  Threshold distance:  150383.5 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  2  #>  #>  Index of spatial observations excluded:  42 28  plot(msurr_polygonsf, type = 1) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data  plot(msurr_polygonsf, type = 2) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data   # Example 5: With regular lattice sfc = sf::st_sfc(sf::st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))) hexs <- sf::st_make_grid(sfc, cellsize = 0.1, square = FALSE) hexs.sf <- sf::st_sf(hexs) listw  <- spdep::poly2nb(as(hexs.sf, \"Spatial\"), queen = FALSE) m <- 3 r <- 1 msurr_polygonsf <- m.surround(x = hexs.sf, m = m, r = r) plot(msurr_polygonsf, type = 1)  plot(msurr_polygonsf, type = 2)  summary(msurr_polygonsf) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 74 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 0 #>  #> List of no-symbolized observations: #>  #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 1 m-surrounding #>     There are 72 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.973"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class localsrq — methods_localsrq","title":"Methods for class localsrq — methods_localsrq","text":"plot() function allows user plot significant observations. print() function used print number runs localization. Additional information expected values standard deviation, z-value ans p-value prited observation.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class localsrq — methods_localsrq","text":"","code":"# S3 method for localsrq print(x, ...)  # S3 method for localsrq plot(x, ..., sf = NULL, coor = NULL, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class localsrq — methods_localsrq","text":"x localsrq object created Q.test. ... arguments passed methods. sf optional argument plot() method include sf object (default = NULL) coor optional argument plot() method include coordinates points (default = NULL) sig significant level observation plot() method. Default sig = 0.05","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class localsrq — methods_localsrq","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class localsrq — methods_localsrq","text":"Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for class localsrq — methods_localsrq","text":"","code":"# Example 1: Local spatial runs test based on knn library(lwgeom) N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) #>     runs.i      E.i   Std.i    z.value      p.value #> 1        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 2        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 3        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 4        8 7.183838 1.59988  0.5101392 0.6950230217 #> 5        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 6        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 7        6 7.183838 1.59988 -0.7399544 0.2296638446 #> 8        9 7.183838 1.59988  1.1351860 0.8718512930 #> 9        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 10       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 11       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 12       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 13       9 7.183838 1.59988  1.1351860 0.8718512930 #> 14       8 7.183838 1.59988  0.5101392 0.6950230217 #> 15       9 7.183838 1.59988  1.1351860 0.8718512930 #> 16       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 17       9 7.183838 1.59988  1.1351860 0.8718512930 #> 18       2 7.183838 1.59988 -3.2401414 0.0005973521 #> 19       8 7.183838 1.59988  0.5101392 0.6950230217 #> 20       8 7.183838 1.59988  0.5101392 0.6950230217 #> 21       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 22       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 23       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 24       8 7.183838 1.59988  0.5101392 0.6950230217 #> 25       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 26       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 27       8 7.183838 1.59988  0.5101392 0.6950230217 #> 28       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 29       9 7.183838 1.59988  1.1351860 0.8718512930 #> 30       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 31       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 32       9 7.183838 1.59988  1.1351860 0.8718512930 #> 33      10 7.183838 1.59988  1.7602327 0.9608158220 #> 34       9 7.183838 1.59988  1.1351860 0.8718512930 #> 35       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 36       8 7.183838 1.59988  0.5101392 0.6950230217 #> 37       8 7.183838 1.59988  0.5101392 0.6950230217 #> 38       8 7.183838 1.59988  0.5101392 0.6950230217 #> 39       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 40       8 7.183838 1.59988  0.5101392 0.6950230217 #> 41       9 7.183838 1.59988  1.1351860 0.8718512930 #> 42       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 43       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 44       8 7.183838 1.59988  0.5101392 0.6950230217 #> 45       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 46       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 47       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 48       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 49       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 50       8 7.183838 1.59988  0.5101392 0.6950230217 #> 51      10 7.183838 1.59988  1.7602327 0.9608158220 #> 52       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 53       8 7.183838 1.59988  0.5101392 0.6950230217 #> 54       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 55       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 56       8 7.183838 1.59988  0.5101392 0.6950230217 #> 57       8 7.183838 1.59988  0.5101392 0.6950230217 #> 58       8 7.183838 1.59988  0.5101392 0.6950230217 #> 59       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 60       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 61       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 62       8 7.183838 1.59988  0.5101392 0.6950230217 #> 63       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 64       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 65       8 7.183838 1.59988  0.5101392 0.6950230217 #> 66       9 7.183838 1.59988  1.1351860 0.8718512930 #> 67       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 68       9 7.183838 1.59988  1.1351860 0.8718512930 #> 69       8 7.183838 1.59988  0.5101392 0.6950230217 #> 70       8 7.183838 1.59988  0.5101392 0.6950230217 #> 71       9 7.183838 1.59988  1.1351860 0.8718512930 #> 72      10 7.183838 1.59988  1.7602327 0.9608158220 #> 73       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 74       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 75       8 7.183838 1.59988  0.5101392 0.6950230217 #> 76       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 77       9 7.183838 1.59988  1.1351860 0.8718512930 #> 78       8 7.183838 1.59988  0.5101392 0.6950230217 #> 79       8 7.183838 1.59988  0.5101392 0.6950230217 #> 80       9 7.183838 1.59988  1.1351860 0.8718512930 #> 81      10 7.183838 1.59988  1.7602327 0.9608158220 #> 82       8 7.183838 1.59988  0.5101392 0.6950230217 #> 83       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 84       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 85       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 86       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 87       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 88       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 89       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 90       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 91       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 92       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 93       9 7.183838 1.59988  1.1351860 0.8718512930 #> 94       8 7.183838 1.59988  0.5101392 0.6950230217 #> 95      11 7.183838 1.59988  2.3852795 0.9914669250 #> 96       8 7.183838 1.59988  0.5101392 0.6950230217 #> 97       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 98       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 99       9 7.183838 1.59988  1.1351860 0.8718512930 #> 100      7 7.183838 1.59988 -0.1149076 0.4542591853 plot(lsrq, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for class m_surr — methods_m_surr","title":"Method for class m_surr — methods_m_surr","text":"function plots m-surround give object class m_surr obtain code m.surround.  plot() function allows user view configuration m-surrounding.  argument type select type o visualization.   print() print matrix m-surrounding. .  summary give information characteristics th m-surrounding .","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for class m_surr — methods_m_surr","text":"","code":"# S3 method for m_surr summary(object, ...)  # S3 method for m_surr plot(x, ..., type = 1)  # S3 method for m_surr print(x, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for class m_surr — methods_m_surr","text":"object object class m_surr. 2 plot W matrix network ... arguments passed methods. x object class m_surr type numeric. 1 (default) get plot igraph.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for class m_surr — methods_m_surr","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Method for class m_surr — methods_m_surr","text":"Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       Working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method for class m_surr — methods_m_surr","text":"","code":"# Example 1: Obtain m-surroundings with degree of overlapping r N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) m = 4 r = 2 msurr_points <- m.surround(x = x, m = m, r = r,control = list(dtmaxabs = 0.5)) #>  #>  Threshold distance:  0.5 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  1  #>  #>  Index of spatial observations excluded:  49  plot(msurr_points, type = 1)  plot(msurr_points, type = 2)  print(msurr_points) #>       [,1] [,2] [,3] [,4] #>  [1,]    1   50    9   33 #>  [2,]    3   27   14   97 #>  [3,]    6   70   53   72 #>  [4,]    8    7   12   93 #>  [5,]    9   33   60   58 #>  [6,]   10    4   86   63 #>  [7,]   12   93   74   66 #>  [8,]   14   97   68   62 #>  [9,]   16   25   98    5 #> [10,]   19   66   64   47 #> [11,]   20   13   76   15 #> [12,]   22   54   48   10 #> [13,]   23   26   20   13 #> [14,]   29   96   78   95 #> [15,]   31   24  100   17 #> [16,]   34   32   67   59 #> [17,]   35   46    8    7 #> [18,]   36   11   37   80 #> [19,]   37   80   57   49 #> [20,]   41   63   23   20 #> [21,]   43   44   61   21 #> [22,]   48   30   10   63 #> [23,]   53   28   72   88 #> [24,]   57   49   34   32 #> [25,]   60   94   89   25 #> [26,]   61   21   29   95 #> [27,]   64   47   82   77 #> [28,]   65   38   41   20 #> [29,]   67   59   16   98 #> [30,]   68   75   35    8 #> [31,]   69   42   43   21 #> [32,]   72   51   87   84 #> [33,]   74   52   36   66 #> [34,]   76   15   19   17 #> [35,]   78   71   81   95 #> [36,]   79   45   31   24 #> [37,]   81   39   95   55 #> [38,]   82   77   79   45 #> [39,]   83   88   22   92 #> [40,]   85   99   90   73 #> [41,]   86   73   65   38 #> [42,]   87   84   85   86 #> [43,]   89   40    6   70 #> [44,]   90   18   91   92 #> [45,]   91   56    3   27 #> [46,]   92    2   58   62 #> [47,]   95   55   83   88 #> [48,]   98    5   69   42  # Example 2: data(\"FastFood.sf\") m = 6 r = 1 msurr_points <-  m.surround(x = FastFood.sf, m = m, r = r, distance = \"Euclidean\",                             control = list(dtmaxpc = .01)) #> Warning: bounding box has potentially an invalid value range for longlat data #>  #>  Threshold distance:  1054.512 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  154  #>  #>  Index of spatial observations excludedplot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: bounding box has potentially an invalid value range for longlat data  print(msurr_points) #>       [,1] [,2] [,3] [,4] [,5] [,6] #>  [1,]    1  180  675  719  471  294 #>  [2,]   39  352  693  615  402  469 #>  [3,]   40  807  745  496  592  512 #>  [4,]   63  738  612  186   53  796 #>  [5,]   74  721  751   48  165  500 #>  [6,]  208  699  601  648  824  778 #>  [7,]  209  642  397  752  509  483 #>  [8,]  221  153  477  797  584  594 #>  [9,]  226   61  122  607  617  765 #> [10,]  483  131  339  116  229   63 #> [11,]  500  764  166  559  373  310 #> [12,]  505  744   47  367  706  209 #> [13,]  529  622  412   93  248  398 #> [14,]  593   97  613  403  575  221 #> [15,]  594  105  753  396   35  208 #> [16,]  645  106  585  596  610  510 #> [17,]  657  488  133  792  489  479 #> [18,]  763  499  630  743   58   74 #> [19,]  765  849   68  152  600  763 #> [20,]  796  115  588  597  843  226 #> [21,]  832  387  654   60  757  516"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for class qmap — methods_qmap","title":"Method for class qmap — methods_qmap","text":"function plot difference frequencies symbols map.  plot() function obtain plot.  argument ci select confidence level.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for class qmap — methods_qmap","text":"x object class qmap ci confidence level difference probabilities symbols `plot` method. Default ci = 0.95 ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Method for class qmap — methods_qmap","text":"Ruiz M, López FA Páez (2011).     Comparison Thematic Maps Using Symbolic Entropy.       International Journal Geographical Information Science,  26, 413-439. Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method for class qmap — methods_qmap","text":"","code":"# Example 1: N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(cbind(cx,cy), k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1) plot(q.test) #> [[1]]  #>  #> [[2]]  #>"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class scantest — methods_scantest","title":"Methods for class scantest — methods_scantest","text":"plot() function allows user plot significant cluster(s).summary list information likelihood cluster.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class scantest — methods_scantest","text":"","code":"# S3 method for scantest plot(x, ..., sf = NULL, coor = NULL)  # S3 method for scantest summary(object, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class scantest — methods_scantest","text":"x scantest object created scan.test plot() method. ... arguments passed methods. sf optional argument plot() method include sf object (default = NULL) coor optional argument plot() method include coordinates points (default = NULL) object scantest object created scan.test summary() method.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class scantest — methods_scantest","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class scantest — methods_scantest","text":"Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       Working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class spqtest — methods_spqtest","title":"Methods for class spqtest — methods_spqtest","text":"plot() function allows user obtain plot relative frequency symbol (standard equivalent) confidence interval.  print() function used get list values Q test  standard symbolization based permutations equivalent symbolization  based combinations. summary() print table output Q test.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class spqtest — methods_spqtest","text":"","code":"# S3 method for spqtest plot(x, ..., ci = 0.95)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class spqtest — methods_spqtest","text":"x spqtest object created Q.test. ... arguments passed methods ci confidence level intervals plot method. Default ci = 0.95","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class spqtest — methods_spqtest","text":"functions return value","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class spqtest — methods_spqtest","text":"Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to order the elements of the m_i-subrrounds — nb2nb_order","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"auxiliary function. case obtaining list neighbors class nb poly2nb, necessary reorder elements based distance /angle.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"","code":"nb2nb_order(listw = listw, sf = NULL)"},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"listw object nb class. sf sf object used get listw .","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"object nb class elements order.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"Sort elements list nb. First distance ","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"@references Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       Working paper.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"","code":"# With a sf object (irregular lattice) library(sf) fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 listw <- spdep::poly2nb(as(nc,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar listw.order <- nb2nb_order(listw = listw, sf = nc) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data  # With a sf object (regular lattice: hexagons) sfc = sf::st_sfc(sf::st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))) hexs <- sf::st_make_grid(sfc, cellsize = 0.1, square = FALSE) hexs.sf <- sf::st_sf(hexs) listw  <- spdep::poly2nb(as(hexs.sf, \"Spatial\"), queen = FALSE) listw.order <- nb2nb_order(listw = listw, sf = hexs.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the empirical distribution of runs — plot.sprunstest","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"Plot empirical distribution runs","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"","code":"# S3 method for sprunstest plot(x, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"x object class sprunstest. ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"Plot histogram empirical distribution runs","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"","code":"# Example 1: Fastfood example. sf (points) data(\"FastFood.sf\") x <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data listw <- spdep::knearneigh(x, k = 2) formula <- ~ Type srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = listw, nsim = 299) plot(srq)   # Example 2: Spain example (poligons with 0 neinghbourhood) data(\"provinces_spain\") sf::sf_use_s2(FALSE) listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") formula <- ~ Older srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw, nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data plot(srq)  provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") formula <- ~ Male2Female srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw, nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data plot(srq)"},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects of class summary.spjctest. — print.summary.spjctest","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"Print method objects class summary.spjctest.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"","code":"# S3 method for summary.spjctest print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"x object class summary.spjctest. digits number digits show printed tables. Default: max(3L, getOption(\"digits\") - 3L). ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"return value, called side effects","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects of class summary.spqtest. — print.summary.spqtest","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"Print method objects class summary.spqtest.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"","code":"# S3 method for summary.spqtest print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"x object class summary.spqtest. digits number digits show printed tables. Default: max(3L, getOption(\"digits\") - 3L). ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"return value, called side effects","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":null,"dir":"Reference","previous_headings":"","what":"Provinces in Spain. — provinces_spain","title":"Provinces in Spain. — provinces_spain","text":"simple features object provinces Spain selected demographic economic information.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provinces in Spain. — provinces_spain","text":"","code":"data(provinces_spain)"},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Provinces in Spain. — provinces_spain","text":"simple features dataframe 50 rows 15 columns: province Names provinces Spain factor CCAA Names Autonomous Communities Spain factor ID_INE National Institute Statistics unique identifier provinces Population Population province 2020 Density Population density province persons/km^2 Older Percentage population 65 older provice 2020 Median_Age Median age population province 2020 Male2Female Ratio male female population province 2020 GDPpc GDP per capita province 2016 Transit Dummy variable mass transit system province; 1: YES Area Area province Altitude Altitude province Coast dummy variable indicates whether province coast; 1: YES Meteo_Station Identifier meteorological station representative province used retrieve climatic variables geometry geometry simple features object","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Provinces in Spain. — provinces_spain","text":"Instituto Nacional de Estadistica http://www.ine.es/ Climatic data: Agencia Estatal de Meteorologia http://www.aemet.es/ Páez et al. (2020) https://onlinelibrary.wiley.com/doi/full/10.1111/gean.12241","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Provinces in Spain. — provinces_spain","text":"Paez, ., Lopez, F. ., Menezes, T., Cavalcanti, R., & Pitta, M. (2020). Spatio‐Temporal Analysis      Environmental Correlates COVID‐19 Incidence Spain.. Geographical Analysis. 53(3) 397-421","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provinces in Spain. — provinces_spain","text":"","code":"data(provinces_spain)  summary(provinces_spain) #>              province                    CCAA        ID_INE      #>  Albacete        : 1   Castilla y Leon     : 9   Min.   : 1.00   #>  Alicante/Alacant: 1   Andalucia           : 8   1st Qu.:13.25   #>  Almeria         : 1   Castilla - La Mancha: 5   Median :25.50   #>  Araba/alava     : 1   CataluÃ±a           : 4   Mean   :25.50   #>  Asturias        : 1   Galicia             : 4   3rd Qu.:37.75   #>  Avila           : 1   Aragon              : 3   Max.   :50.00   #>  (Other)         :44   (Other)             :17                   #>    Population         Density           Older         Median_Age    #>  Min.   :  88636   Min.   :  8.60   Min.   :15.16   Min.   :40.19   #>  1st Qu.: 337901   1st Qu.: 26.18   1st Qu.:18.09   1st Qu.:42.45   #>  Median : 684202   Median : 63.50   Median :19.93   Median :43.70   #>  Mean   : 974257   Mean   :140.04   Mean   :21.03   Mean   :44.55   #>  3rd Qu.:1149460   3rd Qu.:171.64   3rd Qu.:23.03   3rd Qu.:46.00   #>  Max.   :6663394   Max.   :829.76   Max.   :31.36   Max.   :50.68   #>                                                                     #>   Male2Female         GDPpc          Transit       Altitude          Coast      #>  Min.   : 91.59   Min.   :16666   Min.   :0.0   Min.   :   5.0   Min.   :0.00   #>  1st Qu.: 95.52   1st Qu.:18878   1st Qu.:0.0   1st Qu.:  24.5   1st Qu.:0.00   #>  Median : 98.06   Median :20870   Median :0.0   Median : 215.5   Median :0.00   #>  Mean   : 97.83   Mean   :22506   Mean   :0.1   Mean   : 369.0   Mean   :0.42   #>  3rd Qu.:100.01   3rd Qu.:25835   3rd Qu.:0.0   3rd Qu.: 677.5   3rd Qu.:1.00   #>  Max.   :103.01   Max.   :36001   Max.   :1.0   Max.   :1131.0   Max.   :1.00   #>                                                                                 #>  Meteo_Station      Area                    geometry  #>  0016A  : 1    Min.   :1.979e+09   MULTIPOLYGON :50   #>  0076   : 1    1st Qu.:6.707e+09   epsg:4326    : 0   #>  0367   : 1    Median :1.001e+10   +proj=long...: 0   #>  1024E  : 1    Mean   :1.012e+10                      #>  1082   : 1    3rd Qu.:1.370e+10                      #>  1111X  : 1    Max.   :2.179e+10                      #>  (Other):44"},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the scan test. — scan.test","title":"Compute the scan test. — scan.test","text":"function compute scan test Bernoulli Multinomial categorical spatial process.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the scan test. — scan.test","text":"","code":"scan.test(formula = NULL, data = NULL, fx = NULL, coor = NULL, case = NULL, nv = NULL, nsim = NULL, distr = NULL, windows = \"circular\", alternative = \"High\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the scan test. — scan.test","text":"formula symbolic description factor (optional). data (optional) data frame sf object containing variable testing . fx factor (optional). coor (optional) coordinates observations. case Bernoulli distribution. element factor, cases non-cases testing cases versus non-cases nv Maximum windows size, default nv = N/2. algorithm scan clusters geographic size 1 upper limit (nv) defined user. nsim Number permutations. distr distribution spatial process: \"bernoulli\" two levels \"multinomial\" three levels. windows string select type cluster \"circular\" (default) \"elliptic\". alternative Bernoulli spatial process. character string specifying type cluster, must one \"High\" (default), \"\" \"Low\". control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the scan test. — scan.test","text":"object htest scantest class","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the scan test. — scan.test","text":"Two alternative sets arguments can included function compute scan test:  spatial scan statistics widely used epidemiology, criminology ecology.  purpose analyze spatial distribution points geographical  regions testing hypothesis spatial randomness distribution  basis different distributions (e.g. Bernoulli, Poisson Normal distributions).  scan.test function obtain scan statistic Bernoulli Multinomial distribution. test independence spatial process, null, type windows irrelevant alternative elliptic  windows can identify precision cluster. big data sets (N >>) windows = \"elliptic\" can slowly","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the scan test. — scan.test","text":"Kulldorff M, Nagarwalla N. (1995).     Spatial disease clusters: Detection Inference.       Statistics Medicine. 14:799-810 Jung , Kulldorff M, Richard OJ (2010).     spatial scan statistic multinomial data.       Statistics Medicine. 29(18), 1910-1918 Páez, ., López-Hernández, F. ., Ortega-García, J. ., & Ruiz, M. (2016).      Clustering co-occurrence cancer types: comparison techniques application pediatric cancer Murcia, Spain.      Spatial Analysis Health Geography, 69-90.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the scan test. — scan.test","text":"","code":"# Case 1: Scan test bernoulli data(provinces_spain) sf::sf_use_s2(FALSE) provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") formula <- ~ Male2Female scan <- scan.test(formula = formula, data = provinces_spain, case=\"men\", nsim = 99, distr = \"bernoulli\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Male2Female #> scan-loglik = 6.0359, p-value = 0.07 #> alternative hypothesis: High #> sample estimates: #>                                         #> Total observations in the MLC =   16.00 #> Expected cases in the MLC =       11.84 #> Observed cases in the MLC =       16.00 #>  summary(scan) #>  #> Summary of data: #> Distribution....................: bernoulli #> Number of locations.............: 50 #> Name of cases...................: men #> Total number of cases...........: 37 #> Names of cathegories............: men woman #> Total per category..............: 37 13 #> Percent per category............: 0.74 0.26 #>  #> Scan statistic: #> Total cases in the MLC......: 16 #> Names of cathegories...: men woman #> Type of cluster (alternative)...: High #> Value of statisitic (loglik)....: 6.0359 #> p-value.........................: 0.07 #>  #> IDs of cluster detect: #> Location IDs included..................:  37 34 20 11 40 28 6 14 10 18 35 36 22 31 13 15 #>  #>  #> Secondary Scan statistic. Number 1  #> Total cases in secondary cluster.....:  6  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik).........: 1.9464 #> p-value..............................: 0.92 #> Location IDs included................:  23 32 47 33 45 26 #>  #>  #> Secondary Scan statistic. Number 2  #> Total cases in secondary cluster.....:  6  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik).........: 1.9464 #> p-value..............................: 0.92 #> Location IDs included................:  30 50 25 1 48 46 #>  #>  #> Secondary Scan statistic. Number 3  #> Total cases in secondary cluster.....:  3  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik).........: 0.9365 #> p-value..............................: 0.99 #> Location IDs included................:  44 3 12 #>  #>  #> Secondary Scan statistic. Number 4  #> Total cases in secondary cluster.....:  2  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik).........: 0.6167 #> p-value..............................: 0.99 #> Location IDs included................:  8 17 #>  #>  #> Secondary Scan statistic. Number 5  #> Total cases in secondary cluster.....:  1  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik).........: 0.3047 #> p-value..............................: 0.99 #> Location IDs included................:  2 plot(scan, sf = provinces_spain)   ## With maximum number of neighborhood scan <- scan.test(formula = formula, data = provinces_spain, case = \"woman\", nv = 5, nsim = 99, distr = \"bernoulli\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Male2Female #> scan-loglik = 4.3257, p-value = 0.19 #> alternative hypothesis: High #> sample estimates: #>                                        #> Total observations in the MLC =   3.00 #> Expected cases in the MLC =       0.78 #> Observed cases in the MLC =       3.00 #>  plot(scan, sf = provinces_spain)   # \\donttest{ ## With elliptic windows scan <- scan.test(formula = formula, data = provinces_spain, case = \"men\", nv = 20, nsim = 99, distr = \"bernoulli\", windows =\"elliptic\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Male2Female #> scan-loglik = 7.038, p-value < 2.2e-16 #> alternative hypothesis: High #> sample estimates: #>                                         #> Total observations in the MLC =   18.00 #> Expected cases in the MLC =       62.16 #> Observed cases in the MLC =       18.00 #>  scan <- scan.test(formula = formula, data = provinces_spain, case = \"men\", nv = 15, nsim = 99, distr = \"bernoulli\", windows =\"elliptic\", alternative = \"Low\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Male2Female #> scan-loglik = 5.9143, p-value = 0.1 #> alternative hypothesis: Low #> sample estimates: #>                                         #> Total observations in the MLC =    4.00 #> Expected cases in the MLC =       51.06 #> Observed cases in the MLC =        0.00 #>  plot(scan, sf = provinces_spain)    # Case 2: scan test multinomial data(provinces_spain) provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") formula <- ~ Older scan <- scan.test(formula = formula, data = provinces_spain, nsim = 99, distr = \"multinomial\") print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  Older #> scan-loglik = 4.2473, p-value = 0.9 #> sample estimates: #>               low middle high Sum #> cases.expect 2.24   2.88 2.88   8 #> cases.observ 0.00   6.00 2.00   8 #>  plot(scan, sf = provinces_spain)   # Case 3: scan test multinomial data(FastFood.sf) sf::sf_use_s2(FALSE) formula <- ~ Type scan <- scan.test(formula = formula, data = FastFood.sf, nsim = 99, distr = \"multinomial\", windows=\"elliptic\", nv = 50) print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  Type #> scan-loglik = 15.506, p-value < 2.2e-16 #> sample estimates: #>                  H     P     S Sum #> cases.expect 13.48 14.86 14.66  43 #> cases.observ 16.00  1.00 26.00  43 #>  summary(scan) #>  #> Summary of data: #> Distribution....................: multinomial #> Number of locations.............: 877 #> Total number of cases...........: 877 #> Names of cathegories...........: H P S #> Total cases per category........: 275 303 299 #> Percent cases per category......: 0.31 0.35 0.34 #>  #> Scan statistic: #> Total cases in the MLC.........: 43 #> Names of cathegories...........: H P S #> Observed cases in the MLC......: 13.48 14.86 14.66 #> Expected cases in the MLC......: 16 1 26 #> Value of statistic (loglik)....: 15.5058 #> p-value........................: 0 #>  #> IDs of cluster detect: #> Location IDs included.....:  68 849 152 499 630 763 827 765 617 600 607 48 58 588 743 843 74 122 750 115 645 61 226 796 876 699 610 597 596 721 751 53 186 659 778 63 106 229 585 738 612 131 208 #>  #>  #> Secondary Scan statistic. Number 1  #> Total cases in secondary cluster......:  16  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.56 0 0.44 #> Value of statisitic (loglik)....: 7.0897 #> p-value.........................: 0.94 #> Location IDs included..................:  270 79 733 119 144 676 634 787 145 266 141 688 46 81 650 791 #>  #>  #> Secondary Scan statistic. Number 2  #> Total cases in secondary cluster......:  6  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0 0 1 #> Value of statisitic (loglik)....: 6.4964 #> p-value.........................: 0.98 #> Location IDs included..................:  652 599 769 799 589 674 #>  #>  #> Secondary Scan statistic. Number 3  #> Total cases in secondary cluster......:  6  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0 0 1 #> Value of statisitic (loglik)....: 6.4964 #> p-value.........................: 0.98 #> Location IDs included..................:  870 695 618 825 824 648 #>  #>  #> Secondary Scan statistic. Number 4  #> Total cases in secondary cluster......:  13  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.38 0 0.62 #> Value of statisitic (loglik)....: 5.8025 #> p-value.........................: 0.99 #> Location IDs included..................:  183 636 604 598 127 656 83 109 716 204 828 624 768 #>  #>  #> Secondary Scan statistic. Number 5  #> Total cases in secondary cluster......:  9  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.22 0.78 0 #> Value of statisitic (loglik)....: 5.034 #> p-value.........................: 0.99 #> Location IDs included..................:  51 393 503 578 215 314 478 321 571 plot(scan, sf = FastFood.sf) #> Warning: bounding box has potentially an invalid value range for longlat data   # Case 4: DGP two categories N <- 500 cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/2,1/2) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho) scan <- scan.test(fx = fx, nsim = 9, case = \"A\", nv = 30, coor = cbind(cx,cy), distr = \"bernoulli\",windows=\"elliptic\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  fx #> scan-loglik = 8.4653, p-value = 0.1 #> alternative hypothesis: High #> sample estimates: #>                                        #> Total observations in the MLC =     12 #> Expected cases in the MLC =       1796 #> Observed cases in the MLC =         12 #>  plot(scan)   # Case 5: DGP three categories N <- 200 cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/3,1/3,1/3) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho) scan <- scan.test(fx = fx, nsim = 19, coor = cbind(cx,cy), nv = 30, distr = \"multinomial\", windows = \"elliptic\") print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  fx #> scan-loglik = 14.498, p-value < 2.2e-16 #> sample estimates: #>                 A    B     C Sum #> cases.expect 9.38 9.24  9.38  28 #> cases.observ 2.00 4.00 22.00  28 #>  plot(scan)  # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the similarity test. — similarity.test","title":"Compute the similarity test. — similarity.test","text":"function compute nonparametric test spatial independence using symbolic analysis categorical/qualitative spatial process.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the similarity test. — similarity.test","text":"","code":"similarity.test(formula = NULL, data = NULL, fx = NULL, listw = listw, alternative = \"two.sided\", distr = \"asymptotic\", nsim = NULL, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the similarity test. — similarity.test","text":"formula symbolic description factor (optional). data (optional) data frame sf object containing variable testing . fx factor (optional). listw listw object alternative character string specifying type cluster, must one \"High\" (default), \"\" \"Low\". distr string. Distribution test \"asymptotic\" (default) \"bootstrap\" nsim Number permutations. control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the similarity test. — similarity.test","text":"object htest","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the similarity test. — similarity.test","text":"Farber, S., Marin, M. R., & Paez, . (2015).     Testing spatial independence using similarity relations.       Geographical Analysis. 47(2), 97-120.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the similarity test. — similarity.test","text":"","code":"# Case 1: N <- 100 cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 3) p <- c(1/4,1/4,1/4,1/4) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho) W <- (spdep::nb2mat(spdep::knn2nb(listw)) >0)*1 similarity <- similarity.test(fx = fx, data = FastFood.sf, listw = listw) print(similarity) #>  #> \tSimilarity test of spatial dependence for qualitative data. #> \tDistribution: asymptotic #>  #> data:  fx #> Similarity-test = 4.1741, p-value = 2.992e-05 #> alternative hypothesis: two.sided #>   # Case 2: test with formula, a sf object (points) and knn data(\"FastFood.sf\") coor <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data listw <- spdep::knearneigh(coor, k = 4) formula <- ~ Type similarity <- similarity.test(formula = formula, data = FastFood.sf, listw = listw) print(similarity) #>  #> \tSimilarity test of spatial dependence for qualitative data. #> \tDistribution: asymptotic #>  #> data:  Type #> Similarity-test = -5.4476, p-value = 5.105e-08 #> alternative hypothesis: two.sided #>   # Case 3: data(provinces_spain) listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") formula <- ~ Male2Female similarity <- similarity.test(formula = formula, data = provinces_spain, listw = listw) #> Warning: Out-of-range p-value: reconsider test arguments print(similarity) #>  #> \tSimilarity test of spatial dependence for qualitative data. #> \tDistribution: asymptotic #>  #> data:  Male2Female #> Similarity-test = NaN, p-value = NA #> alternative hypothesis: two.sided #>"},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the global spatial runs test. — sp.runs.test","title":"Compute the global spatial runs test. — sp.runs.test","text":"function compute global spatial runs test spatial independence categorical spatial data set.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the global spatial runs test. — sp.runs.test","text":"","code":"sp.runs.test(formula = NULL, data = NULL, fx = NULL, listw = listw, alternative = \"two.sided\" , distr = \"asymptotic\", nsim = NULL,control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the global spatial runs test. — sp.runs.test","text":"formula symbolic description factor (optional). data (optional) data frame sf object containing variable testing . fx factor (optional). listw neighborhood list (type knn nb) W matrix indicates order elements  $m_i-environment$ (example inverse distance). calculate number runs $m_i-environment$, order must established, example nearest neighbor furthest one. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\". distr string. Distribution test \"asymptotic\" (default) \"bootstrap\" nsim Number permutations obtain confidence intervals (CI). Default value NULL don`t get CI number runs. control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the global spatial runs test. — sp.runs.test","text":"object htest sprunstest class","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the global spatial runs test. — sp.runs.test","text":"order neighborhoods ($m_i-environments$) critical obtain test.  obtain number runs observed $m_i-environment$, element must associated set neighbors ordered proximity. Three kinds lists can included identify $m_i-environments$: Two alternative sets arguments can included function compute spatial runs test:","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the global spatial runs test. — sp.runs.test","text":"@references Ruiz, M., López, F., Páez, . (2021).     test global local homogeneity categorical data based spatial runs.       Working paper.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the global spatial runs test. — sp.runs.test","text":"","code":"# Case 1: SRQ test based on factor and knn # \\donttest{ n <- 100 cx <- runif(n) cy <- runif(n) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k=3) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(listw = listw, p = p, rho = rho) srq <- sp.runs.test(fx = fx, listw = listw) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  mxf #> sp.runs test = -3.6128, p-value = 0.0003029 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            243.0000            285.5152            138.4854  #>  plot(srq)   # Boots Version control <- list(seedinit = 1255) srq <- sp.runs.test(fx = fx, listw = listw, distr = \"bootstrap\" , nsim = 299, control = control) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  mxf #> sp.runs test = -3.6128, p-value < 2.2e-16 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  243.0000                  285.5652                  153.8103  #>  plot(srq)   # Case 2: SRQ test with formula, a sf object (points) and knn data(\"FastFood.sf\") x <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data listw <- spdep::knearneigh(x, k=4) formula <- ~ Type srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = listw) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  Type #> sp.runs test = 3.899, p-value = 9.657e-05 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            3408.000            3216.242            2418.743  #>  plot(srq)  # Version boots srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = listw, distr = \"bootstrap\", nsim = 199) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  Type #> sp.runs test = 3.899, p-value < 2.2e-16 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  3408.000                  3213.030                  2597.191  #>  plot(srq)   # Case 3: SRQ test (permutation) using formula with a sf object (polygons) and nb library(sf) fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 listw <- spdep::poly2nb(as(nc,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar p <- c(1/6,3/6,2/6) rho = 0.5 co <- sf::st_coordinates(sf::st_centroid(nc)) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data nc$fx <- dgp.spq(listw = listw, p = p, rho = rho) plot(nc[\"fx\"])  formula <- ~ fx srq <- sp.runs.test(formula = formula, data = nc, listw = listw, distr = \"bootstrap\", nsim = 399) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  fx #> sp.runs test = -0.88773, p-value = 0.3625 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  375.0000                  386.3784                  163.6177  #>  plot(srq)   # Case 4: SRQ test (Asymptotic) using formula with a sf object (polygons) and nb data(provinces_spain) sf::sf_use_s2(FALSE) listw <- spdep::poly2nb(provinces_spain, queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar provinces_spain$Coast <- factor(provinces_spain$Coast) levels(provinces_spain$Coast) = c(\"no\",\"yes\") plot(provinces_spain[\"Coast\"])  formula <- ~ Coast srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  Coast #> sp.runs test = -2.7795, p-value = 0.005444 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>           133.00000           160.36571            96.93415  #>  plot(srq)   # Boots version srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw, distr = \"bootstrap\", nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  Coast #> sp.runs test = -2.7795, p-value = 0.003333 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                 133.00000                 157.27425                  92.83058  #>  plot(srq)   # Case 5: SRQ test based on a distance matrix (inverse distance) N <- 100 cx <- runif(N) cy <- runif(N) data <- as.data.frame(cbind(cx,cy)) data <- sf::st_as_sf(data,coords = c(\"cx\",\"cy\")) n = dim(data)[1] dis <- 1/matrix(as.numeric(sf::st_distance(data,data)),ncol=n,nrow=n) diag(dis) <- 0 dis <- (dis < quantile(dis,.10))*dis p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(listw = dis , p = p, rho = rho) srq <- sp.runs.test(fx = fx, listw = dis) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  mxf #> sp.runs test = -1.6502, p-value = 0.0989 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            595.0000            656.5455           1390.9461  #>  plot(srq)   srq <- sp.runs.test(fx = fx, listw = dis, data = data) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  mxf #> sp.runs test = -1.6502, p-value = 0.0989 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            595.0000            656.5455           1390.9461  #>  plot(srq)   # Boots version srq <- sp.runs.test(fx = fx, listw = dis, data = data, distr = \"bootstrap\", nsim = 299) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  mxf #> sp.runs test = -1.6502, p-value = 0.1567 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  595.0000                  635.1505                 1435.0209  #>  plot(srq)   # Case 6: SRQ test based on a distance matrix (inverse distance) data(\"FastFood.sf\") sf::sf_use_s2(FALSE) n = dim(FastFood.sf)[1] dis <- 1000000/matrix(as.numeric(sf::st_distance(FastFood.sf,FastFood.sf)), ncol = n, nrow = n) #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data diag(dis) <- 0 dis <- (dis < quantile(dis,.005))*dis p <- c(1/6,3/6,2/6) rho = 0.5 co <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data FastFood.sf$fx <- dgp.spq(p = p, listw = dis, rho = rho) plot(FastFood.sf[\"fx\"]) #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: bounding box has potentially an invalid value range for longlat data  formula <- ~ fx  # Boots version srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = dis, distr = \"bootstrap\", nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries of x #> Warning: bounding box has potentially an invalid value range for longlat data #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  fx #> sp.runs test = -7.0034, p-value < 2.2e-16 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  2326.000                  2543.314                  3050.391  #>  plot(srq)  # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"spqdep offers user collection functions testing spatial independence categorical cross-section datasets.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"functionalities included spqdep package :","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-test-q","dir":"Reference","previous_headings":"","what":"1. Test Q","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Testing spatial dependence Q test based symbolic entropy. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-test-qmap","dir":"Reference","previous_headings":"","what":"2. Test QMap","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Two statistics spatial analysis qualitative data obtained  based symbolic entropy maps. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-spatial-runs-test","dir":"Reference","previous_headings":"","what":"3. Spatial runs test","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Testing spatial dependence global test based runs. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-local-spatial-runs-test","dir":"Reference","previous_headings":"","what":"4. Local spatial runs test","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Obtain local test based runs. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-scan-test","dir":"Reference","previous_headings":"","what":"5. Scan test","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Testing spatial dependence Scan test. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-join-count-tests","dir":"Reference","previous_headings":"","what":"6. Join-count tests","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Testing spatial dependence classical Join-count test. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"-similarity-test","dir":"Reference","previous_headings":"","what":"7. Similarity test","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Testing spatial dependence Similarity test. See references","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"datasets","dir":"Reference","previous_headings":"","what":"Datasets","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"(example provinces_spain, FastFood.sf)   spqdep includes two different datasets: provinces_spain FastFood.sf.   sets used illustrate capabilities different functions.   Briefly, main characteristics following FastFood.sf sf object points localization Fastfood restaurants Toronto. provinces_spain object class sf geometry spanish provinces several data sets.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Testing for Spatial Structure of Qualitative Data in Cross Section. — spqdep-package","text":"Ruiz M, López FA Páez (2011).     Comparison Thematic Maps Using Symbolic Entropy.       International Journal Geographical Information Science,  26, 413-439. Ruiz, M., López, F., Páez, . (2010).     Testing spatial association qualitative data using symbolic dynamics.       Journal Geographical Systems, 12(3), 281-309.0. Kulldorff M, Nagarwalla N. (1995).     Spatial disease clusters: Detection Inference.       Statistics Medicine. 14:799-810 Jung , Kulldorff M, Richard OJ (2010).     spatial scan statistic multinomial data.       Statistics Medicine. 29(18), 1910-1918 Páez, , López-Hernández, FA, Ortega-García, JA, & Ruiz, M. (2016).      Clustering co-occurrence cancer types: comparison techniques application pediatric cancer Murcia, Spain.      Spatial Analysis Health Geography, 69-90.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of estimated objects of class spjctest. — summary.spjctest","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"function summarizes estimated spjctest objects.   tables output include basic information test.   blablabla...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"","code":"# S3 method for spjctest summary(object, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"object spjctest object including list htest. ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"object class summary.spjctest","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"","code":"## Multinomial + Binomial using a sf multipolygon data(\"provinces_spain\") sf::sf_use_s2(FALSE) provinces_spain$Male2Female <- factor(provinces_spain$Male2Female > 100) levels(provinces_spain$Male2Female) = c(\"men\",\"woman\") provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Male2Female jc1 <- jc.test(formula = f1,                data = provinces_spain,                distr = \"mc\",                alternative = \"greater\",                zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they are planar summary(jc1) #> <div id=\"ltlobasigb\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #ltlobasigb .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #ltlobasigb .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #ltlobasigb .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #ltlobasigb .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #ltlobasigb .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #ltlobasigb .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #ltlobasigb .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #ltlobasigb .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ltlobasigb .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ltlobasigb .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #ltlobasigb .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #ltlobasigb .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #ltlobasigb .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ltlobasigb .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #ltlobasigb .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #ltlobasigb .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ltlobasigb .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #ltlobasigb .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ltlobasigb .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #ltlobasigb .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ltlobasigb .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ltlobasigb .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ltlobasigb .gt_left { #>   text-align: left; #> } #>  #> #ltlobasigb .gt_center { #>   text-align: center; #> } #>  #> #ltlobasigb .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #ltlobasigb .gt_font_normal { #>   font-weight: normal; #> } #>  #> #ltlobasigb .gt_font_bold { #>   font-weight: bold; #> } #>  #> #ltlobasigb .gt_font_italic { #>   font-style: italic; #> } #>  #> #ltlobasigb .gt_super { #>   font-size: 65%; #> } #>  #> #ltlobasigb .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #ltlobasigb .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #ltlobasigb .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #ltlobasigb .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #ltlobasigb .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"5\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>JoinCount Spatial Tests (Monte Carlo)<\/th> #>     <\/tr> #>      #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">pairs<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">pvalue<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Joincount<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Expected<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Variance<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">Older - multinomial - alternative: greater - Monte-Carlo simulation of #>         join-count statistic (nonfree sampling)<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">high:high<\/td> #> <td class=\"gt_row gt_right\">0.41800<\/td> #> <td class=\"gt_row gt_right\">14<\/td> #> <td class=\"gt_row gt_right\">13.93<\/td> #> <td class=\"gt_row gt_right\">10.46<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low:low<\/td> #> <td class=\"gt_row gt_right\">0.59100<\/td> #> <td class=\"gt_row gt_right\">7<\/td> #> <td class=\"gt_row gt_right\">8.18<\/td> #> <td class=\"gt_row gt_right\">6.04<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">middle:middle<\/td> #> <td class=\"gt_row gt_right\">0.60500<\/td> #> <td class=\"gt_row gt_right\">13<\/td> #> <td class=\"gt_row gt_right\">13.79<\/td> #> <td class=\"gt_row gt_right\">10.13<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">low:high<\/td> #> <td class=\"gt_row gt_right\">0.45300<\/td> #> <td class=\"gt_row gt_right\">24<\/td> #> <td class=\"gt_row gt_right\">23.05<\/td> #> <td class=\"gt_row gt_right\">16.25<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">middle:high<\/td> #> <td class=\"gt_row gt_right\">0.65700<\/td> #> <td class=\"gt_row gt_right\">28<\/td> #> <td class=\"gt_row gt_right\">29.28<\/td> #> <td class=\"gt_row gt_right\">17.46<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">middle:low<\/td> #> <td class=\"gt_row gt_right\">0.27400<\/td> #> <td class=\"gt_row gt_right\">25<\/td> #> <td class=\"gt_row gt_right\">22.77<\/td> #> <td class=\"gt_row gt_right\">15.42<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">Jtot<\/td> #> <td class=\"gt_row gt_right\">0.37100<\/td> #> <td class=\"gt_row gt_right\">77<\/td> #> <td class=\"gt_row gt_right\">75.10<\/td> #> <td class=\"gt_row gt_right\">20.20<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"5\" class=\"gt_group_heading\">Male2Female - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_left\">men-men<\/td> #> <td class=\"gt_row gt_right\">0.52400<\/td> #> <td class=\"gt_row gt_right\">60<\/td> #> <td class=\"gt_row gt_right\">60.37<\/td> #> <td class=\"gt_row gt_right\">23.62<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">woman-woman<\/td> #> <td class=\"gt_row gt_right\">0.02900<\/td> #> <td class=\"gt_row gt_right\">13<\/td> #> <td class=\"gt_row gt_right\">7.16<\/td> #> <td class=\"gt_row gt_right\">6.66<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of estimated objects of class spqtest. — summary.spqtest","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"function summarizes estimated spqtest objects.   tables output include basic information test.   blablabla...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"","code":"# S3 method for spqtest summary(object, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"object spqtest object including list htest. ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"object class summary.spqtest","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"","code":"# Example 1: With coordinates N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(               spdep::knearneigh(cbind(cx, cy), k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1) summary(q.test) #> <div id=\"vrzdqffzog\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #vrzdqffzog .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #vrzdqffzog .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #vrzdqffzog .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #vrzdqffzog .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #vrzdqffzog .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #vrzdqffzog .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #vrzdqffzog .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #vrzdqffzog .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #vrzdqffzog .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #vrzdqffzog .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #vrzdqffzog .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #vrzdqffzog .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vrzdqffzog .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vrzdqffzog .gt_left { #>   text-align: left; #> } #>  #> #vrzdqffzog .gt_center { #>   text-align: center; #> } #>  #> #vrzdqffzog .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #vrzdqffzog .gt_font_normal { #>   font-weight: normal; #> } #>  #> #vrzdqffzog .gt_font_bold { #>   font-weight: bold; #> } #>  #> #vrzdqffzog .gt_font_italic { #>   font-style: italic; #> } #>  #> #vrzdqffzog .gt_super { #>   font-size: 65%; #> } #>  #> #vrzdqffzog .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #vrzdqffzog .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #vrzdqffzog .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #vrzdqffzog .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #vrzdqffzog .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_title gt_font_normal\" style>Qualitative Dependence Test (Q)<\/th> #>     <\/tr> #>     <tr> #>       <th colspan=\"11\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Distribution: asymptotic. Distance: Euclidean<\/th> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">Q<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">df<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">p.value<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">k<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">N<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">m<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">r<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">R/n<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">5k^m<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">V1 - standard-permutations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">89.02<\/td> #> <td class=\"gt_row gt_right\">26<\/td> #> <td class=\"gt_row gt_right\">0.00000<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">49<\/td> #> <td class=\"gt_row gt_right\">27<\/td> #> <td class=\"gt_row gt_right\">1.81<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"11\" class=\"gt_group_heading\">V1 - equivalent-combinations<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right\">2.38<\/td> #> <td class=\"gt_row gt_right\">9<\/td> #> <td class=\"gt_row gt_right\">0.98401<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">100<\/td> #> <td class=\"gt_row gt_right\">3<\/td> #> <td class=\"gt_row gt_right\">1<\/td> #> <td class=\"gt_row gt_right\">49<\/td> #> <td class=\"gt_row gt_right\">10<\/td> #> <td class=\"gt_row gt_right\">4.90<\/td> #> <td class=\"gt_row gt_right\">135<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> plot(q.test) #> [[1]]  #>  #> [[2]]  #>"}]
