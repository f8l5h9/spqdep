[{"path":"https://f8l5h9.github.io/spqdep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 spqdep authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"User Guide","text":"guide show functionalities spqdep package test spatial dependence qualitative datasets. Global local statistics give information spatial structure spatial dataset.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"datasets","dir":"Articles","previous_headings":"Introduction","what":"Datasets","title":"User Guide","text":"Three data sets used examples guide: provinces_spain: division Spain provinces. multypolygon geometry isolated provinces (Canary Balearic islands without neighbouring provinces). See example Paez et al. (2021). FastFood.sf: simple feature (sf) dataframe containing locations selection fast food restaurants city Toronto, Canada (data 2008). data set used example Ruiz, López, Páez (2010). geometry points. Boots.sf: simple features object. square regular lattice 16x16 Fig. 3.3 Upton Fingleton (1985). figure, cells coded black/white correspond quadrats perennial shrub Atriplex hymenelytra present/absent sample area Death Valley, California. package install like usual dataset can loaded using next code","code":"library(spqdep) data(\"provinces_spain\", package = \"spqdep\") data(\"FastFood.sf\", package = \"spqdep\") data(\"Boots.sf\", package = \"spqdep\")"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"data-generating-process","dir":"Articles","previous_headings":"Introduction","what":"Data Generating Process","title":"User Guide","text":"Additional datasets available spqdep package. user can generate structured spatial processes using function. DGP generate function defined Ruiz, López, Páez (2010). next code show generate random process set random points localized square 1×11 \\times 1. case, connectivity criteria based 4 nearest neighbourhood. next plot show qualitative spatial process defined.","code":"set.seed(123) N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) # proportion of classes rho = 0.5 # level of spatial structure listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(coor, k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) ggplot(data.frame(fx = fx, cx = cx, cy = cy), ggplot2::aes(x = cx, y = cy, color = fx)) +      geom_point(size = 6) +     theme_bw()"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"q-test","dir":"Articles","previous_headings":"","what":"Q-test","title":"User Guide","text":"Q-test simple, consistent, powerful statistic qualitative spatial independence develop using concepts symbolic dynamics symbolic entropy. Q test can used detect, given spatial distribution events, patterns spatial association qualitative variables wide variety settings. Q-test (Ruiz, López, Páez 2010) based m-surroundings apply Q-test necessary define set m-surroundings function generate set m-surrounding. user can tuning several parameters obtain congruent set m-surroundings. Q(m) statistic introduced Ruiz, López, Páez (2010) tool explore geographical co-location/co-occurrence qualitative data. Consider spatial variable X result qualitative process set number categorical outcomes aja_j (j=1,…,k). spatial variable observed set fixed locations indexed coordinates sis_i (=1,…, N), location si event observed, XiX_i takes one possible values aja_j. Since observations georeferenced, spatial embedding protocol can devised assess spatial property co-location. Let us define, observation specified location, say s0s_0, surrounding size m, called m-surrounding. m-surrounding set m-1 nearest neighbours perspective location s0s_0. case distance ties, secondary criterion can invoked based direction. embedding protocol adopted elements m-surrounding location s0s_0 determined, string can obtained collects elements local neighborhood (m-1 nearest neighbors) observation s0s_0. m-surrounding can represented following way: Xm(s0)=(Xs0,Xs1,...Xsm−1)X_m(s_0)=(X_{s_0},X_{s_1},...X_{s_{m-1}}) Since observation Xs takes one k possible values, m observations m-surrounding, exactly k possible unique ways values can co-locate. number permutations replacement. instance, k=2 (e.g. possible outcomes a1=0 a2=1) m=3, following eight unique patterns co-location possible (number symbols nσn_{\\sigma}=8): {0,0,0}, {1,0,0}, {0,1,0}, {0,0,1}, {1,1,0}, {1,0,1}, {0,1,1}, {1,1,1}. unique co-locationtype can denoted convenient way means symbol σi\\sigma_i(=1,2,...,km)(=1, 2,...,k^m). follows site can uniquely associated specific symbol, process termed symbolization. way, say location s type σi\\sigma_i Xm(s)=σiX_m(s)=\\sigma_i. Equivalent symbols (see Páez, et al. 2012) can obtained counting number occurrences category within m-surrounding. surrenders topological information (ordering within m-surrounding lost) favor compact set symbols, since number combinations replacement. Definition Q(m) statistic Let {Xs}s∈R\\{X_s\\}_{s \\R} discrete spatial process m fixed embedding dimension. statistic Q(m) testing null hypothesis: H0:{Xs}s∈RH_0:\\{X_s\\}_{s \\R} spatially independent, alternative. fixed m≥2m \\geq 2, relative frequency symbols can used define symbolic entropy spatial process Shanon entropy distinct symbols: h(m)=−∑jpσjln(pσj)h(m) = - \\sum_j p_{\\sigma_j}ln(p_{\\sigma_j}) $$p_{\\sigma_j}={ n_{\\sigma_j} \\R}$$ nσjn_{\\sigma_j} simply number times symbol σj\\sigma_j observed R number symbolized locations. entropy function bounded 0<h(m)≤η0 < h (m) \\leq \\eta. Q statistic essentially likelihood ratio test symbolic entropy observed pattern entropy system null hypothesis random spatial sequence: Q(m)=2R(η−h(m))Q(m)=2R(\\eta-h(m)) η=ln(km)\\eta = ln(k^m). statistic asymptotically $^2} distributed degrees freedom equal number symbols minus one.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"m-surroundings","dir":"Articles","previous_headings":"Q-test","what":"m-surroundings","title":"User Guide","text":"m.surround() function generate m-surroundings. output function object class m_surr Using method user can explore coherence m-surroundings times algorithm can generate degenerate m-surrounding far observations degree overlapping low. recommendation use control options. overlapping degree performance statistic can become compromised due overlap m-surroundings. meet key approximations testing, overlap controlled letting maximum number symbolized locations S less actual number observations N, r = 0 (.e., overlap allowed) exactly binomial random variables. Note maximum number locations can symbolized overlapping degree r $$R = { [{{|S|−m} \\{m-r}} ]} + 1$$, [x] denotes integer part real number x, |S| cardinality set S. Therefore, reducing degree overlap also implies number symbolized locations smaller number observations sample example, next code obtain m-surroundings length m = 3 degree overlapping r = 1:","code":"m = 3 r = 1 mh <- m.surround(x = cbind(cx,cy), m = m, r = r) class(mh) #> [1] \"m_surr\" \"list\""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"methods-for-the-m_surr-class","dir":"Articles","previous_headings":"Q-test > m-surroundings","what":"Methods for the m_surr class","title":"User Guide","text":"spqdep three methods can apply class: , ","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-print-method","dir":"Articles","previous_headings":"Q-test > m-surroundings > Methods for the m_surr class","what":"The print method","title":"User Guide","text":"list m-surroundings","code":"print(mh) #>       [,1] [,2] [,3] #>  [1,]    1   19   17 #>  [2,]    2   65   53 #>  [3,]    3   42   77 #>  [4,]    4   11   26 #>  [5,]    6   18   85 #>  [6,]    7   79   93 #>  [7,]    8   21   31 #>  [8,]   13   58   68 #>  [9,]   15   98   74 #> [10,]   17   76   96 #> [11,]   20   87   24 #> [12,]   22   82   92 #> [13,]   25    9   61 #> [14,]   26   14    7 #> [15,]   27   72   13 #> [16,]   31    5   20 #> [17,]   37   73   89 #> [18,]   38   30   15 #> [19,]   41   91   62 #> [20,]   46   47   49 #> [21,]   48   43   55 #> [22,]   49   29   60 #> [23,]   52   86    3 #> [24,]   53   97   69 #> [25,]   55   28   27 #> [26,]   56   64   41 #> [27,]   57   35   63 #> [28,]   60   44   70 #> [29,]   61   78   94 #> [30,]   62   54   46 #> [31,]   63   83   75 #> [32,]   67   50   37 #> [33,]   68   84    2 #> [34,]   69   59   22 #> [35,]   70   12   99 #> [36,]   71   34   67 #> [37,]   74   51    6 #> [38,]   75   36  100 #> [39,]   77   88    8 #> [40,]   85   80   57 #> [41,]   89   32    4 #> [42,]   90   45   38 #> [43,]   92   23   25 #> [44,]   93   39   95 #> [45,]   94   33   71 #> [46,]   95   81   90 #> [47,]   96   40   56 #> [48,]   99   10   48 #> [49,]  100   66   52"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-summary-method","dir":"Articles","previous_headings":"Q-test > m-surroundings > Methods for the m_surr class","what":"The summary method","title":"User Guide","text":"generate summary characteristics m-surroundings","code":"summary(mh) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 49 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 1 #>  #> List of no-symbolized observations: #> 16 #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 1 m-surrounding #>     There are 47 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.9592"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-plot-method","dir":"Articles","previous_headings":"Q-test > m-surroundings > Methods for the m_surr class","what":"The plot method","title":"User Guide","text":"show spatial structure m-surroundings  argument control user can tuning characteristics m-surroundings. example, control argument, user can ‘prune’ non-coherent m-surroundings.","code":"plot(mh, type = 1) control <- list (dtmaxknn = 10) mh.prune <- m.surround(x = coor, m = m, r = r, control = control) plot(mh.prune)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-q-test","dir":"Articles","previous_headings":"Q-test","what":"The Q-test","title":"User Guide","text":"function obtain Q-test spatial process develop Ruiz, López, Páez (2010). user must select longitude m-surroundings (m) overlapping degree (r). next code example, Q-test obtain DGP spatial process (fx) obtain . coordinates coor must included argument. output list result symbols based permutations (standard) combinations (equivalent). output function object spqtest class.","code":"q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"distribution-of-q-test","dir":"Articles","previous_headings":"Q-test","what":"Distribution of Q-test","title":"User Guide","text":"asymptotic distribution default distribution obtain significance Q-test (Ruiz, López, Páez 2010). Alternatively, Monte Carlo method can used obtain significance test. paper López Páez (2012) describe approach.","code":"q.test.mc <- Q.test(fx = fx, coor = coor, m = 3, r = 1, distr = \"mc\") summary(q.test.mc)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"methods-for-the-spqtest-class","dir":"Articles","previous_headings":"Q-test > Distribution of Q-test","what":"Methods for the spqtest class","title":"User Guide","text":"summary can apply object spqtest class: histogram number symbols obtain appling plot method.","code":"summary(q.test) plot(q.test) #> [[1]] #>  #> [[2]]"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-q-test-using-a-sf-object","dir":"Articles","previous_headings":"Q-test","what":"The Q-test using a sf object","title":"User Guide","text":"sf object (Pebesma 2018) data frame can used input function: method show histogram number symbols","code":"# Case 3: With a sf object with isolated areas sf_use_s2(FALSE) #> Spherical geometry (s2) switched off provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") f1 <- ~ Mal2Fml q.test.sf <- Q.test(formula = f1, data = provinces_spain, m = 3, r = 1) plot(q.test.sf) #> [[1]] #>  #> [[2]]"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"qmap-test","dir":"Articles","previous_headings":"","what":"QMap-test","title":"User Guide","text":"function obtain test maps comparison publish Ruiz, López, Páez (2012) next code generate two qualitative spatial process different levels spatial dependence Q-Map apply. output id object classes qmap htest","code":"p <- c(1/6,3/6,2/6) rho = 0.5 QY1 <- dgp.spq(p = p, listw = listw, rho = rho) rho = 0.8 QY2 <- dgp.spq(p = p, listw = listw, rho = rho) dt = data.frame(QY1,QY2) m = 3 r = 1 formula <- ~ QY1 + QY2 control <- list(dtmaxknn = 10) qmap <- Q.map.test(formula = formula, data = dt, coor = coor, m = m, r = r, type =\"combinations\", control = control) #> Warning in Q.map.test(formula = formula, data = dt, coor = coor, m = m, : The #> ratio between the number of symbolized observations and the number of symbols #> is lower than 5."},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"methods-for-qmap-class","dir":"Articles","previous_headings":"QMap-test","what":"Methods for qmap class","title":"User Guide","text":"qmap object list two elements. element object class htext method obtains distribution symbols confidence intervals specified user.","code":"print(qmap[[1]]) #>  #>  Q-Map test of Equivalence for qualitative data. #>   #>  Symbols type: combinations #>   #>  Ratio Symbolized observations/Num symbols = 4.6 #>  #> data:  QY1 and QY2 #> QE = 143.91, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided plot(qmap, ci=.6) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Use of `data$symb` is discouraged. #> ℹ Use `symb` instead."},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"runs-test","dir":"Articles","previous_headings":"","what":"Runs test","title":"User Guide","text":"spatial runs test compute global local test spatial independence categorical spatial data set (Ruiz, López, Páez 2021). Definition spatial run: section define concepts spatial encoding runs, construct main statistics necessary testing spatial homogeneity categorical variables. order develop general theoretical setting, let us consider {Xs}s∈S\\{X_s\\}_{s \\S} categorical spatial process interest Q different categories, S set coordinates. Spatial encoding: location s∈Ss \\S denote Ns={s1,s2...,sns}N_s = \\{s_1,s_2 ...,s_{n_s}\\} set neighbours according interaction scheme W, ordered lesser higher Euclidean distance respect location s. sequence Xsi,Xsi+1,...,,Xsi+rX_{s_i} , X_{s_i+1},...,, X_{s_i+r} elements value (identified class) called spatial run location s length r. spatial run statistic: total number runs defined : SRQ=n+∑s∈S∑j=1nsIjsSR^Q=n+\\sum_{s \\S}\\sum_{j=1}^{n_s}I_j^s Ijs=1ifXsj−1≠Xsjand 0 otherwiseI_j^s = 1 \\ \\ X_{s_j-1} \\neq X_{s_j} \\ \\text{0 otherwise} j=1,2,...,nsj=1,2,...,n_s Following result Central Limit Theorem, asymtotical distribution SRQSR^Q : SRQ=N(μSRQ,σSRQ)SR^Q = N(\\mu_{SR^Q},\\sigma_{SR^Q}) one-tailed case, must distinguish lower-tailed test upper-tailed, associated homogeneity heterogeneity respectively. case lower-tailed test, following hypotheses used: H0:{Xs}s∈SH_0:\\{X_s\\}_{s \\S} ..d. H1H_1: spatial distribution values categorical variable homogeneous null hypothesis (according fixed association scheme). upper-tailed test, following hypotheses used: H0:{Xs}s∈SH_0:\\{X_s\\}_{s \\S} ..d. H1H_1: spatial distribution values categorical variable heterogeneous null hypothesis (according fixed association scheme). hypotheses provide decision rule regarding degree homogeneity spatial distribution values spatial categorical random variable.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"global-runs-test","dir":"Articles","previous_headings":"Runs test","what":"Global Runs test","title":"User Guide","text":"function sp.runs.test obtain spatial runs test. output function object classes sprunstest htest","code":"listw <- knearneigh(coor, k = 3) srq <- sp.runs.test(fx = fx, listw = listw)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"methods-for-spruntest-class","dir":"Articles","previous_headings":"Runs test > Global Runs test","what":"Methods for spruntest class","title":"User Guide","text":"spqdep two methods class y","code":"print(srq) #>  #>  Runs test of spatial dependence for qualitative data. Asymptotic #>  version #>  #> data:  mxf #> sp.runs test = -1.9364, p-value = 0.05282 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            263.0000            285.5152            135.1986 plot(srq)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-local-runs-test","dir":"Articles","previous_headings":"Runs test","what":"The local Runs test","title":"User Guide","text":"function local.sp.runs.test obtain local tests based runs.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"asymptotic-version","dir":"Articles","previous_headings":"Runs test > The local Runs test","what":"Asymptotic version","title":"User Guide","text":"Asymptotic version method list statistic observation (points regions) method identify localization values local test significant.","code":"lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) #>     runs.i      E.i     Std.i    z.value    p.value #> 1        4 2.855152 0.8722689  1.3124950 0.90532341 #> 2        2 2.855152 0.8722689 -0.9803761 0.16345026 #> 3        2 2.855152 0.8722689 -0.9803761 0.16345026 #> 4        2 2.855152 0.8722689 -0.9803761 0.16345026 #> 5        2 2.855152 0.8722689 -0.9803761 0.16345026 #> 6        4 2.855152 0.8722689  1.3124950 0.90532341 #> 7        3 2.855152 0.8722689  0.1660594 0.56594492 #> 8        2 2.855152 0.8722689 -0.9803761 0.16345026 #> 9        4 2.855152 0.8722689  1.3124950 0.90532341 #> 10       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 11       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 12       3 2.855152 0.8722689  0.1660594 0.56594492 #> 13       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 14       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 15       3 2.855152 0.8722689  0.1660594 0.56594492 #> 16       3 2.855152 0.8722689  0.1660594 0.56594492 #> 17       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 18       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 19       4 2.855152 0.8722689  1.3124950 0.90532341 #> 20       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 21       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 22       3 2.855152 0.8722689  0.1660594 0.56594492 #> 23       3 2.855152 0.8722689  0.1660594 0.56594492 #> 24       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 25       3 2.855152 0.8722689  0.1660594 0.56594492 #> 26       3 2.855152 0.8722689  0.1660594 0.56594492 #> 27       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 28       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 29       4 2.855152 0.8722689  1.3124950 0.90532341 #> 30       3 2.855152 0.8722689  0.1660594 0.56594492 #> 31       3 2.855152 0.8722689  0.1660594 0.56594492 #> 32       3 2.855152 0.8722689  0.1660594 0.56594492 #> 33       4 2.855152 0.8722689  1.3124950 0.90532341 #> 34       3 2.855152 0.8722689  0.1660594 0.56594492 #> 35       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 36       3 2.855152 0.8722689  0.1660594 0.56594492 #> 37       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 38       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 39       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 40       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 41       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 42       3 2.855152 0.8722689  0.1660594 0.56594492 #> 43       4 2.855152 0.8722689  1.3124950 0.90532341 #> 44       3 2.855152 0.8722689  0.1660594 0.56594492 #> 45       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 46       3 2.855152 0.8722689  0.1660594 0.56594492 #> 47       4 2.855152 0.8722689  1.3124950 0.90532341 #> 48       4 2.855152 0.8722689  1.3124950 0.90532341 #> 49       4 2.855152 0.8722689  1.3124950 0.90532341 #> 50       3 2.855152 0.8722689  0.1660594 0.56594492 #> 51       3 2.855152 0.8722689  0.1660594 0.56594492 #> 52       3 2.855152 0.8722689  0.1660594 0.56594492 #> 53       3 2.855152 0.8722689  0.1660594 0.56594492 #> 54       4 2.855152 0.8722689  1.3124950 0.90532341 #> 55       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 56       4 2.855152 0.8722689  1.3124950 0.90532341 #> 57       3 2.855152 0.8722689  0.1660594 0.56594492 #> 58       3 2.855152 0.8722689  0.1660594 0.56594492 #> 59       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 60       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 61       3 2.855152 0.8722689  0.1660594 0.56594492 #> 62       3 2.855152 0.8722689  0.1660594 0.56594492 #> 63       3 2.855152 0.8722689  0.1660594 0.56594492 #> 64       3 2.855152 0.8722689  0.1660594 0.56594492 #> 65       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 66       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 67       4 2.855152 0.8722689  1.3124950 0.90532341 #> 68       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 69       3 2.855152 0.8722689  0.1660594 0.56594492 #> 70       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 71       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 72       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 73       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 74       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 75       3 2.855152 0.8722689  0.1660594 0.56594492 #> 76       3 2.855152 0.8722689  0.1660594 0.56594492 #> 77       3 2.855152 0.8722689  0.1660594 0.56594492 #> 78       4 2.855152 0.8722689  1.3124950 0.90532341 #> 79       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 80       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 81       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 82       4 2.855152 0.8722689  1.3124950 0.90532341 #> 83       3 2.855152 0.8722689  0.1660594 0.56594492 #> 84       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 85       3 2.855152 0.8722689  0.1660594 0.56594492 #> 86       4 2.855152 0.8722689  1.3124950 0.90532341 #> 87       3 2.855152 0.8722689  0.1660594 0.56594492 #> 88       3 2.855152 0.8722689  0.1660594 0.56594492 #> 89       4 2.855152 0.8722689  1.3124950 0.90532341 #> 90       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 91       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 92       4 2.855152 0.8722689  1.3124950 0.90532341 #> 93       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 94       3 2.855152 0.8722689  0.1660594 0.56594492 #> 95       1 2.855152 0.8722689 -2.1268116 0.01671787 #> 96       3 2.855152 0.8722689  0.1660594 0.56594492 #> 97       2 2.855152 0.8722689 -0.9803761 0.16345026 #> 98       3 2.855152 0.8722689  0.1660594 0.56594492 #> 99       3 2.855152 0.8722689  0.1660594 0.56594492 #> 100      3 2.855152 0.8722689  0.1660594 0.56594492 plot(lsrq, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"monte-carlo-local-runs-test","dir":"Articles","previous_headings":"Runs test > The local Runs test","what":"Monte Carlo local runs test","title":"User Guide","text":"Monte Carlo distribution ot local test using sf object","code":"data(\"provinces_spain\") listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") plot(provinces_spain[\"Mal2Fml\"]) formula <- ~ Mal2Fml # Boots Version lsrq <- local.sp.runs.test(formula = formula, data = provinces_spain, listw = listw, distr =\"bootstrap\", nsim = 199) plot(lsrq, sf = provinces_spain, sig = 0.10)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"the-scan-test","dir":"Articles","previous_headings":"","what":"The Scan test","title":"User Guide","text":"Two scan tests identify clusters can apply test spatial structure qualitative spatial processes. scan test don’t need pre-define classical W conectivity matrix. See Kanaroglou (2016) scan tests contrasts null independence spatial qualitative process give additional information indicating one (perhaps ) spatial cluster(s). scan tests don’t asymptotic distribution. significance obtained permutational resampling. output scan function object classes scantest htest","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"scan-bernoulli","dir":"Articles","previous_headings":"The Scan test","what":"Scan bernoulli","title":"User Guide","text":"qualitative spatial process two categories bernoulli scan test obtain next code","code":"formula <- ~ Mal2Fml scan.spain <- spqdep::scan.test(formula = formula, data = provinces_spain,                                  case=\"men\", nsim = 99, distr = \"bernoulli\") print(scan.spain) #>  #>  Scan test. Distribution: bernoulli #>  #> data:  Mal2Fml #> scan-loglik = 6.0359, p-value = 0.07 #> alternative hypothesis: High #> sample estimates: #>                                         #> Total observations in the MLC =   17.00 #> Expected cases in the MLC =       11.84 #> Observed cases in the MLC =       16.00"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"scan-test-with-flexible-windows","dir":"Articles","previous_headings":"The Scan test > Scan bernoulli","what":"Scan test with flexible windows","title":"User Guide","text":"flexible windows option. Note slow. Consider maximum nv 12.","code":"listw <- spdep::poly2nb(provinces_spain, queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar scan.spain <- spqdep::scan.test(formula = formula, data = provinces_spain,                                  case=\"men\", nsim = 99, windows = \"flexible\",                                  listw = listw, nv = 6, distr = \"bernoulli\") #> +++++end print(scan.spain) #>  #>  Scan test. Distribution: bernoulli #>  #> data:  Mal2Fml #> scan-loglik = 1.9464, p-value < 2.2e-16 #> alternative hypothesis: High #> sample estimates: #>                                          #> Total observations in the MLC =     6.00 #> Expected cases in the MLC =       370.74 #> Observed cases in the MLC =         6.00"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"scan-multinomial","dir":"Articles","previous_headings":"The Scan test","what":"Scan multinomial","title":"User Guide","text":"case spatial process three categories","code":"data(FastFood.sf) formula <- ~ Type scan.fastfood <- scan.test(formula = formula, data = FastFood.sf, nsim = 99, distr = \"multinomial\", windows = \"elliptic\",                             nv = 50) print(scan.fastfood) #>  #>  Scan test. Distribution: multinomial #>  #> data:  Type #> scan-loglik = 15.506, p-value < 2.2e-16 #> sample estimates: #>                  H     P     S Sum #> cases.expect 13.48 14.86 14.66  43 #> cases.observ 16.00  1.00 26.00  43"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"methods-for-scan-test","dir":"Articles","previous_headings":"The Scan test > Scan multinomial","what":"Methods for scan test","title":"User Guide","text":"Two method can used scantest objects: ","code":"summary(scan.fastfood) #>  #> Summary of data: #> Distribution....................: multinomial #> Number of locations.............: 877 #> Total number of cases...........: 877 #> Names of cathegories...........: H P S #> Total cases per category........: 275 303 299 #> Percent cases per category......: 0.31 0.35 0.34 #>  #> Scan statistic: #> Total cases in the MLC.........: 43 #> Names of cathegories...........: H P S #> Observed cases in the MLC......: 13.48 14.86 14.66 #> Expected cases in the MLC......: 16 1 26 #> Value of statistic (loglik ratio)....: 15.5058 #> p-value........................: 0 #>  #> IDs of cluster detect: #> Location IDs included.....:  68 849 152 499 630 763 827 765 617 600 607 48 58 588 743 843 74 122 750 115 645 61 226 796 876 699 610 597 596 721 751 53 186 659 778 63 106 229 585 738 612 131 208 #>  #>  #> Secondary Scan statistic. Number 1  #> Total cases in secondary cluster......:  16  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.25 0.5 0.25 #> Value of statisitic (loglik ratio)....: 11.5285 #> p-value.........................: 0.1 #> Location IDs included..................:  677 311 781 128 108 436 551 576 21 374 319 717 561 6 629 547 #>  #>  #> Secondary Scan statistic. Number 2  #> Total cases in secondary cluster......:  7  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.14 0.29 0.57 #> Value of statisitic (loglik ratio)....: 7.0038 #> p-value.........................: 0.96 #> Location IDs included..................:  158 709 335 801 749 545 856 #>  #>  #> Secondary Scan statistic. Number 3  #> Total cases in secondary cluster......:  17  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.35 0.35 0.29 #> Value of statisitic (loglik ratio)....: 6.8747 #> p-value.........................: 0.98 #> Location IDs included..................:  521 782 162 643 297 220 267 265 104 530 312 523 783 157 531 848 680 #>  #>  #> Secondary Scan statistic. Number 4  #> Total cases in secondary cluster......:  17  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.47 0.29 0.24 #> Value of statisitic (loglik ratio)....: 6.7961 #> p-value.........................: 0.98 #> Location IDs included..................:  190 837 555 711 646 216 17 390 742 563 307 4 353 197 254 192 66 #>  #>  #> Secondary Scan statistic. Number 5  #> Total cases in secondary cluster......:  10  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.4 0.2 0.4 #> Value of statisitic (loglik ratio)....: 6.5951 #> p-value.........................: 0.98 #> Location IDs included..................:  78 365 668 228 170 857 306 708 651 187 plot(scan.spain, sf = provinces_spain) data(FastFood.sf) # plot(scan.fastfood, sf = FastFood.sf)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"similarity-test","dir":"Articles","previous_headings":"","what":"Similarity test","title":"User Guide","text":"Farber, Marin, Paez (2015) develop similarity test. function calculates similarity test asymptotic distribution permutational resampling.","code":"coor <- st_coordinates(st_centroid(FastFood.sf)) listw <- spdep::knearneigh(coor, k = 4) formula <- ~ Type similarity <- similarity.test(formula = formula, data = FastFood.sf, listw = listw) print(similarity) #>  #>  Similarity test of spatial dependence for qualitative data. #>  Distribution: asymptotic #>  #> data:  Type #> Similarity-test = -5.4476, p-value = 5.105e-08 #> alternative hypothesis: two.sided"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"join-count-tests","dir":"Articles","previous_headings":"","what":"Join-count tests","title":"User Guide","text":"functions spdep R-package wrapped Bernoulli Multinomial distributions. Asymptotic Monte Carlo distributions (permutations) can used evaluate signification tests.","code":""},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"asyntotic-distribution","dir":"Articles","previous_headings":"Join-count tests","what":"Asyntotic distribution","title":"User Guide","text":"","code":"provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Mal2Fml jc1 <- jc.test(formula = f1, data = provinces_spain, distr = \"asymptotic\", alternative = \"greater\", zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar summary(jc1)"},{"path":"https://f8l5h9.github.io/spqdep/articles/user-guide.html","id":"monte-carlo-distribution","dir":"Articles","previous_headings":"Join-count tests","what":"Monte Carlo distribution","title":"User Guide","text":"","code":"jc1 <- jc.test(formula = f1, data = provinces_spain, distr = \"mc\", alternative = \"greater\", zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar summary(jc1)"},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fernando Lopez. Author, maintainer. Roman Minguez. Author. Antonio Paez. Author. Manuel Ruiz. Author.","code":""},{"path":"https://f8l5h9.github.io/spqdep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309 URL https://doi.org/10.1007/s10109-009-0100-1.","code":"@Article{,   title = {Testing for spatial association of qualitative data using symbolic dynamics},   author = {Manuel Ruiz and Fernando Lopez and Antonio Paez},   journal = {Journal of Geographical Systems},   year = {2010},   volume = {12},   number = {3},   pages = {281--309},   url = {https://doi.org/10.1007/s10109-009-0100-1}, }"},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"spqdata-1","dir":"","previous_headings":"","what":"spqdata","title":"Testing for Spatial Independence of Cross-Sectional Qualitative Data","text":"goal spqdep provide tools analysis spatial qualitative data.","code":""},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Testing for Spatial Independence of Cross-Sectional Qualitative Data","text":"can install released version spqdata CRAN : development version GitHub :","code":"#install.packages(\"spqdata\") # install.packages(\"devtools\") #devtools::install_github(\"f8l5h9/spqdata\")"},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"abstract","dir":"","previous_headings":"","what":"Abstract","title":"Testing for Spatial Independence of Cross-Sectional Qualitative Data","text":"Qualitative spatial variables important many fields research. However, unlike decades-worth research devoted spatial association quantitative variables, exploratory analysis spatial qualitative variables relatively less developed. objective present paper present new R-package test spatial dependence categorical spatial data. Several tests proposed, namely, classical joint count statistics, Q-test based symbolic dynamics, Scan-test based scan methodology new spatial test based spatial-runs. tests can applied categorical spatial cross-section data two categories asymptotic bootstrap permutation distribution implemented. R package completely documented, including several examples user-guide available vignette. package spqdep available CRAN ideal research teaching activities.","code":""},{"path":"https://f8l5h9.github.io/spqdep/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Testing for Spatial Independence of Cross-Sectional Qualitative Data","text":"basic example shows solve common problem","code":"library(spqdep) N <- 200 set.seed(1234) cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/3,2/3) rho <- 0.9 control <- list(seedinit = 1234) fx <- dgp.spq(p = p, listw = listw, rho = rho,control = control) scan <- scan.test(fx = fx, nsim = 199, case = \"A\", nv = 100, coor = cbind(cx,cy), distr = \"bernoulli\", windows=\"elliptic\") print(scan) #>  #>  Scan test. Distribution: bernoulli #>  #> data:  fx #> scan-loglik = 12.727, p-value < 2.2e-16 #> alternative hypothesis: High #> sample estimates: #>                                          #> Total observations in the MLC =    21.00 #> Expected cases in the MLC =       103.85 #> Observed cases in the MLC =        17.00 summary(scan) #>  #> Summary of data: #> Distribution....................: bernoulli #> Type of cluster (alternative)...: High #> Number of locations.............: 200 #> Cathegory case..................: A #> Total number of observations....: 67 #> Names of cathegories............: A B #> Total per category..............: 67 133 #> Percent per category............: 0.34 0.66 #> --------------------------------- #>  #> Scan statistic: Most Likely Cluster #> Total observations in the MLC........: 21 #> Names of cathegories.................: A B #> Percent per category total...........: 0.34 0.66 #> Percent per category inside cluster..: 0.81 0.19 #> Value of statisitic (loglik ratio)...: 12.7268 #> p-value..............................: 0 #>  #> IDs of cluster detect: #> Location IDs included...:  110 112 1 193 165 95 89 91 59 35 85 78 37 51 152 19 83 32 30 133 105 #> --------------------------------- #>  #>  #> Secondary Cluster. Number 1  #> Total observations in secondary cluster.:  5  #> Names of cathegories.................: A B #> Percent per category total...........: 0.34 0.66 #> Percent per category inside cluster..: 0 1 #> Value of statisitic (loglik ratio)...: 4.4561 #> p-value..............................: 0.75 #> Location IDs included................:  62 69 75 186 98 #>  #>  #> Secondary Cluster. Number 2  #> Total observations in secondary cluster.:  4  #> Names of cathegories.................: A B #> Percent per category total...........: 0.34 0.66 #> Percent per category inside cluster..: 0 1 #> Value of statisitic (loglik ratio)...: 3.3265 #> p-value..............................: 0.975 #> Location IDs included................:  116 124 117 185 #>  #>  #> Secondary Cluster. Number 3  #> Total observations in secondary cluster.:  6  #> Names of cathegories.................: A B #> Percent per category total...........: 0.34 0.66 #> Percent per category inside cluster..: 0.17 0.83 #> Value of statisitic (loglik ratio)...: 2.343 #> p-value..............................: 0.995 #> Location IDs included................:  38 164 43 8 88 79 #>  #>  #> Secondary Cluster. Number 4  #> Total observations in secondary cluster.:  6  #> Names of cathegories.................: A B #> Percent per category total...........: 0.34 0.66 #> Percent per category inside cluster..: 0.67 0.33 #> Value of statisitic (loglik ratio)...: 2.343 #> p-value..............................: 0.995 #> Location IDs included................:  44 191 70 160 11 84 #>  #>  #> Secondary Cluster. Number 5  #> Total observations in secondary cluster.:  6  #> Names of cathegories.................: A B #> Percent per category total...........: 0.34 0.66 #> Percent per category inside cluster..: 0.67 0.33 #> Value of statisitic (loglik ratio)...: 2.343 #> p-value..............................: 0.995 #> Location IDs included................:  129 177 162 56 31 77 plot(scan)"},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Boots.sf. — Boots.sf","title":"Boots.sf. — Boots.sf","text":"simple features object square regular lattice 16x16. Fig. 3.3 Upton Fingleton (1985). figure, cells coded black/white correspond quadrats perennial shrub Atriplex hymenelytra present/absent sample area Death Valley, California.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boots.sf. — Boots.sf","text":"","code":"data(Boots.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Boots.sf. — Boots.sf","text":"simple features dataframe 256 rows 1 column: BW factor two levels: Black White","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Boots.sf. — Boots.sf","text":"Boots, B. (2003) Developing local measures spatial association categorical data, Journal Geographical Systems, 5(2), 139-160. doi:10.1007/s10109-003-0110-3","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boots.sf. — Boots.sf","text":"Boots, B. (2003). Developing local measures spatial association categorical data. Journal Geographical Systems, 5(2), 139-160. doi:10.1007/s10109-003-0110-3 Upton G., Fingleton B. (1985) Spatial data analysis example. Volume 1: Point pattern quantitative data. John Wiley & Sons, Chichester","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Boots.sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boots.sf. — Boots.sf","text":"","code":"data(Boots.sf)  summary(Boots.sf) #>  BW           hexs     #>  B: 66   POLYGON:256   #>  W:190   epsg:NA:  0"},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of fast food restaurants in Toronto — FastFood.sf","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"simple feature (sf) dataframe containing locations selection fast food restaurants city Toronto, Canada (data 2008). data projected using EPSG: 26917 (WGS 84/UTM Zone 17N).","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"","code":"data(FastFood.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"simple features object 614 rows 3 variables: ID Unique identifier record. Class Factor 3 types fast food restaurants: [P]izza, [S]andwich, [H]amburger geometry Geometry simple features.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"Ruiz et al. (2010) https://link.springer.com/article/10.1007/s10109-009-0100-1","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/FastFood.sf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Selection of fast food restaurants in Toronto — FastFood.sf","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"function compute QE QI tests maps comparison based symbolic entropy.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"","code":"Q.map.test(formula = formula, data = data, coor = NULL, m = m, r = 1, type = \"combinations\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"formula symbolic description two factors. data (optional) data frame sf object containing variables testing . coor (optional) 2xN vector coordinates. m length m-surrounding. r maximum overlapping two m-surroundings (default = 1). type Type symbols: \"permutations\" \"combinations\". Default \"combinations\" control Optional argument. See Control Argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"list two objects class htest. first one QE test Equivalence maps second one QI test independence maps. elements test :","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"data sf object coor argument coordinates observation must included.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"Several parameters construct m-surrounding dtmaxabs Delete degenerate surrounding based absolute distance observations. dtmaxpc value 0 1. Delete degenerate surrounding based distance. Delete m-surrounding maximum distance observation upper k percentage maximum distance anywhere observation. dtmaxknn integer value 'k'. Delete degenerate surrounding based near neighborhood criteria. Delete m-surrounding element m-surrounding include set k near neighborhood first element seedinit seed select initial element star algorithm compute m-surroundings.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"Ruiz M, López FA Páez (2011). Comparison Thematic Maps Using Symbolic Entropy. International Journal Geographical Information Science, 26, 413-439. Ruiz, M., López, FA, Páez, . (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems, 12(3), 281-309.0.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.map.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the QE and QI tests of Equivalence and Independence between maps — Q.map.test","text":"","code":"# Case 1: N <- 200 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::nb2listw(spdep::knn2nb(            spdep::knearneigh(cbind(cx,cy), k = 4))) p <- c(1/6, 3/6, 2/6) rho = 0.5 QY1 <- dgp.spq(p = p, listw = listw, rho = rho) rho = 0.8 QY2 <- dgp.spq(p = p, listw = listw, rho = rho) dt = data.frame(QY1,QY2) m = 3 r = 1 formula <- ~ QY1 + QY2 control <- list(dtmaxknn = 10) qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"combinations\", control = control) print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 8.9 #>  #> data:  QY1 and QY2 #> QE = 268.15, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 8.9 #>  #> data:  QY1 and QY2 #> QI = 68.59, df = 81, p-value = 0.8356 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead.  plot(qmap, ci=.6) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead.  plot(qmap[[1]]$mh)  summary(qmap[[1]]$mh) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 89 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 14 #>  #> List of no-symbolized observations: #> 13 16 19 31 43 65 72 77 105 121 166 182 198 200 #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 0 m-surrounding #>     There are 12 m-surrounding that have intersection with 1 m-surrounding #>     There are 75 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.8202  control <- list(dtmaxknn = 20) qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"permutations\", control = control) #> Warning: The ratio between the number of symbolized observations and the number of symbols is lower than 5. print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: permutations #> \t #> \tRatio Symbolized observations/Num symbols = 3.48 #>  #> data:  QY1 and QY2 #> QE = 286.12, df = 26, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: permutations #> \t #> \tRatio Symbolized observations/Num symbols = 3.48 #>  #> data:  QY1 and QY2 #> QI = 228.2, df = 676, p-value = 1 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values.  plot(qmap[[1]]$mh)  qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"combinations\") print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.9 #>  #> data:  QY1 and QY2 #> QE = 292.04, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 9.9 #>  #> data:  QY1 and QY2 #> QI = 74.839, df = 81, p-value = 0.6715 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values.  control <- list(dtmaxknn = 10) qmap <- Q.map.test(formula = formula, data = dt, coor = x, m = m, r = r,                    type =\"combinations\", control = control) print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 8.9 #>  #> data:  QY1 and QY2 #> QE = 268.15, df = 9, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 8.9 #>  #> data:  QY1 and QY2 #> QI = 68.59, df = 81, p-value = 0.8356 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead.   # Case 2: data(provinces_spain) # sf::sf_use_s2(FALSE) m = 3 r = 1  provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") provinces_spain$Coast <- factor(provinces_spain$Coast) levels(provinces_spain$Coast) = c(\"no\",\"yes\") formula <- ~ Coast + Mal2Fml qmap <- Q.map.test(formula = formula, data = provinces_spain, m = m, r = r,                    type =\"combinations\") print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 6 #>  #> data:  Coast and Mal2Fml #> QE = 71.83, df = 3, p-value = 1.731e-15 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 6 #>  #> data:  Coast and Mal2Fml #> QI = 7.5057, df = 9, p-value = 0.5846 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap) #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: Use of `data$symb` is discouraged. #> ℹ Use `symb` instead. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values.  plot(qmap[[1]]$mh)   control <- list(dtmaxknn = 6) qmap <- Q.map.test(formula = formula, data = provinces_spain, m = m, r = r,                    type =\"combinations\", control = control) print(qmap) #> [[1]] #>  #> \tQ-Map test of Equivalence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 5 #>  #> data:  Coast and Mal2Fml #> QE = 58.615, df = 3, p-value = 1.162e-12 #> alternative hypothesis: two.sided #>  #>  #> [[2]] #>  #> \tQ-Map test of Independence for qualitative data. #> \t #> \tSymbols type: combinations #> \t #> \tRatio Symbolized observations/Num symbols = 5 #>  #> data:  Coast and Mal2Fml #> QI = 7.1454, df = 9, p-value = 0.622 #> alternative hypothesis: two.sided #>  #>  #> attr(,\"class\") #> [1] \"qmap\" \"list\" plot(qmap[[1]]$mh)  summary(qmap[[1]]$mh) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 20 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 8 #>  #> List of no-symbolized observations: #> 7 13 19 20 34 35 37 48 #>  #> List of the degree overlaping: #>     There are 4 m-surrounding that have intersection with 1 m-surrounding #>     There are 16 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.8"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute Q test for spatial qualitative data — Q.test","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"function compute Q test spatial qualitative data.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"","code":"Q.test(formula = NULL, data = NULL, na.action, fx = NULL, coor = NULL, m = 3, r = 1, distr = \"asymptotic\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"formula symbolic description factor(s). data (optional) data frame sf object points/multipolygons geometry containing variable(s) tested. na.action action NA values fx factor  matrix factors columns coor (optional) 2xN vector spatial coordinates. Used data spatial object m length m-surrounding (default = 3). r asimtotic distribution. Maximum overlapping two m-surroundings (default = 1). distr character. Distribution type \"asymptotic\" (default) \"mc\". control Optional argument. See Control Argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"list two object class htest. element list return :","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"Q-test simple, consistent, powerful statistic qualitative spatial independence develop using concepts symbolic dynamics symbolic entropy. Q test can used detect, given spatial distribution events, patterns spatial association qualitative variables wide variety settings.  Q(m) statistic introduced Ruiz et al. (2010) tool explore geographical co-location/co-occurrence qualitative data. Consider spatial variable X result qualitative process set number categorical outcomes \\(a_j\\) (j=1,...,k). spatial variable observed set fixed locations indexed coordinates \\(s_i\\) (=1,..., N), location si event observed, \\(X_i\\) takes one possible values \\(a_j\\). Since observations georeferenced, spatial embedding protocol can devised assess spatial property co-location. Let us define, observation specified location, say \\(s_0\\), surrounding size m, called m-surrounding. m-surrounding set m-1 nearest neighbours perspective location \\(s_0\\). case distance ties, secondary criterion can invoked based direction. embedding protocol adopted elements m-surrounding location \\(s_0\\) determined, string can obtained collects elements local neighborhood (m-1 nearest neighbors) observation \\(s_0\\). m-surrounding can represented following way: $$X_m(s_0)=(X_{s_0},X_{s_1},...X_{s_{m-1}})$$ Since observation Xs takes one k possible values, m observations m-surrounding, exactly k possible unique ways values can co-locate. number permutations replacement. instance, k=2 (e.g. possible outcomes a1=0 a2=1) m=3, following eight unique patterns co-location possible (number symbols \\(n_{\\sigma}\\)=8): (0,0,0), (1,0,0), (0,1,0), (0,0,1), (1,1,0), (1,0,1), (0,1,1), (1,1,1). unique co-locationtype can denoted convenient way means symbol \\(\\sigma_i\\) \\((=1, 2,...,k^m)\\). follows site can uniquely associated specific symbol, process termed symbolization. way, say location s type \\(\\sigma_i\\) \\(X_m(s)=\\sigma_i\\). Equivalent symbols (see Páez, et al. 2012) can obtained counting number occurrences category within m-surrounding. surrenders topological information (ordering within m-surrounding lost) favor compact set symbols, since number combinations replacement.Definition Q(m) statistic Let \\(\\{X_s\\}_{s \\R}\\) discrete spatial process m fixed embedding dimension. statistic Q testing null hypothesis: \\(H_0:\\{X_s\\}_{s \\R}\\) spatially independent, alternative. fixed \\(m \\geq 2\\), relative frequency symbols can used define symbolic entropy spatial process Shanon entropy distinct symbols: $$h(m) = - \\sum_j p_{\\sigma_j}ln(p_{\\sigma_j})$$ $$p_{\\sigma_j}={ n_{\\sigma_j} \\R}$$ \\(n_{\\sigma_j}\\) simply number times symbol \\(\\sigma_j\\) observed R number symbolized locations. entropy function bounded \\(0 < h (m) \\leq \\eta\\). Q statistic essentially likelihood ratio test symbolic entropy observed pattern entropy system null hypothesis random spatial sequence: $$Q(m)=2R(\\eta-h(m))$$ \\(\\eta = ln(k^m)\\). statistic asymptotically \\(\\chi^2\\) distributed degrees freedom equal number symbols minus one.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"distance character select type distance. Default = \"Euclidean\" Cartesian coordinates : one Euclidean, Hausdorff Frechet; geodetic coordinates, great circle distances computed (see sf::st_distance()) dtmaxabs Delete degenerate surrounding based absolute distance observations. dtmaxpc value 0 1. Delete degenerate surrounding based distance. Delete m-surrounding maximum distance observation upper k percentage maximum distance anywhere observation. dtmaxknn integer value 'k'. Delete degenerate surrounding based near neighbourhood criteria. Delete m-surrounding element m-surrounding include set k near neighbourhood first element nsim number simulations get Monte Carlo distribution. Default = 999 seedinit seed select initial element star algorithm get compute m-surroundings start simulation","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"standard-permutation-vs-equivalent-combination-symbols","dir":"Reference","previous_headings":"","what":"Standard-Permutation vs Equivalent-Combination Symbols","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"symbolization protocol proposed Ruiz et al. (2010) - call Standard-Permutation Symbols — contains large amount topological information regarding units analysis, including proximity direction. sense, protocol fairly general. hand, easy see combinatorial possibilities can quickly become unmanageable. process k = 3 outcomes m = 5, number symbols becomes \\(3^5 = 243\\); k = 6 m = 4  \\(6^4 = 1,296\\). Depending number observations N, explosion number symbols can rapidly consume degrees freedom hypothesis testing, rule thumb recommended number symbolized locations least five times number symbols used (e.g., \\(R \\geq 5k^m\\)), R usually fraction N. alternative, propose symbolization protocol sacrifices amount topological detail conciseness. alternative based standard scheme; however, instead retaining proximity direction relationships, maintains total number occurrences outcome m-surrounding. call Equivalent-Combination Symbols. order sequence considered protocol, instead permutation repetition, number symbols reflects combination repetition.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"selection-of-m-surrounding-with-controlled-degree-of-overlapping-r-","dir":"Reference","previous_headings":"","what":"Selection of m-surrounding with Controlled Degree of Overlapping (r)","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"select S locations analysis, coordinates selected two coordinates \\(s_i\\) , \\(s_j\\) number overlapping nearest neighbours \\(s_i\\) \\(s_j\\) r. set S, subset observations N, defined recursively follows. First choose location \\(s_0\\) random fix integer r \\(0 \\leq r < m\\). integer r degree overlap, maximum number observations contiguous m-surroundings allowed common. Let \\( \\{s_1^0, s_2^0,...,s_{m-1}^0 \\}\\) set nearest neighbours \\(s_0\\), \\(s_i^0\\) ordered distance \\(s_0\\), angle case ties. Let us call \\(s_1 = s_{m-r-1}^0\\) define \\( A_0 = \\{s_0,s_0^1,...,s^0_{m-r-2} \\}  \\) . Take set nearest neighbours \\(s_1\\), namely, \\( \\{ s_1^1, s_2^1,...,s^1_{m-1} \\} \\) set locations \\(S \\setminus A_0 \\) define \\(s_2=s^1_{m-r-1} \\). >1 define \\(s_i = s^{-1}_{m-r-1}\\) \\(s^{-1}_{m-r-1}\\) ser nearest neighbors \\(s_{-1}\\), \\( \\{ s_1^{-1},s_2^{-1},...,s_{m-1}^{-1} \\} \\) ,set \\(S \\setminus \\{ \\cup_{j=0}^{-1} A_j \\} \\). Continue process locations symbolize.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"selection-of-m-surroundings-for-bootstrap-distribution","dir":"Reference","previous_headings":"","what":"Selection of m-surroundings for bootstrap distribution","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"bootstrapped-based testing can provide advantage since overlapping m-surroundings consideration, full sample can used.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309 López, FA, Páez. (2012). Distribution-free inference Q(m) based permutational bootstrapping: application spatial co-location pattern firms Madrid Estadística Española, 177, 135-156.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/Q.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to compute Q test for spatial qualitative data — Q.test","text":"","code":"# Case 1: With coordinates N <- 200 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.3 listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(cbind(cx,cy), k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1) summary(q.test)     Qualitative Dependence Test (Q)     Distribution: asymptotic. Distance: Euclidean     Q       df       p.value       k       N       m       r       R       n       R/n       5k^m     V1 - standard-permutations     26.07 26 0.45920 3 200 3 1 99 27 3.67 135V1 - equivalent-combinations     14.68 9 0.10003 3 200 3 1 99 10 9.90 135plot(q.test) #> [[1]]  #>  #> [[2]]  #>  print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable V1  m =  3  r =  1 #> Qp = 26.071, df = 26, p-value = 0.4592 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable V1  m =  3  r =  1 #> Qc = 14.683, df = 9, p-value = 0.1 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    # \\donttest{ q.test.mc <- Q.test(fx = fx, coor = coor, m = 3, distr = \"mc\", control = list(nsim = 999)) summary(q.test.mc)     Qualitative Dependence Test (Q)     Distribution: mc. Distance: Euclidean     Q       p.value       k       N       m       R       n       R/n       5k^m     V1 - standard-permutations     85.76 0.00000 3 200 3 200 27 7.41 135V1 - equivalent-combinations     73.67 0.00000 3 200 3 200 10 20.00 135plot(q.test.mc) #> [[1]]  #>  #> [[2]]  #>  print(q.test.mc) #> [[1]] #>  #> \tQp (mc distrib.) for symbolization based on permutations #>  #> data:  Variable V1  m =  3  r =  2 #> Qp = 85.761, df = NA, p-value < 2.2e-16 #>  #>  #> [[2]] #>  #> \tQc (mc distrib.) for symbolization based on combinations #>  #> data:  Variable V1  m =  3  r =  2 #> Qc = 73.672, df = NA, p-value < 2.2e-16 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"      # Case 2: With a sf object data(\"FastFood.sf\") f1 <- ~ Type q.test <- Q.test(formula = f1, data = FastFood.sf, m = c(3, 4), r = c(1, 2, 3), control = list(distance =\"Euclidean\")) summary(q.test)     Qualitative Dependence Test (Q)     Distribution: asymptotic. Distance: Euclidean     Q       df       p.value       k       N       m       r       R       n       R/n       5k^m     Type - standard-permutations     40.10 26 0.03812 3 877 3 1 438 27 16.22 13571.71 26 0.00000 3 877 3 2 875 27 32.41 13589.02 80 0.22966 3 877 4 1 292 81 3.60 405115.69 80 0.00559 3 877 4 2 437 81 5.40 405151.65 80 0.00000 3 877 4 3 874 81 10.79 405Type - equivalent-combinations     26.51 9 0.00169 3 877 3 1 438 10 43.80 13564.67 9 0.00000 3 877 3 2 875 10 87.50 13528.83 14 0.01102 3 877 4 1 292 15 19.47 40544.19 14 0.00006 3 877 4 2 437 15 29.13 40581.26 14 0.00000 3 877 4 3 874 15 58.27 405plot(q.test) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>  #> [[5]]  #>  #> [[6]]  #>  #> [[7]]  #>  #> [[8]]  #>  #> [[9]]  #>  #> [[10]]  #>  print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  3  r =  1 #> Qp = 40.102, df = 26, p-value = 0.03812 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  3  r =  1 #> Qc = 26.507, df = 9, p-value = 0.001687 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  3  r =  2 #> Qp = 71.712, df = 26, p-value = 3.725e-06 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  3  r =  2 #> Qc = 64.671, df = 9, p-value = 1.672e-10 #>  #>  #> [[5]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  4  r =  1 #> Qp = 89.017, df = 80, p-value = 0.2297 #>  #>  #> [[6]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  4  r =  1 #> Qc = 28.831, df = 14, p-value = 0.01102 #>  #>  #> [[7]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  4  r =  2 #> Qp = 115.69, df = 80, p-value = 0.005592 #>  #>  #> [[8]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  4  r =  2 #> Qc = 44.19, df = 14, p-value = 5.516e-05 #>  #>  #> [[9]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Type  m =  4  r =  3 #> Qp = 151.65, df = 80, p-value = 2.375e-06 #>  #>  #> [[10]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Type  m =  4  r =  3 #> Qc = 81.256, df = 14, p-value = 1.654e-11 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     # Case 3: With a sf object with isolated areas data(\"provinces_spain\") sf::sf_use_s2(FALSE) #> Spherical geometry (s2) switched off provinces_spain$Mal2Fml<- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Mal2Fml q.test <- Q.test(formula = f1, data = provinces_spain, m = 3, r = 1, control = list(seedinit = 1111)) summary(q.test)     Qualitative Dependence Test (Q)     Distribution: asymptotic. Distance: Euclidean     Q       df       p.value       k       N       m       r       R       n       R/n       5k^m     Older - standard-permutations     29.40 26 0.29320 3 50 3 1 24 27 0.89 135Older - equivalent-combinations     8.95 9 0.44166 3 50 3 1 24 10 2.40 135Mal2Fml - standard-permutations     4.34 7 0.74025 2 50 3 1 24 8 3.00 40Mal2Fml - equivalent-combinations     0.69 3 0.87543 2 50 3 1 24 4 6.00 40print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Older  m =  3  r =  1 #> Qp = 29.4, df = 26, p-value = 0.2932 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Older  m =  3  r =  1 #> Qc = 8.9526, df = 9, p-value = 0.4417 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable Mal2Fml  m =  3  r =  1 #> Qp = 4.3369, df = 7, p-value = 0.7403 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable Mal2Fml  m =  3  r =  1 #> Qc = 0.69051, df = 3, p-value = 0.8754 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    plot(q.test) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>  q.test.mc <- Q.test(formula = f1, data = provinces_spain, m = 4, r = 3, distr = \"mc\", control = list(seedinit = 1111)) summary(q.test.mc)     Qualitative Dependence Test (Q)     Distribution: mc. Distance: Euclidean     Q       p.value       k       N       m       R       n       R/n       5k^m     Older - standard-permutations     92.28 0.26200 3 50 4 50 81 0.62 405Older - equivalent-combinations     20.10 0.46800 3 50 4 50 15 3.33 405Mal2Fml - standard-permutations     18.06 0.45800 2 50 4 50 16 3.12 80Mal2Fml - equivalent-combinations     6.35 0.31300 2 50 4 50 5 10.00 80print(q.test.mc) #> [[1]] #>  #> \tQp (mc distrib.) for symbolization based on permutations #>  #> data:  Variable Older  m =  4  r =  3 #> Qp = 92.278, df = NA, p-value = 0.262 #>  #>  #> [[2]] #>  #> \tQc (mc distrib.) for symbolization based on combinations #>  #> data:  Variable Older  m =  4  r =  3 #> Qc = 20.096, df = NA, p-value = 0.468 #>  #>  #> [[3]] #>  #> \tQp (mc distrib.) for symbolization based on permutations #>  #> data:  Variable Mal2Fml  m =  4  r =  3 #> Qp = 18.062, df = NA, p-value = 0.458 #>  #>  #> [[4]] #>  #> \tQc (mc distrib.) for symbolization based on combinations #>  #> data:  Variable Mal2Fml  m =  4  r =  3 #> Qc = 6.3535, df = NA, p-value = 0.313 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    plot(q.test.mc) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>   # Case 4: Examples with multipolygons library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is FALSE fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 qb79 <- quantile(nc$BIR79) nc$QBIR79 <- (nc$BIR79 > qb79[2]) + (nc$BIR79 > qb79[3]) + (nc$BIR79 >= qb79[4]) + 1 nc$QBIR79 <- as.factor(nc$QBIR79) plot(nc[\"QBIR79\"], pal = c(\"#FFFEDE\",\"#FFDFA2\", \"#FFA93F\", \"#D5610D\"),      main = \"BIR79 (Quartiles)\")  sid79 <- quantile(nc$SID79) nc$QSID79 <- (nc$SID79 > sid79[2]) + (nc$SID79 > sid79[3]) + (nc$SID79 >= sid79[4]) + 1 nc$QSID79 <- as.factor(nc$QSID79) plot(nc[\"QSID79\"], pal = c(\"#FFFEDE\",\"#FFDFA2\", \"#FFA93F\", \"#D5610D\"),      main = \"SID79 (Quartiles)\")  f1 <- ~ QSID79 + QBIR79 lq1nc <- Q.test(formula = f1, data = nc, m = 5, r = 2, control = list(seedinit = 1111, dtmaxpc = 0.5, distance = \"Euclidean\") ) #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  print(lq1nc) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qp = 225.84, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qc = 61.371, df = 55, p-value = 0.2583 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qp = 221.81, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qc = 59.272, df = 55, p-value = 0.3226 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     lq2nc <- Q.test(formula = f1, data = nc, m = 5, r = 2, control = list(dtmaxpc = 0.2) ) #>  #>  Threshold distance:  1.65441 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  3  #>  #>  Index of spatial observations excluded:  19 3 28  #>  #>  Threshold distance:  1.65441 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  3  #>  #>  Index of spatial observations excluded:  19 3 28  print(lq2nc) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qp = 210.14, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qc = 62.831, df = 55, p-value = 0.2186 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qp = 206.72, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qc = 60.539, df = 55, p-value = 0.2828 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     lq3nc <- Q.test(formula = f1, data = nc, m = 5, r = 2, control = list(dtmaxknn = 5) ) print(lq3nc) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qp = 43.935, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QSID79  m =  5  r =  2 #> Qc = 18.923, df = 55, p-value = 1 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qp = 44.361, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable QBIR79  m =  5  r =  2 #> Qc = 20.16, df = 55, p-value = 1 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"     # Case 5: Examples with points and matrix of variables fx <- matrix(c(nc$QBIR79, nc$QSID79), ncol = 2, byrow = TRUE) mctr <- suppressWarnings(sf::st_centroid(st_geometry(nc))) mcoor <- st_coordinates(mctr)[,c(\"X\",\"Y\")] q.test <- Q.test(fx = fx, coor = mcoor, m = 5, r = 2,                  control = list(seedinit = 1111, dtmaxpc = 0.5)) #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  #>  #>  Threshold distance:  4.136024 #>  None m-surrounding excluded for exceeding #>         the threshold distance  print(q.test) #> [[1]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable V1  m =  5  r =  2 #> Qp = 221.87, df = 1023, p-value = 1 #>  #>  #> [[2]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable V1  m =  5  r =  2 #> Qc = 55.411, df = 55, p-value = 0.4591 #>  #>  #> [[3]] #>  #> \tQp (asymptotic distrib.) for standard symbolization based on #> \tpermutations #>  #> data:  Variable V2  m =  5  r =  2 #> Qp = 220.68, df = 1023, p-value = 1 #>  #>  #> [[4]] #>  #> \tQc (asymptotic distrib.) for equivalent symbolization based on #> \tcombinations #>  #> data:  Variable V2  m =  5  r =  2 #> Qc = 38.975, df = 55, p-value = 0.9498 #>  #>  #> attr(,\"class\") #> [1] \"spqtest\" \"list\"    plot(q.test) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>   # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to create symbols — cr_symb","title":"A function to create symbols — cr_symb","text":"function obtains set symbols get Q-statistic","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to create symbols — cr_symb","text":"","code":"cr_symb(k = k, m = m)"},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to create symbols — cr_symb","text":"k number categories m length m-surrounding","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to create symbols — cr_symb","text":"list two types symbols. Permutation Combinations-totals","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to create symbols — cr_symb","text":"...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to create symbols — cr_symb","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/cr_symb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to create symbols — cr_symb","text":"","code":"# Example 1: Obtain symbols for k=2 classes and m-surroundings of size 5 symb25 <- cr_symb(2,5) symb25$p_symb # Permutations symbols #>        [,1] [,2] [,3] [,4] [,5] #> Perm1     1    1    1    1    1 #> Perm2     1    1    1    1    2 #> Perm3     1    1    1    2    1 #> Perm4     1    1    1    2    2 #> Perm5     1    1    2    1    1 #> Perm6     1    1    2    1    2 #> Perm7     1    1    2    2    1 #> Perm8     1    1    2    2    2 #> Perm9     1    2    1    1    1 #> Perm10    1    2    1    1    2 #> Perm11    1    2    1    2    1 #> Perm12    1    2    1    2    2 #> Perm13    1    2    2    1    1 #> Perm14    1    2    2    1    2 #> Perm15    1    2    2    2    1 #> Perm16    1    2    2    2    2 #> Perm17    2    1    1    1    1 #> Perm18    2    1    1    1    2 #> Perm19    2    1    1    2    1 #> Perm20    2    1    1    2    2 #> Perm21    2    1    2    1    1 #> Perm22    2    1    2    1    2 #> Perm23    2    1    2    2    1 #> Perm24    2    1    2    2    2 #> Perm25    2    2    1    1    1 #> Perm26    2    2    1    1    2 #> Perm27    2    2    1    2    1 #> Perm28    2    2    1    2    2 #> Perm29    2    2    2    1    1 #> Perm30    2    2    2    1    2 #> Perm31    2    2    2    2    1 #> Perm32    2    2    2    2    2 symb25$c_symb # Combinations-totals symbols #>      level1 level2 #> [1,]      5      0 #> [2,]      4      1 #> [3,]      3      2 #> [4,]      2      3 #> [5,]      1      4 #> [6,]      0      5"},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of qualitative process with spatial structure — dgp.spq","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"purpose function dgp.spq generate random dataset dimensions spatial structure decided user. function may useful pure simulation experiments aim showing specific properties characteristics spatial qualitative dataset.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"","code":"dgp.spq(listw = listw, p = p,  rho = rho, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"listw listw object class nb, knn, listw o matrix created example nb2listw spatialreg package; nb2listw given, set spatial weights listw argument. can also spatial weighting matrix order (NxN) instead listw object. Default = NULL. p vector percentage elements categories. lengths must number categories. sum elements vector must 1. rho level spatial dependence (values -1 y 1) control List additional control arguments. See control argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"factor length N (listw matrix order (NxN)) levels first capital letters: \"\", \"B\", .... description DGP available Páez et al. 2010 (pag 291) details section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"order obtain categorical random variables controlled degrees spatial dependence, designed two- stage data generating process: Firstly, simulate autocorrelated data using following model: $$Y = (- \\rho W)^{-1} \\epsilon$$ \\(\\epsilon = N(0,1)\\) \\(N \\times N\\) identity matrix, \\(\\rho\\) parameter spatial dependence, W connectivity matrix determines set spatial relationships among points. second step data generation process, continuous spatially autocorrelated variable Y used define discrete spatial process follows. Let \\(b_{ij}\\) defined : $$p(Y \\leq b_{ij})= {\\j} \\ \\ \\ \\ \\ \\ <j$$ Let \\(=\\{a_1,a_2,...,a_k\\}\\) define discrete spatial process : $$X_s=a_1 \\ \\ \\ \\ \\ \\ Y_s \\leq b_{1k}$$ $$X_s=a_i \\ \\ \\ \\ \\ \\ b_{-1k} < Y_s \\leq b_{ik}$$ $$X_s=a_k \\ \\ \\ \\ \\ \\ Y_s > b_{k-1k}$$","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"seedinit seed generate data sets","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/dgp.spq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generation of qualitative process with spatial structure — dgp.spq","text":"","code":"# N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(cbind(cx,cy), k = 4))) xf <- dgp.spq(list = listw, p = p, rho = rho)  data(provinces_spain) listw <- spdep::poly2nb(provinces_spain, queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. p <- c(1/6,3/6,2/6) rho = 0.9 xf <- dgp.spq(p = p, listw = listw, rho = rho) provinces_spain$xf <- xf plot(provinces_spain[\"xf\"])"},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","title":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","text":"function compute joincount tests spatial qualitative data. function wrapper joincount.multi joincount.test spdep package.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","text":"","code":"jc.test(formula = NULL,                data = NULL,                fx = NULL,                listw = NULL,                na.action,                zero.policy = NULL,                distr = \"asymptotic\",                alternative = \"greater\",                control =list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","text":"formula symbolic description factor(s). data (optional) data frame sf object points/multipolygons geometry containing variable(s) tested. fx factor  matrix factors columns listw listw object created example nb2listw spdep package; nb2listw given, spatial weights built using object given listw argument (usually sf object). Default = NULL. na.action function (default options(\"na.action\")), can also na.omit na.exclude. may necessary set zero.policy TRUE subsetting may create -neighbour observations. zero.policy Similar corresponding parameter lagsarlm function spatialreg package. TRUE assign zero lagged value zones without neighbours. Default = NULL. distr character. Distribution type \"asymptotic\" (default) \"mc\". alternative character string specifying alternative hypothesis, must one \"greater\" (default), \"less\". control list additional arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","text":"spjctest object. type object list htest objects. length list number factor variables included formula number columns fx. element list can jclist object, binomial factors, jcmulti object multinomial factors. See joincount.test joincount.multi additional details.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","text":"Cliff, . D., Ord, J. K. 1981 Spatial processes, Pion, pp. 19-20. Upton, G., Fingleton, B. 1985 Spatial data analysis example: point pattern qualitative data, Wiley, pp. 158–170.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/jc.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to compute joint-count test for binomial and multinomial (asymptotic and permutation distributions). — jc.test","text":"","code":"## Case 1 ## Multinomial + Binomial using a sf multipolygon # \\donttest{ data(\"provinces_spain\") # sf::sf_use_s2(FALSE) provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Mal2Fml jc1 <- jc.test(formula = f1,                data = provinces_spain,                distr = \"mc\",                alternative = \"greater\",                zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. summary(jc1)     JoinCount Spatial Tests (Monte Carlo)     pairs       pvalue       Joincount       Expected       Variance     Older - multinomial - alternative: greater - Monte-Carlo simulation of         join-count statistic (nonfree sampling)     high:high 0.41600 14 13.79 10.27low:low 0.64900 7 8.39 7.08middle:middle 0.54900 13 13.80 10.23low:high 0.35200 24 22.84 14.76middle:high 0.65000 28 29.41 19.00middle:low 0.27400 25 22.77 16.23Jtot 0.31500 77 75.02 22.13Mal2Fml - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic     men-men 0.48600 60 60.09 22.09woman-woman 0.01350 13 7.28 5.97 provinces_spain$Coast <- factor(provinces_spain$Coast) levels(provinces_spain$Coast) = c(\"no\",\"yes\") f2 <- ~ Mal2Fml + Coast jc2 <- jc.test(formula = f2,                data = provinces_spain,                distr = \"mc\",                zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. summary(jc2)     JoinCount Spatial Tests (Monte Carlo)     pairs       pvalue       Joincount       Expected       Variance     Mal2Fml - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic     men-men 0.51100 60 60.30 23.50woman-woman 0.01200 13 7.13 5.55Coast - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic     no-no 0.00100 64 36.79 20.49yes-yes 0.90800 14 18.92 13.49# }  # Case 2: ## Multinomial using a sf multipoint data(\"FastFood.sf\") # sf::sf_use_s2(FALSE) f1 <- ~ Type jc3 <- jc.test(formula = f1,                data = FastFood.sf,                distr = \"asymptotic\",                control = list(knn = 6)) #> Warning: neighbour object has 4 sub-graphs  summary(jc3)     JoinCount Spatial Tests (asymptotic)     pairs       z-value       pvalue       Joincount       Expected       Variance     Type - multinomial - alternative: greater - Join count test under nonfree sampling     H:H −4.14 0.99998 210.5 258.05 132.09P:P −1.70 0.95580 292.5 313.38 150.13S:S −4.05 0.99997 256.0 305.14 147.60P:H 1.44 0.07503 596.0 570.72 308.52S:H 3.02 0.00126 616.0 563.18 305.44S:P 2.17 0.01482 660.0 620.53 329.37Jtot 5.19 0.00000 1872.0 1,754.43 513.30 # Examples function joincount.test data(oldcol, package = \"spdep\") HICRIME <- cut(COL.OLD$CRIME, breaks = c(0,35,80), labels = c(\"low\",\"high\")) names(HICRIME) <- rownames(COL.OLD) jc4 <- jc.test(fx = HICRIME,                listw = spdep::nb2listw(COL.nb,                style=\"B\")) summary(jc4)     JoinCount Spatial Tests (asymptotic)     pairs       z-value       pvalue       Joincount       Expected       Variance     fx - binomial - alternative: greater - Join count test under nonfree sampling     high-high 6.33 0.00000 54 27.22 17.89low-low 1.01 0.15527 34 29.59 18.90high-low −6.09 1.00000 28 59.18 26.23 jc5 <- jc.test(fx = HICRIME,                 listw = spdep::nb2listw(COL.nb, style=\"B\"),                 distr = \"mc\")  summary(jc5)     JoinCount Spatial Tests (Monte Carlo)     pairs       pvalue       Joincount       Expected       Variance     fx - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic     high-high 0.00100 54 27.40 17.82low-low 0.15450 34 29.42 19.30 HICRIME <- cut(COL.OLD$CRIME, breaks = c(0, 35, 80),                 labels = c(\"low\",\"high\"))  names(HICRIME) <- rownames(COL.OLD)  jc6 <- jc.test(fx = HICRIME,                 listw = spdep::nb2listw(COL.nb,                                  style = \"B\")) summary(jc6)     JoinCount Spatial Tests (asymptotic)     pairs       z-value       pvalue       Joincount       Expected       Variance     fx - binomial - alternative: greater - Join count test under nonfree sampling     high-high 6.33 0.00000 54 27.22 17.89low-low 1.01 0.15527 34 29.59 18.90high-low −6.09 1.00000 28 59.18 26.23"},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to calculate the local spatial runs tests. — local.sp.runs.test","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"function calculates local spatial runs tests localizations.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"","code":"local.sp.runs.test(formula = NULL, data = NULL, fx = NULL, distr = \"asymptotic\", listw = listw, alternative = \"two.sided\" , nsim = NULL, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"formula (optional) formula factor included data data (optional) data frame sf object containing variable testing . fx (optional) factor observations length neighbors list listw distr character string specifying distribution \"asymptotic\" (default) \"bootstrap\" listw neighbourhood list (object type knn nb) W matrix indicates order elements  $m_i-environment$ (example inverse distance). calculate number runs $m_i-environment$, order must established, example nearest neighbour furthest one. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\". nsim Default value NULL obtain asymptotic version local test. bootstrap version nsim number permutations obtain pseudo-value. control Optional argument. See Control Argument section.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"output object class localsrq local.SRQ matrix MeanNeig Mean run.MaxNeig Maximum run. listw object listw alternative character string describing alternative hypothesis","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"object listw can class: knn: Objects class knn consider neighbours order proximity. nb: neighbours obtained sf object, code internally call function nb2nb_order order order proximity centroids. matrix: object matrix class based inverse distance introduced argument, function nb2nb_order also called internally transform object class matrix matrix class nb ordered neighbours.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"@references Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. Working paper.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/local.sp.runs.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to calculate the local spatial runs tests. — local.sp.runs.test","text":"","code":"# Case 1: Local spatial runs test based on knn N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) #>     runs.i      E.i   Std.i    z.value      p.value #> 1        8 7.183838 1.59988  0.5101392 0.6950230217 #> 2        3 7.183838 1.59988 -2.6150947 0.0044601364 #> 3        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 4        8 7.183838 1.59988  0.5101392 0.6950230217 #> 5        6 7.183838 1.59988 -0.7399544 0.2296638446 #> 6        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 7        6 7.183838 1.59988 -0.7399544 0.2296638446 #> 8        9 7.183838 1.59988  1.1351860 0.8718512930 #> 9        8 7.183838 1.59988  0.5101392 0.6950230217 #> 10       8 7.183838 1.59988  0.5101392 0.6950230217 #> 11       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 12       2 7.183838 1.59988 -3.2401414 0.0005973521 #> 13       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 14       9 7.183838 1.59988  1.1351860 0.8718512930 #> 15       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 16       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 17       8 7.183838 1.59988  0.5101392 0.6950230217 #> 18       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 19       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 20       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 21       8 7.183838 1.59988  0.5101392 0.6950230217 #> 22       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 23       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 24       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 25       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 26       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 27       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 28      11 7.183838 1.59988  2.3852795 0.9914669250 #> 29       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 30       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 31       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 32      11 7.183838 1.59988  2.3852795 0.9914669250 #> 33       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 34       8 7.183838 1.59988  0.5101392 0.6950230217 #> 35       8 7.183838 1.59988  0.5101392 0.6950230217 #> 36       9 7.183838 1.59988  1.1351860 0.8718512930 #> 37       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 38       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 39       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 40       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 41       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 42       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 43      10 7.183838 1.59988  1.7602327 0.9608158220 #> 44       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 45       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 46       8 7.183838 1.59988  0.5101392 0.6950230217 #> 47       8 7.183838 1.59988  0.5101392 0.6950230217 #> 48       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 49       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 50       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 51       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 52       8 7.183838 1.59988  0.5101392 0.6950230217 #> 53       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 54       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 55       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 56       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 57       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 58       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 59       8 7.183838 1.59988  0.5101392 0.6950230217 #> 60       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 61       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 62       2 7.183838 1.59988 -3.2401414 0.0005973521 #> 63       8 7.183838 1.59988  0.5101392 0.6950230217 #> 64       9 7.183838 1.59988  1.1351860 0.8718512930 #> 65       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 66       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 67       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 68       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 69       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 70       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 71       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 72       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 73       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 74       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 75      10 7.183838 1.59988  1.7602327 0.9608158220 #> 76       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 77       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 78       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 79       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 80       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 81       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 82       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 83       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 84      10 7.183838 1.59988  1.7602327 0.9608158220 #> 85       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 86       8 7.183838 1.59988  0.5101392 0.6950230217 #> 87       9 7.183838 1.59988  1.1351860 0.8718512930 #> 88       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 89       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 90       8 7.183838 1.59988  0.5101392 0.6950230217 #> 91       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 92       8 7.183838 1.59988  0.5101392 0.6950230217 #> 93       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 94       8 7.183838 1.59988  0.5101392 0.6950230217 #> 95       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 96       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 97       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 98       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 99       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 100      5 7.183838 1.59988 -1.3650011 0.0861263477 plot(lsrq, sig = 0.05)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"two.sided\",                            distr =\"bootstrap\", nsim = 399) print(lsrq) #>     SRQ     EP.i    SdP.i zseudo.value pseudo.value #> 1     8 7.155388 1.580635   0.53434952  0.593099735 #> 2     3 7.162907 1.598060  -2.60497517  0.009188092 #> 3     7 7.062657 1.544510  -0.04056732  0.967640835 #> 4     8 7.125313 1.588063   0.55078826  0.581778831 #> 5     6 7.092732 1.562411  -0.69938823  0.484309438 #> 6     5 7.218045 1.553105  -1.42813575  0.153252788 #> 7     6 7.090226 1.691504  -0.64453031  0.519231611 #> 8     9 7.310777 1.631554   1.03534599  0.300507360 #> 9     8 7.195489 1.472317   0.54642519  0.584773695 #> 10    8 7.095238 1.621449   0.55799580  0.576847253 #> 11    5 7.208020 1.581722  -1.39595946  0.162726702 #> 12    2 7.140351 1.589966  -3.23299488  0.001224998 #> 13    3 7.192982 1.613495  -2.59869486  0.009357892 #> 14    9 7.268170 1.530515   1.13153373  0.257830516 #> 15    7 7.305764 1.584073  -0.19302415  0.846940053 #> 16    6 7.187970 1.641869  -0.72354726  0.469343730 #> 17    8 7.137845 1.619152   0.53247326  0.594398254 #> 18    6 7.215539 1.570347  -0.77405758  0.438896742 #> 19    5 7.180451 1.521213  -1.43336338  0.151754018 #> 20    6 7.197995 1.537928  -0.77896696  0.435999179 #> 21    8 6.974937 1.588075   0.64547482  0.518619531 #> 22    5 7.172932 1.634327  -1.32955799  0.183663949 #> 23    5 7.055138 1.629492  -1.26121396  0.207231771 #> 24    5 7.157895 1.612648  -1.33810618  0.180861828 #> 25    7 7.285714 1.537985  -0.18577181  0.852623715 #> 26    6 7.278195 1.572471  -0.81285807  0.416299438 #> 27    4 7.087719 1.586635  -1.94608003  0.051645127 #> 28   11 7.248120 1.621492   2.31384406  0.020676278 #> 29    4 7.278195 1.604109  -2.04362354  0.040990752 #> 30    4 7.162907 1.601202  -1.97533347  0.048230317 #> 31    6 7.258145 1.497411  -0.84021396  0.400788432 #> 32   11 7.215539 1.611410   2.34854012  0.018847169 #> 33    5 7.360902 1.618075  -1.45908105  0.144542802 #> 34    8 7.055138 1.663068   0.56814390  0.569937258 #> 35    8 7.303258 1.658165   0.42018843  0.674347804 #> 36    9 7.220551 1.644690   1.08193587  0.279281024 #> 37    5 6.942356 1.706972  -1.13789542  0.255164156 #> 38    6 7.095238 1.548529  -0.70727645  0.479394699 #> 39    7 7.155388 1.601166  -0.09704705  0.922689027 #> 40    6 7.077694 1.542197  -0.69880467  0.484674108 #> 41    7 7.162907 1.587016  -0.10265003  0.918240735 #> 42    7 7.120301 1.540268  -0.07810377  0.937745508 #> 43   10 7.102757 1.580970   1.83257362  0.066866004 #> 44    7 7.283208 1.499579  -0.18885834  0.850203844 #> 45    6 7.218045 1.644261  -0.74078590  0.458823269 #> 46    8 7.265664 1.657812   0.44295483  0.657798408 #> 47    8 7.075188 1.516860   0.60968833  0.542068289 #> 48    5 7.177945 1.577453  -1.38067218  0.167379779 #> 49    7 7.228070 1.647478  -0.13843592  0.889895914 #> 50    4 7.215539 1.609850  -1.99741511  0.045780108 #> 51    5 7.240602 1.606287  -1.39489528  0.163047420 #> 52    8 7.255639 1.485207   0.50118311  0.616242259 #> 53    5 7.278195 1.647383  -1.38291809  0.166689981 #> 54    7 7.253133 1.521565  -0.16636348  0.867870912 #> 55    6 7.248120 1.691269  -0.73797841  0.460527570 #> 56    7 7.233083 1.554151  -0.14997430  0.880784889 #> 57    6 7.245614 1.575511  -0.79060941  0.429171952 #> 58    6 7.130326 1.666416  -0.67829750  0.497583086 #> 59    8 7.218045 1.605604   0.48701595  0.626247025 #> 60    7 7.205514 1.573291  -0.13062665  0.896070662 #> 61    4 7.177945 1.571068  -2.02279211  0.043094585 #> 62    2 7.152882 1.565708  -3.29108685  0.000998011 #> 63    8 7.182957 1.506805   0.54223498  0.587656642 #> 64    9 7.047619 1.679087   1.16276309  0.244925635 #> 65    4 7.270677 1.603049  -2.04028490  0.041321958 #> 66    7 7.185464 1.554921  -0.11927532  0.905057233 #> 67    6 7.263158 1.567067  -0.80606493  0.420205413 #> 68    6 7.265664 1.551332  -0.81585621  0.414582379 #> 69    6 7.127820 1.635413  -0.68962366  0.490430882 #> 70    5 7.340852 1.678750  -1.39440193  0.163196264 #> 71    6 7.208020 1.490113  -0.81069000  0.417543720 #> 72    5 7.253133 1.634608  -1.37839328  0.168081898 #> 73    6 7.200501 1.559506  -0.76979568  0.441421101 #> 74    5 7.273183 1.527983  -1.48770197  0.136829507 #> 75   10 7.215539 1.625383   1.71311124  0.086692076 #> 76    6 7.132832 1.523649  -0.74349921  0.457179497 #> 77    6 7.255639 1.572315  -0.79859284  0.424526543 #> 78    7 7.360902 1.573996  -0.22929049  0.818643141 #> 79    7 7.218045 1.613410  -0.13514554  0.892496806 #> 80    6 7.082707 1.545191  -0.70069452  0.483493675 #> 81    4 7.197995 1.499881  -2.13216524  0.032993265 #> 82    6 7.235589 1.608594  -0.76811739  0.442417449 #> 83    6 7.172932 1.565222  -0.74937140  0.453633383 #> 84   10 7.067669 1.554029   1.88692108  0.059170941 #> 85    7 7.110276 1.595493  -0.06911700  0.944896487 #> 86    8 7.225564 1.546352   0.50081492  0.616501386 #> 87    9 7.203008 1.551913   1.15792109  0.246896242 #> 88    5 7.130326 1.646698  -1.29369517  0.195770733 #> 89    4 7.137845 1.651418  -1.90009078  0.057421208 #> 90    8 7.025063 1.718762   0.56723218  0.570556445 #> 91    7 7.250627 1.558682  -0.16079386  0.872255758 #> 92    8 7.187970 1.601587   0.50701589  0.612143671 #> 93    7 7.110276 1.688825  -0.06529728  0.947937307 #> 94    8 7.057644 1.576902   0.59759969  0.550107071 #> 95    6 7.172932 1.652672  -0.70971863  0.477878639 #> 96    5 7.145363 1.552732  -1.38166997  0.167073059 #> 97    4 7.137845 1.680077  -1.86767874  0.061806864 #> 98    6 7.157895 1.544200  -0.74983458  0.453354337 #> 99    5 7.340852 1.617775  -1.44695770  0.147908771 #> 100   5 7.233083 1.595631  -1.39949815  0.161663653 plot(lsrq, sig = 0.1)  # \\donttest{ # Case 2:Fastfood example. sf (points) data(\"FastFood.sf\") # sf::sf_use_s2(FALSE) x <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) listw <- spdep::knearneigh(x, k = 10) formula <- ~ Type lsrq <- local.sp.runs.test(formula = formula, data = FastFood.sf, listw = listw) print(lsrq) #>     runs.i      E.i    Std.i    z.value    p.value #> 1        8 7.668307 1.490157  0.2225895 0.82385504 #> 2        9 7.668307 1.490157  0.8936597 0.37150400 #> 3        9 7.668307 1.490157  0.8936597 0.37150400 #> 4        8 7.668307 1.490157  0.2225895 0.82385504 #> 5       10 7.668307 1.490157  1.5647299 0.11764625 #> 6        8 7.668307 1.490157  0.2225895 0.82385504 #> 7        8 7.668307 1.490157  0.2225895 0.82385504 #> 8        7 7.668307 1.490157 -0.4484808 0.65380626 #> 9        7 7.668307 1.490157 -0.4484808 0.65380626 #> 10       7 7.668307 1.490157 -0.4484808 0.65380626 #> 11       7 7.668307 1.490157 -0.4484808 0.65380626 #> 12       8 7.668307 1.490157  0.2225895 0.82385504 #> 13       9 7.668307 1.490157  0.8936597 0.37150400 #> 14       7 7.668307 1.490157 -0.4484808 0.65380626 #> 15      10 7.668307 1.490157  1.5647299 0.11764625 #> 16       9 7.668307 1.490157  0.8936597 0.37150400 #> 17       7 7.668307 1.490157 -0.4484808 0.65380626 #> 18       9 7.668307 1.490157  0.8936597 0.37150400 #> 19      10 7.668307 1.490157  1.5647299 0.11764625 #> 20       9 7.668307 1.490157  0.8936597 0.37150400 #> 21       9 7.668307 1.490157  0.8936597 0.37150400 #> 22      10 7.668307 1.490157  1.5647299 0.11764625 #> 23       7 7.668307 1.490157 -0.4484808 0.65380626 #> 24       6 7.668307 1.490157 -1.1195510 0.26290515 #> 25       9 7.668307 1.490157  0.8936597 0.37150400 #> 26       9 7.668307 1.490157  0.8936597 0.37150400 #> 27      10 7.668307 1.490157  1.5647299 0.11764625 #> 28       8 7.668307 1.490157  0.2225895 0.82385504 #> 29       8 7.668307 1.490157  0.2225895 0.82385504 #> 30      10 7.668307 1.490157  1.5647299 0.11764625 #> 31       9 7.668307 1.490157  0.8936597 0.37150400 #> 32       8 7.668307 1.490157  0.2225895 0.82385504 #> 33       6 7.668307 1.490157 -1.1195510 0.26290515 #> 34       8 7.668307 1.490157  0.2225895 0.82385504 #> 35       8 7.668307 1.490157  0.2225895 0.82385504 #> 36       9 7.668307 1.490157  0.8936597 0.37150400 #> 37       8 7.668307 1.490157  0.2225895 0.82385504 #> 38       7 7.668307 1.490157 -0.4484808 0.65380626 #> 39       8 7.668307 1.490157  0.2225895 0.82385504 #> 40       9 7.668307 1.490157  0.8936597 0.37150400 #> 41       8 7.668307 1.490157  0.2225895 0.82385504 #> 42       9 7.668307 1.490157  0.8936597 0.37150400 #> 43       7 7.668307 1.490157 -0.4484808 0.65380626 #> 44       8 7.668307 1.490157  0.2225895 0.82385504 #> 45       8 7.668307 1.490157  0.2225895 0.82385504 #> 46       8 7.668307 1.490157  0.2225895 0.82385504 #> 47       7 7.668307 1.490157 -0.4484808 0.65380626 #> 48       6 7.668307 1.490157 -1.1195510 0.26290515 #> 49       6 7.668307 1.490157 -1.1195510 0.26290515 #> 50       8 7.668307 1.490157  0.2225895 0.82385504 #> 51       6 7.668307 1.490157 -1.1195510 0.26290515 #> 52       7 7.668307 1.490157 -0.4484808 0.65380626 #> 53       4 7.668307 1.490157 -2.4616914 0.01382836 #> 54       7 7.668307 1.490157 -0.4484808 0.65380626 #> 55       8 7.668307 1.490157  0.2225895 0.82385504 #> 56       8 7.668307 1.490157  0.2225895 0.82385504 #> 57       4 7.668307 1.490157 -2.4616914 0.01382836 #> 58       5 7.668307 1.490157 -1.7906212 0.07335410 #> 59       9 7.668307 1.490157  0.8936597 0.37150400 #> 60      11 7.668307 1.490157  2.2358001 0.02536487 #> 61       4 7.668307 1.490157 -2.4616914 0.01382836 #> 62       7 7.668307 1.490157 -0.4484808 0.65380626 #> 63       6 7.668307 1.490157 -1.1195510 0.26290515 #> 64      10 7.668307 1.490157  1.5647299 0.11764625 #> 65       9 7.668307 1.490157  0.8936597 0.37150400 #> 66       7 7.668307 1.490157 -0.4484808 0.65380626 #> 67       7 7.668307 1.490157 -0.4484808 0.65380626 #> 68       6 7.668307 1.490157 -1.1195510 0.26290515 #> 69       8 7.668307 1.490157  0.2225895 0.82385504 #> 70      10 7.668307 1.490157  1.5647299 0.11764625 #> 71       8 7.668307 1.490157  0.2225895 0.82385504 #> 72       8 7.668307 1.490157  0.2225895 0.82385504 #> 73       6 7.668307 1.490157 -1.1195510 0.26290515 #> 74       8 7.668307 1.490157  0.2225895 0.82385504 #> 75       8 7.668307 1.490157  0.2225895 0.82385504 #> 76       8 7.668307 1.490157  0.2225895 0.82385504 #> 77      10 7.668307 1.490157  1.5647299 0.11764625 #> 78       8 7.668307 1.490157  0.2225895 0.82385504 #> 79       9 7.668307 1.490157  0.8936597 0.37150400 #> 80       8 7.668307 1.490157  0.2225895 0.82385504 #> 81       8 7.668307 1.490157  0.2225895 0.82385504 #> 82       8 7.668307 1.490157  0.2225895 0.82385504 #> 83       9 7.668307 1.490157  0.8936597 0.37150400 #> 84       8 7.668307 1.490157  0.2225895 0.82385504 #> 85       9 7.668307 1.490157  0.8936597 0.37150400 #> 86      10 7.668307 1.490157  1.5647299 0.11764625 #> 87       7 7.668307 1.490157 -0.4484808 0.65380626 #> 88       9 7.668307 1.490157  0.8936597 0.37150400 #> 89       7 7.668307 1.490157 -0.4484808 0.65380626 #> 90       7 7.668307 1.490157 -0.4484808 0.65380626 #> 91       8 7.668307 1.490157  0.2225895 0.82385504 #> 92      11 7.668307 1.490157  2.2358001 0.02536487 #> 93       7 7.668307 1.490157 -0.4484808 0.65380626 #> 94       6 7.668307 1.490157 -1.1195510 0.26290515 #> 95       9 7.668307 1.490157  0.8936597 0.37150400 #> 96       8 7.668307 1.490157  0.2225895 0.82385504 #> 97       8 7.668307 1.490157  0.2225895 0.82385504 #> 98       9 7.668307 1.490157  0.8936597 0.37150400 #> 99      10 7.668307 1.490157  1.5647299 0.11764625 #> 100     10 7.668307 1.490157  1.5647299 0.11764625 #> 101      9 7.668307 1.490157  0.8936597 0.37150400 #> 102      7 7.668307 1.490157 -0.4484808 0.65380626 #> 103     10 7.668307 1.490157  1.5647299 0.11764625 #> 104     10 7.668307 1.490157  1.5647299 0.11764625 #> 105      9 7.668307 1.490157  0.8936597 0.37150400 #> 106     10 7.668307 1.490157  1.5647299 0.11764625 #> 107      7 7.668307 1.490157 -0.4484808 0.65380626 #> 108      8 7.668307 1.490157  0.2225895 0.82385504 #> 109     10 7.668307 1.490157  1.5647299 0.11764625 #> 110      7 7.668307 1.490157 -0.4484808 0.65380626 #> 111     11 7.668307 1.490157  2.2358001 0.02536487 #> 112      7 7.668307 1.490157 -0.4484808 0.65380626 #> 113      9 7.668307 1.490157  0.8936597 0.37150400 #> 114     10 7.668307 1.490157  1.5647299 0.11764625 #> 115      5 7.668307 1.490157 -1.7906212 0.07335410 #> 116      7 7.668307 1.490157 -0.4484808 0.65380626 #> 117      8 7.668307 1.490157  0.2225895 0.82385504 #> 118      9 7.668307 1.490157  0.8936597 0.37150400 #> 119      7 7.668307 1.490157 -0.4484808 0.65380626 #> 120      9 7.668307 1.490157  0.8936597 0.37150400 #> 121      9 7.668307 1.490157  0.8936597 0.37150400 #> 122      3 7.668307 1.490157 -3.1327617 0.00173170 #> 123      7 7.668307 1.490157 -0.4484808 0.65380626 #> 124      9 7.668307 1.490157  0.8936597 0.37150400 #> 125      9 7.668307 1.490157  0.8936597 0.37150400 #> 126      7 7.668307 1.490157 -0.4484808 0.65380626 #> 127      7 7.668307 1.490157 -0.4484808 0.65380626 #> 128     10 7.668307 1.490157  1.5647299 0.11764625 #> 129      9 7.668307 1.490157  0.8936597 0.37150400 #> 130      8 7.668307 1.490157  0.2225895 0.82385504 #> 131      6 7.668307 1.490157 -1.1195510 0.26290515 #> 132      9 7.668307 1.490157  0.8936597 0.37150400 #> 133      8 7.668307 1.490157  0.2225895 0.82385504 #> 134      9 7.668307 1.490157  0.8936597 0.37150400 #> 135      8 7.668307 1.490157  0.2225895 0.82385504 #> 136      7 7.668307 1.490157 -0.4484808 0.65380626 #> 137      5 7.668307 1.490157 -1.7906212 0.07335410 #> 138      9 7.668307 1.490157  0.8936597 0.37150400 #> 139      8 7.668307 1.490157  0.2225895 0.82385504 #> 140      8 7.668307 1.490157  0.2225895 0.82385504 #> 141      7 7.668307 1.490157 -0.4484808 0.65380626 #> 142      7 7.668307 1.490157 -0.4484808 0.65380626 #> 143     10 7.668307 1.490157  1.5647299 0.11764625 #> 144      8 7.668307 1.490157  0.2225895 0.82385504 #> 145      9 7.668307 1.490157  0.8936597 0.37150400 #> 146      7 7.668307 1.490157 -0.4484808 0.65380626 #> 147      9 7.668307 1.490157  0.8936597 0.37150400 #> 148      9 7.668307 1.490157  0.8936597 0.37150400 #> 149      9 7.668307 1.490157  0.8936597 0.37150400 #> 150      8 7.668307 1.490157  0.2225895 0.82385504 #> 151      9 7.668307 1.490157  0.8936597 0.37150400 #> 152      7 7.668307 1.490157 -0.4484808 0.65380626 #> 153      7 7.668307 1.490157 -0.4484808 0.65380626 #> 154      9 7.668307 1.490157  0.8936597 0.37150400 #> 155      9 7.668307 1.490157  0.8936597 0.37150400 #> 156      9 7.668307 1.490157  0.8936597 0.37150400 #> 157     10 7.668307 1.490157  1.5647299 0.11764625 #> 158      8 7.668307 1.490157  0.2225895 0.82385504 #> 159      8 7.668307 1.490157  0.2225895 0.82385504 #> 160      8 7.668307 1.490157  0.2225895 0.82385504 #> 161      8 7.668307 1.490157  0.2225895 0.82385504 #> 162      9 7.668307 1.490157  0.8936597 0.37150400 #> 163      8 7.668307 1.490157  0.2225895 0.82385504 #> 164     10 7.668307 1.490157  1.5647299 0.11764625 #> 165      8 7.668307 1.490157  0.2225895 0.82385504 #> 166      8 7.668307 1.490157  0.2225895 0.82385504 #> 167     10 7.668307 1.490157  1.5647299 0.11764625 #> 168      8 7.668307 1.490157  0.2225895 0.82385504 #> 169      6 7.668307 1.490157 -1.1195510 0.26290515 #> 170      9 7.668307 1.490157  0.8936597 0.37150400 #> 171      9 7.668307 1.490157  0.8936597 0.37150400 #> 172      9 7.668307 1.490157  0.8936597 0.37150400 #> 173      7 7.668307 1.490157 -0.4484808 0.65380626 #> 174      9 7.668307 1.490157  0.8936597 0.37150400 #> 175      7 7.668307 1.490157 -0.4484808 0.65380626 #> 176     10 7.668307 1.490157  1.5647299 0.11764625 #> 177      9 7.668307 1.490157  0.8936597 0.37150400 #> 178      7 7.668307 1.490157 -0.4484808 0.65380626 #> 179      7 7.668307 1.490157 -0.4484808 0.65380626 #> 180     10 7.668307 1.490157  1.5647299 0.11764625 #> 181      8 7.668307 1.490157  0.2225895 0.82385504 #> 182     11 7.668307 1.490157  2.2358001 0.02536487 #> 183      8 7.668307 1.490157  0.2225895 0.82385504 #> 184      8 7.668307 1.490157  0.2225895 0.82385504 #> 185      9 7.668307 1.490157  0.8936597 0.37150400 #> 186      4 7.668307 1.490157 -2.4616914 0.01382836 #> 187      8 7.668307 1.490157  0.2225895 0.82385504 #> 188      7 7.668307 1.490157 -0.4484808 0.65380626 #> 189      9 7.668307 1.490157  0.8936597 0.37150400 #> 190      8 7.668307 1.490157  0.2225895 0.82385504 #> 191      9 7.668307 1.490157  0.8936597 0.37150400 #> 192      8 7.668307 1.490157  0.2225895 0.82385504 #> 193      7 7.668307 1.490157 -0.4484808 0.65380626 #> 194      9 7.668307 1.490157  0.8936597 0.37150400 #> 195     10 7.668307 1.490157  1.5647299 0.11764625 #> 196      8 7.668307 1.490157  0.2225895 0.82385504 #> 197      8 7.668307 1.490157  0.2225895 0.82385504 #> 198     10 7.668307 1.490157  1.5647299 0.11764625 #> 199      7 7.668307 1.490157 -0.4484808 0.65380626 #> 200     10 7.668307 1.490157  1.5647299 0.11764625 #> 201      7 7.668307 1.490157 -0.4484808 0.65380626 #> 202      8 7.668307 1.490157  0.2225895 0.82385504 #> 203      7 7.668307 1.490157 -0.4484808 0.65380626 #> 204      9 7.668307 1.490157  0.8936597 0.37150400 #> 205      7 7.668307 1.490157 -0.4484808 0.65380626 #> 206      8 7.668307 1.490157  0.2225895 0.82385504 #> 207      7 7.668307 1.490157 -0.4484808 0.65380626 #> 208      8 7.668307 1.490157  0.2225895 0.82385504 #> 209      6 7.668307 1.490157 -1.1195510 0.26290515 #> 210      8 7.668307 1.490157  0.2225895 0.82385504 #> 211      9 7.668307 1.490157  0.8936597 0.37150400 #> 212      8 7.668307 1.490157  0.2225895 0.82385504 #> 213     10 7.668307 1.490157  1.5647299 0.11764625 #> 214      7 7.668307 1.490157 -0.4484808 0.65380626 #> 215      8 7.668307 1.490157  0.2225895 0.82385504 #> 216      7 7.668307 1.490157 -0.4484808 0.65380626 #> 217      8 7.668307 1.490157  0.2225895 0.82385504 #> 218      9 7.668307 1.490157  0.8936597 0.37150400 #> 219      7 7.668307 1.490157 -0.4484808 0.65380626 #> 220      8 7.668307 1.490157  0.2225895 0.82385504 #> 221      6 7.668307 1.490157 -1.1195510 0.26290515 #> 222      9 7.668307 1.490157  0.8936597 0.37150400 #> 223      7 7.668307 1.490157 -0.4484808 0.65380626 #> 224      4 7.668307 1.490157 -2.4616914 0.01382836 #> 225     11 7.668307 1.490157  2.2358001 0.02536487 #> 226      6 7.668307 1.490157 -1.1195510 0.26290515 #> 227      9 7.668307 1.490157  0.8936597 0.37150400 #> 228      6 7.668307 1.490157 -1.1195510 0.26290515 #> 229      6 7.668307 1.490157 -1.1195510 0.26290515 #> 230      7 7.668307 1.490157 -0.4484808 0.65380626 #> 231      7 7.668307 1.490157 -0.4484808 0.65380626 #> 232      7 7.668307 1.490157 -0.4484808 0.65380626 #> 233      6 7.668307 1.490157 -1.1195510 0.26290515 #> 234      7 7.668307 1.490157 -0.4484808 0.65380626 #> 235      8 7.668307 1.490157  0.2225895 0.82385504 #> 236      9 7.668307 1.490157  0.8936597 0.37150400 #> 237      6 7.668307 1.490157 -1.1195510 0.26290515 #> 238     10 7.668307 1.490157  1.5647299 0.11764625 #> 239     10 7.668307 1.490157  1.5647299 0.11764625 #> 240     10 7.668307 1.490157  1.5647299 0.11764625 #> 241     11 7.668307 1.490157  2.2358001 0.02536487 #> 242     11 7.668307 1.490157  2.2358001 0.02536487 #> 243      6 7.668307 1.490157 -1.1195510 0.26290515 #> 244      8 7.668307 1.490157  0.2225895 0.82385504 #> 245      7 7.668307 1.490157 -0.4484808 0.65380626 #> 246      7 7.668307 1.490157 -0.4484808 0.65380626 #> 247      9 7.668307 1.490157  0.8936597 0.37150400 #> 248      9 7.668307 1.490157  0.8936597 0.37150400 #> 249      7 7.668307 1.490157 -0.4484808 0.65380626 #> 250      9 7.668307 1.490157  0.8936597 0.37150400 #> 251      9 7.668307 1.490157  0.8936597 0.37150400 #> 252      6 7.668307 1.490157 -1.1195510 0.26290515 #> 253      7 7.668307 1.490157 -0.4484808 0.65380626 #> 254     10 7.668307 1.490157  1.5647299 0.11764625 #> 255      5 7.668307 1.490157 -1.7906212 0.07335410 #> 256      5 7.668307 1.490157 -1.7906212 0.07335410 #> 257     10 7.668307 1.490157  1.5647299 0.11764625 #> 258      8 7.668307 1.490157  0.2225895 0.82385504 #> 259      9 7.668307 1.490157  0.8936597 0.37150400 #> 260      7 7.668307 1.490157 -0.4484808 0.65380626 #> 261     10 7.668307 1.490157  1.5647299 0.11764625 #> 262      6 7.668307 1.490157 -1.1195510 0.26290515 #> 263      8 7.668307 1.490157  0.2225895 0.82385504 #> 264      6 7.668307 1.490157 -1.1195510 0.26290515 #> 265      7 7.668307 1.490157 -0.4484808 0.65380626 #> 266      7 7.668307 1.490157 -0.4484808 0.65380626 #> 267      7 7.668307 1.490157 -0.4484808 0.65380626 #> 268      9 7.668307 1.490157  0.8936597 0.37150400 #> 269      6 7.668307 1.490157 -1.1195510 0.26290515 #> 270      7 7.668307 1.490157 -0.4484808 0.65380626 #> 271      7 7.668307 1.490157 -0.4484808 0.65380626 #> 272      8 7.668307 1.490157  0.2225895 0.82385504 #> 273      8 7.668307 1.490157  0.2225895 0.82385504 #> 274     10 7.668307 1.490157  1.5647299 0.11764625 #> 275      5 7.668307 1.490157 -1.7906212 0.07335410 #> 276      7 7.668307 1.490157 -0.4484808 0.65380626 #> 277     10 7.668307 1.490157  1.5647299 0.11764625 #> 278      7 7.668307 1.490157 -0.4484808 0.65380626 #> 279      8 7.668307 1.490157  0.2225895 0.82385504 #> 280      7 7.668307 1.490157 -0.4484808 0.65380626 #> 281      7 7.668307 1.490157 -0.4484808 0.65380626 #> 282      8 7.668307 1.490157  0.2225895 0.82385504 #> 283      8 7.668307 1.490157  0.2225895 0.82385504 #> 284      9 7.668307 1.490157  0.8936597 0.37150400 #> 285     10 7.668307 1.490157  1.5647299 0.11764625 #> 286      8 7.668307 1.490157  0.2225895 0.82385504 #> 287      8 7.668307 1.490157  0.2225895 0.82385504 #> 288      9 7.668307 1.490157  0.8936597 0.37150400 #> 289      9 7.668307 1.490157  0.8936597 0.37150400 #> 290     10 7.668307 1.490157  1.5647299 0.11764625 #> 291      9 7.668307 1.490157  0.8936597 0.37150400 #> 292      9 7.668307 1.490157  0.8936597 0.37150400 #> 293     10 7.668307 1.490157  1.5647299 0.11764625 #> 294      8 7.668307 1.490157  0.2225895 0.82385504 #> 295     10 7.668307 1.490157  1.5647299 0.11764625 #> 296      8 7.668307 1.490157  0.2225895 0.82385504 #> 297     10 7.668307 1.490157  1.5647299 0.11764625 #> 298      8 7.668307 1.490157  0.2225895 0.82385504 #> 299      9 7.668307 1.490157  0.8936597 0.37150400 #> 300      9 7.668307 1.490157  0.8936597 0.37150400 #> 301      9 7.668307 1.490157  0.8936597 0.37150400 #> 302      7 7.668307 1.490157 -0.4484808 0.65380626 #> 303      7 7.668307 1.490157 -0.4484808 0.65380626 #> 304      9 7.668307 1.490157  0.8936597 0.37150400 #> 305      8 7.668307 1.490157  0.2225895 0.82385504 #> 306     10 7.668307 1.490157  1.5647299 0.11764625 #> 307      9 7.668307 1.490157  0.8936597 0.37150400 #> 308      6 7.668307 1.490157 -1.1195510 0.26290515 #> 309      8 7.668307 1.490157  0.2225895 0.82385504 #> 310      7 7.668307 1.490157 -0.4484808 0.65380626 #> 311      8 7.668307 1.490157  0.2225895 0.82385504 #> 312      8 7.668307 1.490157  0.2225895 0.82385504 #> 313      9 7.668307 1.490157  0.8936597 0.37150400 #> 314      4 7.668307 1.490157 -2.4616914 0.01382836 #> 315      6 7.668307 1.490157 -1.1195510 0.26290515 #> 316      7 7.668307 1.490157 -0.4484808 0.65380626 #> 317      8 7.668307 1.490157  0.2225895 0.82385504 #> 318      9 7.668307 1.490157  0.8936597 0.37150400 #> 319      8 7.668307 1.490157  0.2225895 0.82385504 #> 320      9 7.668307 1.490157  0.8936597 0.37150400 #> 321      7 7.668307 1.490157 -0.4484808 0.65380626 #> 322      9 7.668307 1.490157  0.8936597 0.37150400 #> 323      9 7.668307 1.490157  0.8936597 0.37150400 #> 324      9 7.668307 1.490157  0.8936597 0.37150400 #> 325      9 7.668307 1.490157  0.8936597 0.37150400 #> 326      5 7.668307 1.490157 -1.7906212 0.07335410 #> 327      6 7.668307 1.490157 -1.1195510 0.26290515 #> 328      8 7.668307 1.490157  0.2225895 0.82385504 #> 329      9 7.668307 1.490157  0.8936597 0.37150400 #> 330     10 7.668307 1.490157  1.5647299 0.11764625 #> 331      8 7.668307 1.490157  0.2225895 0.82385504 #> 332      8 7.668307 1.490157  0.2225895 0.82385504 #> 333      9 7.668307 1.490157  0.8936597 0.37150400 #> 334      8 7.668307 1.490157  0.2225895 0.82385504 #> 335      7 7.668307 1.490157 -0.4484808 0.65380626 #> 336      5 7.668307 1.490157 -1.7906212 0.07335410 #> 337      6 7.668307 1.490157 -1.1195510 0.26290515 #> 338      9 7.668307 1.490157  0.8936597 0.37150400 #> 339      8 7.668307 1.490157  0.2225895 0.82385504 #> 340      6 7.668307 1.490157 -1.1195510 0.26290515 #> 341      6 7.668307 1.490157 -1.1195510 0.26290515 #> 342     11 7.668307 1.490157  2.2358001 0.02536487 #> 343      9 7.668307 1.490157  0.8936597 0.37150400 #> 344     11 7.668307 1.490157  2.2358001 0.02536487 #> 345      9 7.668307 1.490157  0.8936597 0.37150400 #> 346      8 7.668307 1.490157  0.2225895 0.82385504 #> 347      9 7.668307 1.490157  0.8936597 0.37150400 #> 348      8 7.668307 1.490157  0.2225895 0.82385504 #> 349     11 7.668307 1.490157  2.2358001 0.02536487 #> 350      9 7.668307 1.490157  0.8936597 0.37150400 #> 351      9 7.668307 1.490157  0.8936597 0.37150400 #> 352      9 7.668307 1.490157  0.8936597 0.37150400 #> 353      7 7.668307 1.490157 -0.4484808 0.65380626 #> 354      9 7.668307 1.490157  0.8936597 0.37150400 #> 355      8 7.668307 1.490157  0.2225895 0.82385504 #> 356     11 7.668307 1.490157  2.2358001 0.02536487 #> 357      8 7.668307 1.490157  0.2225895 0.82385504 #> 358      9 7.668307 1.490157  0.8936597 0.37150400 #> 359      9 7.668307 1.490157  0.8936597 0.37150400 #> 360      9 7.668307 1.490157  0.8936597 0.37150400 #> 361      9 7.668307 1.490157  0.8936597 0.37150400 #> 362      8 7.668307 1.490157  0.2225895 0.82385504 #> 363      9 7.668307 1.490157  0.8936597 0.37150400 #> 364      6 7.668307 1.490157 -1.1195510 0.26290515 #> 365     10 7.668307 1.490157  1.5647299 0.11764625 #> 366      8 7.668307 1.490157  0.2225895 0.82385504 #> 367     10 7.668307 1.490157  1.5647299 0.11764625 #> 368     10 7.668307 1.490157  1.5647299 0.11764625 #> 369      7 7.668307 1.490157 -0.4484808 0.65380626 #> 370      8 7.668307 1.490157  0.2225895 0.82385504 #> 371      8 7.668307 1.490157  0.2225895 0.82385504 #> 372      9 7.668307 1.490157  0.8936597 0.37150400 #> 373      9 7.668307 1.490157  0.8936597 0.37150400 #> 374     10 7.668307 1.490157  1.5647299 0.11764625 #> 375      9 7.668307 1.490157  0.8936597 0.37150400 #> 376      8 7.668307 1.490157  0.2225895 0.82385504 #> 377     10 7.668307 1.490157  1.5647299 0.11764625 #> 378      8 7.668307 1.490157  0.2225895 0.82385504 #> 379      8 7.668307 1.490157  0.2225895 0.82385504 #> 380      8 7.668307 1.490157  0.2225895 0.82385504 #> 381      7 7.668307 1.490157 -0.4484808 0.65380626 #> 382      6 7.668307 1.490157 -1.1195510 0.26290515 #> 383      8 7.668307 1.490157  0.2225895 0.82385504 #> 384     10 7.668307 1.490157  1.5647299 0.11764625 #> 385      7 7.668307 1.490157 -0.4484808 0.65380626 #> 386      9 7.668307 1.490157  0.8936597 0.37150400 #> 387      8 7.668307 1.490157  0.2225895 0.82385504 #> 388      9 7.668307 1.490157  0.8936597 0.37150400 #> 389      8 7.668307 1.490157  0.2225895 0.82385504 #> 390      7 7.668307 1.490157 -0.4484808 0.65380626 #> 391      4 7.668307 1.490157 -2.4616914 0.01382836 #> 392     10 7.668307 1.490157  1.5647299 0.11764625 #> 393      6 7.668307 1.490157 -1.1195510 0.26290515 #> 394      8 7.668307 1.490157  0.2225895 0.82385504 #> 395      8 7.668307 1.490157  0.2225895 0.82385504 #> 396      7 7.668307 1.490157 -0.4484808 0.65380626 #> 397      8 7.668307 1.490157  0.2225895 0.82385504 #> 398      8 7.668307 1.490157  0.2225895 0.82385504 #> 399      9 7.668307 1.490157  0.8936597 0.37150400 #> 400      9 7.668307 1.490157  0.8936597 0.37150400 #> 401      9 7.668307 1.490157  0.8936597 0.37150400 #> 402      9 7.668307 1.490157  0.8936597 0.37150400 #> 403      9 7.668307 1.490157  0.8936597 0.37150400 #> 404      8 7.668307 1.490157  0.2225895 0.82385504 #> 405      5 7.668307 1.490157 -1.7906212 0.07335410 #> 406      7 7.668307 1.490157 -0.4484808 0.65380626 #> 407      8 7.668307 1.490157  0.2225895 0.82385504 #> 408      8 7.668307 1.490157  0.2225895 0.82385504 #> 409      8 7.668307 1.490157  0.2225895 0.82385504 #> 410      8 7.668307 1.490157  0.2225895 0.82385504 #> 411      8 7.668307 1.490157  0.2225895 0.82385504 #> 412      7 7.668307 1.490157 -0.4484808 0.65380626 #> 413      8 7.668307 1.490157  0.2225895 0.82385504 #> 414     10 7.668307 1.490157  1.5647299 0.11764625 #> 415      8 7.668307 1.490157  0.2225895 0.82385504 #> 416      9 7.668307 1.490157  0.8936597 0.37150400 #> 417      9 7.668307 1.490157  0.8936597 0.37150400 #> 418      8 7.668307 1.490157  0.2225895 0.82385504 #> 419      9 7.668307 1.490157  0.8936597 0.37150400 #> 420      8 7.668307 1.490157  0.2225895 0.82385504 #> 421     11 7.668307 1.490157  2.2358001 0.02536487 #> 422      7 7.668307 1.490157 -0.4484808 0.65380626 #> 423      6 7.668307 1.490157 -1.1195510 0.26290515 #> 424      8 7.668307 1.490157  0.2225895 0.82385504 #> 425      9 7.668307 1.490157  0.8936597 0.37150400 #> 426      5 7.668307 1.490157 -1.7906212 0.07335410 #> 427      9 7.668307 1.490157  0.8936597 0.37150400 #> 428      9 7.668307 1.490157  0.8936597 0.37150400 #> 429     11 7.668307 1.490157  2.2358001 0.02536487 #> 430      8 7.668307 1.490157  0.2225895 0.82385504 #> 431      7 7.668307 1.490157 -0.4484808 0.65380626 #> 432      7 7.668307 1.490157 -0.4484808 0.65380626 #> 433      7 7.668307 1.490157 -0.4484808 0.65380626 #> 434      9 7.668307 1.490157  0.8936597 0.37150400 #> 435      9 7.668307 1.490157  0.8936597 0.37150400 #> 436      8 7.668307 1.490157  0.2225895 0.82385504 #> 437     10 7.668307 1.490157  1.5647299 0.11764625 #> 438      9 7.668307 1.490157  0.8936597 0.37150400 #> 439     10 7.668307 1.490157  1.5647299 0.11764625 #> 440      8 7.668307 1.490157  0.2225895 0.82385504 #> 441     10 7.668307 1.490157  1.5647299 0.11764625 #> 442      9 7.668307 1.490157  0.8936597 0.37150400 #> 443      7 7.668307 1.490157 -0.4484808 0.65380626 #> 444      8 7.668307 1.490157  0.2225895 0.82385504 #> 445     10 7.668307 1.490157  1.5647299 0.11764625 #> 446      8 7.668307 1.490157  0.2225895 0.82385504 #> 447      5 7.668307 1.490157 -1.7906212 0.07335410 #> 448      6 7.668307 1.490157 -1.1195510 0.26290515 #> 449      8 7.668307 1.490157  0.2225895 0.82385504 #> 450      8 7.668307 1.490157  0.2225895 0.82385504 #> 451      8 7.668307 1.490157  0.2225895 0.82385504 #> 452      8 7.668307 1.490157  0.2225895 0.82385504 #> 453      9 7.668307 1.490157  0.8936597 0.37150400 #> 454     10 7.668307 1.490157  1.5647299 0.11764625 #> 455     10 7.668307 1.490157  1.5647299 0.11764625 #> 456      8 7.668307 1.490157  0.2225895 0.82385504 #> 457      7 7.668307 1.490157 -0.4484808 0.65380626 #> 458      7 7.668307 1.490157 -0.4484808 0.65380626 #> 459      9 7.668307 1.490157  0.8936597 0.37150400 #> 460      9 7.668307 1.490157  0.8936597 0.37150400 #> 461      6 7.668307 1.490157 -1.1195510 0.26290515 #> 462      5 7.668307 1.490157 -1.7906212 0.07335410 #> 463     10 7.668307 1.490157  1.5647299 0.11764625 #> 464      8 7.668307 1.490157  0.2225895 0.82385504 #> 465      8 7.668307 1.490157  0.2225895 0.82385504 #> 466      7 7.668307 1.490157 -0.4484808 0.65380626 #> 467      6 7.668307 1.490157 -1.1195510 0.26290515 #> 468      9 7.668307 1.490157  0.8936597 0.37150400 #> 469      8 7.668307 1.490157  0.2225895 0.82385504 #> 470      8 7.668307 1.490157  0.2225895 0.82385504 #> 471      8 7.668307 1.490157  0.2225895 0.82385504 #> 472      7 7.668307 1.490157 -0.4484808 0.65380626 #> 473     10 7.668307 1.490157  1.5647299 0.11764625 #> 474      8 7.668307 1.490157  0.2225895 0.82385504 #> 475      9 7.668307 1.490157  0.8936597 0.37150400 #> 476     10 7.668307 1.490157  1.5647299 0.11764625 #> 477      7 7.668307 1.490157 -0.4484808 0.65380626 #> 478      4 7.668307 1.490157 -2.4616914 0.01382836 #> 479      6 7.668307 1.490157 -1.1195510 0.26290515 #> 480      8 7.668307 1.490157  0.2225895 0.82385504 #> 481      8 7.668307 1.490157  0.2225895 0.82385504 #> 482      8 7.668307 1.490157  0.2225895 0.82385504 #> 483      7 7.668307 1.490157 -0.4484808 0.65380626 #> 484      7 7.668307 1.490157 -0.4484808 0.65380626 #> 485      6 7.668307 1.490157 -1.1195510 0.26290515 #> 486      8 7.668307 1.490157  0.2225895 0.82385504 #> 487      9 7.668307 1.490157  0.8936597 0.37150400 #> 488      8 7.668307 1.490157  0.2225895 0.82385504 #> 489     10 7.668307 1.490157  1.5647299 0.11764625 #> 490     10 7.668307 1.490157  1.5647299 0.11764625 #> 491      8 7.668307 1.490157  0.2225895 0.82385504 #> 492      6 7.668307 1.490157 -1.1195510 0.26290515 #> 493      9 7.668307 1.490157  0.8936597 0.37150400 #> 494      6 7.668307 1.490157 -1.1195510 0.26290515 #> 495      7 7.668307 1.490157 -0.4484808 0.65380626 #> 496      9 7.668307 1.490157  0.8936597 0.37150400 #> 497      8 7.668307 1.490157  0.2225895 0.82385504 #> 498      6 7.668307 1.490157 -1.1195510 0.26290515 #> 499      7 7.668307 1.490157 -0.4484808 0.65380626 #> 500      8 7.668307 1.490157  0.2225895 0.82385504 #> 501      9 7.668307 1.490157  0.8936597 0.37150400 #> 502     10 7.668307 1.490157  1.5647299 0.11764625 #> 503      7 7.668307 1.490157 -0.4484808 0.65380626 #> 504      5 7.668307 1.490157 -1.7906212 0.07335410 #> 505      9 7.668307 1.490157  0.8936597 0.37150400 #> 506      7 7.668307 1.490157 -0.4484808 0.65380626 #> 507      6 7.668307 1.490157 -1.1195510 0.26290515 #> 508     10 7.668307 1.490157  1.5647299 0.11764625 #> 509      8 7.668307 1.490157  0.2225895 0.82385504 #> 510      7 7.668307 1.490157 -0.4484808 0.65380626 #> 511      8 7.668307 1.490157  0.2225895 0.82385504 #> 512     10 7.668307 1.490157  1.5647299 0.11764625 #> 513      9 7.668307 1.490157  0.8936597 0.37150400 #> 514      9 7.668307 1.490157  0.8936597 0.37150400 #> 515     10 7.668307 1.490157  1.5647299 0.11764625 #> 516     11 7.668307 1.490157  2.2358001 0.02536487 #> 517      7 7.668307 1.490157 -0.4484808 0.65380626 #> 518      7 7.668307 1.490157 -0.4484808 0.65380626 #> 519      9 7.668307 1.490157  0.8936597 0.37150400 #> 520      9 7.668307 1.490157  0.8936597 0.37150400 #> 521      7 7.668307 1.490157 -0.4484808 0.65380626 #> 522      6 7.668307 1.490157 -1.1195510 0.26290515 #> 523     10 7.668307 1.490157  1.5647299 0.11764625 #> 524      8 7.668307 1.490157  0.2225895 0.82385504 #> 525     10 7.668307 1.490157  1.5647299 0.11764625 #> 526      7 7.668307 1.490157 -0.4484808 0.65380626 #> 527      6 7.668307 1.490157 -1.1195510 0.26290515 #> 528      7 7.668307 1.490157 -0.4484808 0.65380626 #> 529      9 7.668307 1.490157  0.8936597 0.37150400 #> 530      6 7.668307 1.490157 -1.1195510 0.26290515 #> 531      9 7.668307 1.490157  0.8936597 0.37150400 #> 532     10 7.668307 1.490157  1.5647299 0.11764625 #> 533     10 7.668307 1.490157  1.5647299 0.11764625 #> 534      8 7.668307 1.490157  0.2225895 0.82385504 #> 535     10 7.668307 1.490157  1.5647299 0.11764625 #> 536      8 7.668307 1.490157  0.2225895 0.82385504 #> 537      9 7.668307 1.490157  0.8936597 0.37150400 #> 538      8 7.668307 1.490157  0.2225895 0.82385504 #> 539      8 7.668307 1.490157  0.2225895 0.82385504 #> 540      8 7.668307 1.490157  0.2225895 0.82385504 #> 541      9 7.668307 1.490157  0.8936597 0.37150400 #> 542      9 7.668307 1.490157  0.8936597 0.37150400 #> 543      8 7.668307 1.490157  0.2225895 0.82385504 #> 544      8 7.668307 1.490157  0.2225895 0.82385504 #> 545      8 7.668307 1.490157  0.2225895 0.82385504 #> 546      9 7.668307 1.490157  0.8936597 0.37150400 #> 547      9 7.668307 1.490157  0.8936597 0.37150400 #> 548      8 7.668307 1.490157  0.2225895 0.82385504 #> 549      7 7.668307 1.490157 -0.4484808 0.65380626 #> 550     10 7.668307 1.490157  1.5647299 0.11764625 #> 551     10 7.668307 1.490157  1.5647299 0.11764625 #> 552      9 7.668307 1.490157  0.8936597 0.37150400 #> 553     10 7.668307 1.490157  1.5647299 0.11764625 #> 554      9 7.668307 1.490157  0.8936597 0.37150400 #> 555      8 7.668307 1.490157  0.2225895 0.82385504 #> 556      8 7.668307 1.490157  0.2225895 0.82385504 #> 557     10 7.668307 1.490157  1.5647299 0.11764625 #> 558      7 7.668307 1.490157 -0.4484808 0.65380626 #> 559      9 7.668307 1.490157  0.8936597 0.37150400 #> 560      8 7.668307 1.490157  0.2225895 0.82385504 #> 561      9 7.668307 1.490157  0.8936597 0.37150400 #> 562      9 7.668307 1.490157  0.8936597 0.37150400 #> 563      8 7.668307 1.490157  0.2225895 0.82385504 #> 564      9 7.668307 1.490157  0.8936597 0.37150400 #> 565      6 7.668307 1.490157 -1.1195510 0.26290515 #> 566     10 7.668307 1.490157  1.5647299 0.11764625 #> 567     10 7.668307 1.490157  1.5647299 0.11764625 #> 568     10 7.668307 1.490157  1.5647299 0.11764625 #> 569     10 7.668307 1.490157  1.5647299 0.11764625 #> 570      8 7.668307 1.490157  0.2225895 0.82385504 #> 571      9 7.668307 1.490157  0.8936597 0.37150400 #> 572      6 7.668307 1.490157 -1.1195510 0.26290515 #> 573      9 7.668307 1.490157  0.8936597 0.37150400 #> 574      9 7.668307 1.490157  0.8936597 0.37150400 #> 575      9 7.668307 1.490157  0.8936597 0.37150400 #> 576      8 7.668307 1.490157  0.2225895 0.82385504 #> 577     10 7.668307 1.490157  1.5647299 0.11764625 #> 578      7 7.668307 1.490157 -0.4484808 0.65380626 #> 579      8 7.668307 1.490157  0.2225895 0.82385504 #> 580      7 7.668307 1.490157 -0.4484808 0.65380626 #> 581      8 7.668307 1.490157  0.2225895 0.82385504 #> 582     10 7.668307 1.490157  1.5647299 0.11764625 #> 583      7 7.668307 1.490157 -0.4484808 0.65380626 #> 584      9 7.668307 1.490157  0.8936597 0.37150400 #> 585      7 7.668307 1.490157 -0.4484808 0.65380626 #> 586      5 7.668307 1.490157 -1.7906212 0.07335410 #> 587      6 7.668307 1.490157 -1.1195510 0.26290515 #> 588      6 7.668307 1.490157 -1.1195510 0.26290515 #> 589      7 7.668307 1.490157 -0.4484808 0.65380626 #> 590     10 7.668307 1.490157  1.5647299 0.11764625 #> 591      7 7.668307 1.490157 -0.4484808 0.65380626 #> 592      8 7.668307 1.490157  0.2225895 0.82385504 #> 593      9 7.668307 1.490157  0.8936597 0.37150400 #> 594      9 7.668307 1.490157  0.8936597 0.37150400 #> 595     10 7.668307 1.490157  1.5647299 0.11764625 #> 596      9 7.668307 1.490157  0.8936597 0.37150400 #> 597      5 7.668307 1.490157 -1.7906212 0.07335410 #> 598      9 7.668307 1.490157  0.8936597 0.37150400 #> 599     10 7.668307 1.490157  1.5647299 0.11764625 #> 600      6 7.668307 1.490157 -1.1195510 0.26290515 #> 601      5 7.668307 1.490157 -1.7906212 0.07335410 #> 602      8 7.668307 1.490157  0.2225895 0.82385504 #> 603      9 7.668307 1.490157  0.8936597 0.37150400 #> 604     10 7.668307 1.490157  1.5647299 0.11764625 #> 605      8 7.668307 1.490157  0.2225895 0.82385504 #> 606      8 7.668307 1.490157  0.2225895 0.82385504 #> 607      4 7.668307 1.490157 -2.4616914 0.01382836 #> 608      9 7.668307 1.490157  0.8936597 0.37150400 #> 609      8 7.668307 1.490157  0.2225895 0.82385504 #> 610      9 7.668307 1.490157  0.8936597 0.37150400 #> 611     10 7.668307 1.490157  1.5647299 0.11764625 #> 612      7 7.668307 1.490157 -0.4484808 0.65380626 #> 613      8 7.668307 1.490157  0.2225895 0.82385504 #> 614      9 7.668307 1.490157  0.8936597 0.37150400 #> 615      7 7.668307 1.490157 -0.4484808 0.65380626 #> 616      6 7.668307 1.490157 -1.1195510 0.26290515 #> 617      4 7.668307 1.490157 -2.4616914 0.01382836 #> 618      6 7.668307 1.490157 -1.1195510 0.26290515 #> 619      6 7.668307 1.490157 -1.1195510 0.26290515 #> 620      8 7.668307 1.490157  0.2225895 0.82385504 #> 621      8 7.668307 1.490157  0.2225895 0.82385504 #> 622      7 7.668307 1.490157 -0.4484808 0.65380626 #> 623      5 7.668307 1.490157 -1.7906212 0.07335410 #> 624      6 7.668307 1.490157 -1.1195510 0.26290515 #> 625      9 7.668307 1.490157  0.8936597 0.37150400 #> 626      8 7.668307 1.490157  0.2225895 0.82385504 #> 627      7 7.668307 1.490157 -0.4484808 0.65380626 #> 628      9 7.668307 1.490157  0.8936597 0.37150400 #> 629      9 7.668307 1.490157  0.8936597 0.37150400 #> 630      7 7.668307 1.490157 -0.4484808 0.65380626 #> 631      8 7.668307 1.490157  0.2225895 0.82385504 #> 632      8 7.668307 1.490157  0.2225895 0.82385504 #> 633      9 7.668307 1.490157  0.8936597 0.37150400 #> 634      8 7.668307 1.490157  0.2225895 0.82385504 #> 635      8 7.668307 1.490157  0.2225895 0.82385504 #> 636      8 7.668307 1.490157  0.2225895 0.82385504 #> 637     10 7.668307 1.490157  1.5647299 0.11764625 #> 638      9 7.668307 1.490157  0.8936597 0.37150400 #> 639      7 7.668307 1.490157 -0.4484808 0.65380626 #> 640      9 7.668307 1.490157  0.8936597 0.37150400 #> 641      7 7.668307 1.490157 -0.4484808 0.65380626 #> 642     11 7.668307 1.490157  2.2358001 0.02536487 #> 643      8 7.668307 1.490157  0.2225895 0.82385504 #> 644      9 7.668307 1.490157  0.8936597 0.37150400 #> 645      7 7.668307 1.490157 -0.4484808 0.65380626 #> 646     10 7.668307 1.490157  1.5647299 0.11764625 #> 647      5 7.668307 1.490157 -1.7906212 0.07335410 #> 648      5 7.668307 1.490157 -1.7906212 0.07335410 #> 649      8 7.668307 1.490157  0.2225895 0.82385504 #> 650      9 7.668307 1.490157  0.8936597 0.37150400 #> 651      9 7.668307 1.490157  0.8936597 0.37150400 #> 652      6 7.668307 1.490157 -1.1195510 0.26290515 #> 653      7 7.668307 1.490157 -0.4484808 0.65380626 #> 654      8 7.668307 1.490157  0.2225895 0.82385504 #> 655      7 7.668307 1.490157 -0.4484808 0.65380626 #> 656      8 7.668307 1.490157  0.2225895 0.82385504 #> 657      8 7.668307 1.490157  0.2225895 0.82385504 #> 658      9 7.668307 1.490157  0.8936597 0.37150400 #> 659      7 7.668307 1.490157 -0.4484808 0.65380626 #> 660      9 7.668307 1.490157  0.8936597 0.37150400 #> 661      9 7.668307 1.490157  0.8936597 0.37150400 #> 662      7 7.668307 1.490157 -0.4484808 0.65380626 #> 663      9 7.668307 1.490157  0.8936597 0.37150400 #> 664      8 7.668307 1.490157  0.2225895 0.82385504 #> 665      8 7.668307 1.490157  0.2225895 0.82385504 #> 666     11 7.668307 1.490157  2.2358001 0.02536487 #> 667      8 7.668307 1.490157  0.2225895 0.82385504 #> 668      9 7.668307 1.490157  0.8936597 0.37150400 #> 669      9 7.668307 1.490157  0.8936597 0.37150400 #> 670      8 7.668307 1.490157  0.2225895 0.82385504 #> 671      9 7.668307 1.490157  0.8936597 0.37150400 #> 672     10 7.668307 1.490157  1.5647299 0.11764625 #> 673     10 7.668307 1.490157  1.5647299 0.11764625 #> 674      8 7.668307 1.490157  0.2225895 0.82385504 #> 675      9 7.668307 1.490157  0.8936597 0.37150400 #> 676      9 7.668307 1.490157  0.8936597 0.37150400 #> 677      9 7.668307 1.490157  0.8936597 0.37150400 #> 678      9 7.668307 1.490157  0.8936597 0.37150400 #> 679      9 7.668307 1.490157  0.8936597 0.37150400 #> 680      9 7.668307 1.490157  0.8936597 0.37150400 #> 681      6 7.668307 1.490157 -1.1195510 0.26290515 #> 682      6 7.668307 1.490157 -1.1195510 0.26290515 #> 683      7 7.668307 1.490157 -0.4484808 0.65380626 #> 684      8 7.668307 1.490157  0.2225895 0.82385504 #> 685      8 7.668307 1.490157  0.2225895 0.82385504 #> 686      7 7.668307 1.490157 -0.4484808 0.65380626 #> 687      8 7.668307 1.490157  0.2225895 0.82385504 #> 688      8 7.668307 1.490157  0.2225895 0.82385504 #> 689      8 7.668307 1.490157  0.2225895 0.82385504 #> 690      8 7.668307 1.490157  0.2225895 0.82385504 #> 691      7 7.668307 1.490157 -0.4484808 0.65380626 #> 692      6 7.668307 1.490157 -1.1195510 0.26290515 #> 693     10 7.668307 1.490157  1.5647299 0.11764625 #> 694      7 7.668307 1.490157 -0.4484808 0.65380626 #> 695      6 7.668307 1.490157 -1.1195510 0.26290515 #> 696     11 7.668307 1.490157  2.2358001 0.02536487 #> 697      8 7.668307 1.490157  0.2225895 0.82385504 #> 698      6 7.668307 1.490157 -1.1195510 0.26290515 #> 699      7 7.668307 1.490157 -0.4484808 0.65380626 #> 700      7 7.668307 1.490157 -0.4484808 0.65380626 #> 701      6 7.668307 1.490157 -1.1195510 0.26290515 #> 702      8 7.668307 1.490157  0.2225895 0.82385504 #> 703      8 7.668307 1.490157  0.2225895 0.82385504 #> 704      8 7.668307 1.490157  0.2225895 0.82385504 #> 705      8 7.668307 1.490157  0.2225895 0.82385504 #> 706     10 7.668307 1.490157  1.5647299 0.11764625 #> 707      9 7.668307 1.490157  0.8936597 0.37150400 #> 708      6 7.668307 1.490157 -1.1195510 0.26290515 #> 709      8 7.668307 1.490157  0.2225895 0.82385504 #> 710     10 7.668307 1.490157  1.5647299 0.11764625 #> 711      9 7.668307 1.490157  0.8936597 0.37150400 #> 712      9 7.668307 1.490157  0.8936597 0.37150400 #> 713      8 7.668307 1.490157  0.2225895 0.82385504 #> 714      8 7.668307 1.490157  0.2225895 0.82385504 #> 715     10 7.668307 1.490157  1.5647299 0.11764625 #> 716      7 7.668307 1.490157 -0.4484808 0.65380626 #> 717      7 7.668307 1.490157 -0.4484808 0.65380626 #> 718      9 7.668307 1.490157  0.8936597 0.37150400 #> 719      8 7.668307 1.490157  0.2225895 0.82385504 #> 720      8 7.668307 1.490157  0.2225895 0.82385504 #> 721      9 7.668307 1.490157  0.8936597 0.37150400 #> 722      9 7.668307 1.490157  0.8936597 0.37150400 #> 723      8 7.668307 1.490157  0.2225895 0.82385504 #> 724      8 7.668307 1.490157  0.2225895 0.82385504 #> 725      6 7.668307 1.490157 -1.1195510 0.26290515 #> 726     10 7.668307 1.490157  1.5647299 0.11764625 #> 727      8 7.668307 1.490157  0.2225895 0.82385504 #> 728      9 7.668307 1.490157  0.8936597 0.37150400 #> 729      7 7.668307 1.490157 -0.4484808 0.65380626 #> 730      9 7.668307 1.490157  0.8936597 0.37150400 #> 731      9 7.668307 1.490157  0.8936597 0.37150400 #> 732      7 7.668307 1.490157 -0.4484808 0.65380626 #> 733     10 7.668307 1.490157  1.5647299 0.11764625 #> 734      6 7.668307 1.490157 -1.1195510 0.26290515 #> 735      6 7.668307 1.490157 -1.1195510 0.26290515 #> 736      5 7.668307 1.490157 -1.7906212 0.07335410 #> 737      6 7.668307 1.490157 -1.1195510 0.26290515 #> 738      7 7.668307 1.490157 -0.4484808 0.65380626 #> 739     10 7.668307 1.490157  1.5647299 0.11764625 #> 740      9 7.668307 1.490157  0.8936597 0.37150400 #> 741      9 7.668307 1.490157  0.8936597 0.37150400 #> 742      7 7.668307 1.490157 -0.4484808 0.65380626 #> 743      8 7.668307 1.490157  0.2225895 0.82385504 #> 744      7 7.668307 1.490157 -0.4484808 0.65380626 #> 745      9 7.668307 1.490157  0.8936597 0.37150400 #> 746      9 7.668307 1.490157  0.8936597 0.37150400 #> 747      6 7.668307 1.490157 -1.1195510 0.26290515 #> 748      9 7.668307 1.490157  0.8936597 0.37150400 #> 749      9 7.668307 1.490157  0.8936597 0.37150400 #> 750      6 7.668307 1.490157 -1.1195510 0.26290515 #> 751      8 7.668307 1.490157  0.2225895 0.82385504 #> 752      8 7.668307 1.490157  0.2225895 0.82385504 #> 753      9 7.668307 1.490157  0.8936597 0.37150400 #> 754      9 7.668307 1.490157  0.8936597 0.37150400 #> 755      7 7.668307 1.490157 -0.4484808 0.65380626 #> 756      9 7.668307 1.490157  0.8936597 0.37150400 #> 757     11 7.668307 1.490157  2.2358001 0.02536487 #> 758      7 7.668307 1.490157 -0.4484808 0.65380626 #> 759      9 7.668307 1.490157  0.8936597 0.37150400 #> 760      7 7.668307 1.490157 -0.4484808 0.65380626 #> 761      9 7.668307 1.490157  0.8936597 0.37150400 #> 762      7 7.668307 1.490157 -0.4484808 0.65380626 #> 763      8 7.668307 1.490157  0.2225895 0.82385504 #> 764      8 7.668307 1.490157  0.2225895 0.82385504 #> 765      4 7.668307 1.490157 -2.4616914 0.01382836 #> 766      8 7.668307 1.490157  0.2225895 0.82385504 #> 767      9 7.668307 1.490157  0.8936597 0.37150400 #> 768      8 7.668307 1.490157  0.2225895 0.82385504 #> 769     11 7.668307 1.490157  2.2358001 0.02536487 #> 770      8 7.668307 1.490157  0.2225895 0.82385504 #> 771     10 7.668307 1.490157  1.5647299 0.11764625 #> 772      7 7.668307 1.490157 -0.4484808 0.65380626 #> 773      6 7.668307 1.490157 -1.1195510 0.26290515 #> 774     10 7.668307 1.490157  1.5647299 0.11764625 #> 775      7 7.668307 1.490157 -0.4484808 0.65380626 #> 776      9 7.668307 1.490157  0.8936597 0.37150400 #> 777      8 7.668307 1.490157  0.2225895 0.82385504 #> 778      6 7.668307 1.490157 -1.1195510 0.26290515 #> 779      8 7.668307 1.490157  0.2225895 0.82385504 #> 780     10 7.668307 1.490157  1.5647299 0.11764625 #> 781     10 7.668307 1.490157  1.5647299 0.11764625 #> 782     10 7.668307 1.490157  1.5647299 0.11764625 #> 783      9 7.668307 1.490157  0.8936597 0.37150400 #> 784      6 7.668307 1.490157 -1.1195510 0.26290515 #> 785     10 7.668307 1.490157  1.5647299 0.11764625 #> 786      7 7.668307 1.490157 -0.4484808 0.65380626 #> 787      8 7.668307 1.490157  0.2225895 0.82385504 #> 788      9 7.668307 1.490157  0.8936597 0.37150400 #> 789     10 7.668307 1.490157  1.5647299 0.11764625 #> 790      5 7.668307 1.490157 -1.7906212 0.07335410 #> 791      9 7.668307 1.490157  0.8936597 0.37150400 #> 792      8 7.668307 1.490157  0.2225895 0.82385504 #> 793      8 7.668307 1.490157  0.2225895 0.82385504 #> 794      8 7.668307 1.490157  0.2225895 0.82385504 #> 795      7 7.668307 1.490157 -0.4484808 0.65380626 #> 796      7 7.668307 1.490157 -0.4484808 0.65380626 #> 797      6 7.668307 1.490157 -1.1195510 0.26290515 #> 798      8 7.668307 1.490157  0.2225895 0.82385504 #> 799      8 7.668307 1.490157  0.2225895 0.82385504 #> 800      9 7.668307 1.490157  0.8936597 0.37150400 #> 801      8 7.668307 1.490157  0.2225895 0.82385504 #> 802     10 7.668307 1.490157  1.5647299 0.11764625 #> 803      7 7.668307 1.490157 -0.4484808 0.65380626 #> 804      9 7.668307 1.490157  0.8936597 0.37150400 #> 805     10 7.668307 1.490157  1.5647299 0.11764625 #> 806      8 7.668307 1.490157  0.2225895 0.82385504 #> 807     10 7.668307 1.490157  1.5647299 0.11764625 #> 808      8 7.668307 1.490157  0.2225895 0.82385504 #> 809      7 7.668307 1.490157 -0.4484808 0.65380626 #> 810     10 7.668307 1.490157  1.5647299 0.11764625 #> 811     10 7.668307 1.490157  1.5647299 0.11764625 #> 812      9 7.668307 1.490157  0.8936597 0.37150400 #> 813      9 7.668307 1.490157  0.8936597 0.37150400 #> 814      5 7.668307 1.490157 -1.7906212 0.07335410 #> 815     10 7.668307 1.490157  1.5647299 0.11764625 #> 816     10 7.668307 1.490157  1.5647299 0.11764625 #> 817      9 7.668307 1.490157  0.8936597 0.37150400 #> 818     10 7.668307 1.490157  1.5647299 0.11764625 #> 819      9 7.668307 1.490157  0.8936597 0.37150400 #> 820      7 7.668307 1.490157 -0.4484808 0.65380626 #> 821      8 7.668307 1.490157  0.2225895 0.82385504 #> 822      7 7.668307 1.490157 -0.4484808 0.65380626 #> 823      6 7.668307 1.490157 -1.1195510 0.26290515 #> 824      5 7.668307 1.490157 -1.7906212 0.07335410 #> 825      7 7.668307 1.490157 -0.4484808 0.65380626 #> 826      7 7.668307 1.490157 -0.4484808 0.65380626 #> 827      9 7.668307 1.490157  0.8936597 0.37150400 #> 828      6 7.668307 1.490157 -1.1195510 0.26290515 #> 829      8 7.668307 1.490157  0.2225895 0.82385504 #> 830      9 7.668307 1.490157  0.8936597 0.37150400 #> 831      9 7.668307 1.490157  0.8936597 0.37150400 #> 832      9 7.668307 1.490157  0.8936597 0.37150400 #> 833      7 7.668307 1.490157 -0.4484808 0.65380626 #> 834      8 7.668307 1.490157  0.2225895 0.82385504 #> 835      8 7.668307 1.490157  0.2225895 0.82385504 #> 836      8 7.668307 1.490157  0.2225895 0.82385504 #> 837      9 7.668307 1.490157  0.8936597 0.37150400 #> 838      8 7.668307 1.490157  0.2225895 0.82385504 #> 839      8 7.668307 1.490157  0.2225895 0.82385504 #> 840      7 7.668307 1.490157 -0.4484808 0.65380626 #> 841      9 7.668307 1.490157  0.8936597 0.37150400 #> 842      9 7.668307 1.490157  0.8936597 0.37150400 #> 843      7 7.668307 1.490157 -0.4484808 0.65380626 #> 844     10 7.668307 1.490157  1.5647299 0.11764625 #> 845      9 7.668307 1.490157  0.8936597 0.37150400 #> 846      9 7.668307 1.490157  0.8936597 0.37150400 #> 847      9 7.668307 1.490157  0.8936597 0.37150400 #> 848      8 7.668307 1.490157  0.2225895 0.82385504 #> 849      5 7.668307 1.490157 -1.7906212 0.07335410 #> 850      9 7.668307 1.490157  0.8936597 0.37150400 #> 851     10 7.668307 1.490157  1.5647299 0.11764625 #> 852      8 7.668307 1.490157  0.2225895 0.82385504 #> 853      7 7.668307 1.490157 -0.4484808 0.65380626 #> 854     10 7.668307 1.490157  1.5647299 0.11764625 #> 855      7 7.668307 1.490157 -0.4484808 0.65380626 #> 856      9 7.668307 1.490157  0.8936597 0.37150400 #> 857      9 7.668307 1.490157  0.8936597 0.37150400 #> 858      7 7.668307 1.490157 -0.4484808 0.65380626 #> 859      8 7.668307 1.490157  0.2225895 0.82385504 #> 860     10 7.668307 1.490157  1.5647299 0.11764625 #> 861      8 7.668307 1.490157  0.2225895 0.82385504 #> 862      7 7.668307 1.490157 -0.4484808 0.65380626 #> 863      7 7.668307 1.490157 -0.4484808 0.65380626 #> 864      7 7.668307 1.490157 -0.4484808 0.65380626 #> 865      7 7.668307 1.490157 -0.4484808 0.65380626 #> 866      9 7.668307 1.490157  0.8936597 0.37150400 #> 867      6 7.668307 1.490157 -1.1195510 0.26290515 #> 868      8 7.668307 1.490157  0.2225895 0.82385504 #> 869      9 7.668307 1.490157  0.8936597 0.37150400 #> 870      8 7.668307 1.490157  0.2225895 0.82385504 #> 871      8 7.668307 1.490157  0.2225895 0.82385504 #> 872     10 7.668307 1.490157  1.5647299 0.11764625 #> 873      6 7.668307 1.490157 -1.1195510 0.26290515 #> 874      7 7.668307 1.490157 -0.4484808 0.65380626 #> 875      8 7.668307 1.490157  0.2225895 0.82385504 #> 876      8 7.668307 1.490157  0.2225895 0.82385504 #> 877      7 7.668307 1.490157 -0.4484808 0.65380626 plot(lsrq, sf = FastFood.sf, sig = 0.05)  # }  # Case 3: With a sf object (poligons) fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 listw <- spdep::poly2nb(as(nc,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar p <- c(1/6,3/6,2/6) rho = 0.5 nc$fx <- dgp.spq(p = p, listw = listw, rho = rho) plot(nc[\"fx\"])  formula <- ~ fx lsrq <- local.sp.runs.test(formula = formula, data = nc, listw = listw) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>     runs.i      E.i     Std.i     z.value    p.value #> 1        2 2.855152 0.8722689 -0.98037608 0.32690051 #> 2        3 2.855152 0.8722689  0.16605945 0.86811017 #> 3        5 4.091919 1.1317511  0.80236794 0.42234015 #> 4        1 2.236768 0.7064182 -1.75075861 0.07998750 #> 5        3 3.473535 1.0106752 -0.46853368 0.63940299 #> 6        1 2.855152 0.8722689 -2.12681160 0.03343574 #> 7        2 2.855152 0.8722689 -0.98037608 0.32690051 #> 8        4 4.091919 1.1317511 -0.08121856 0.93526814 #> 9        5 3.473535 1.0106752  1.51034151 0.13095630 #> 10       2 2.855152 0.8722689 -0.98037608 0.32690051 #> 11       4 3.473535 1.0106752  0.52090392 0.60243371 #> 12       3 3.473535 1.0106752 -0.46853368 0.63940299 #> 13       3 4.091919 1.1317511 -0.96480505 0.33464246 #> 14       5 3.473535 1.0106752  1.51034151 0.13095630 #> 15       3 2.855152 0.8722689  0.16605945 0.86811017 #> 16       5 4.710303 1.2405813  0.23351712 0.81535987 #> 17       2 2.855152 0.8722689 -0.98037608 0.32690051 #> 18       5 5.947071 1.4323964 -0.66117921 0.50849739 #> 19       5 3.473535 1.0106752  1.51034151 0.13095630 #> 20       3 2.855152 0.8722689  0.16605945 0.86811017 #> 21       2 2.236768 0.7064182 -0.33516646 0.73749952 #> 22       5 4.091919 1.1317511  0.80236794 0.42234015 #> 23       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 24       6 4.091919 1.1317511  1.68595444 0.09180458 #> 25       5 4.710303 1.2405813  0.23351712 0.81535987 #> 26       5 4.091919 1.1317511  0.80236794 0.42234015 #> 27       5 4.710303 1.2405813  0.23351712 0.81535987 #> 28       2 4.091919 1.1317511 -1.84839155 0.06454572 #> 29       5 4.091919 1.1317511  0.80236794 0.42234015 #> 30       5 4.091919 1.1317511  0.80236794 0.42234015 #> 31       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 32       4 2.855152 0.8722689  1.31249497 0.18935318 #> 33       3 4.091919 1.1317511 -0.96480505 0.33464246 #> 34       5 4.710303 1.2405813  0.23351712 0.81535987 #> 35       4 3.473535 1.0106752  0.52090392 0.60243371 #> 36       5 4.710303 1.2405813  0.23351712 0.81535987 #> 37       4 4.710303 1.2405813 -0.57255663 0.56694493 #> 38       3 2.855152 0.8722689  0.16605945 0.86811017 #> 39       6 6.565455 1.5186493 -0.37234044 0.70963939 #> 40       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 41       3 3.473535 1.0106752 -0.46853368 0.63940299 #> 42       5 4.710303 1.2405813  0.23351712 0.81535987 #> 43       6 4.710303 1.2405813  1.03959088 0.29853002 #> 44       3 4.091919 1.1317511 -0.96480505 0.33464246 #> 45       1 2.236768 0.7064182 -1.75075861 0.07998750 #> 46       6 4.710303 1.2405813  1.03959088 0.29853002 #> 47       4 4.710303 1.2405813 -0.57255663 0.56694493 #> 48       7 5.947071 1.4323964  0.73508234 0.46228935 #> 49       5 4.710303 1.2405813  0.23351712 0.81535987 #> 50       5 4.091919 1.1317511  0.80236794 0.42234015 #> 51       5 5.328687 1.3401523 -0.24526083 0.80625447 #> 52       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 53       6 4.710303 1.2405813  1.03959088 0.29853002 #> 54       5 4.710303 1.2405813  0.23351712 0.81535987 #> 55       5 4.091919 1.1317511  0.80236794 0.42234015 #> 56       3 2.236768 0.7064182  1.08042568 0.27995266 #> 57       4 4.710303 1.2405813 -0.57255663 0.56694493 #> 58       5 3.473535 1.0106752  1.51034151 0.13095630 #> 59       4 3.473535 1.0106752  0.52090392 0.60243371 #> 60       3 2.855152 0.8722689  0.16605945 0.86811017 #> 61       4 4.710303 1.2405813 -0.57255663 0.56694493 #> 62       6 4.710303 1.2405813  1.03959088 0.29853002 #> 63       4 5.328687 1.3401523 -0.99144469 0.32146849 #> 64       4 3.473535 1.0106752  0.52090392 0.60243371 #> 65       2 4.091919 1.1317511 -1.84839155 0.06454572 #> 66       3 3.473535 1.0106752 -0.46853368 0.63940299 #> 67       5 5.947071 1.4323964 -0.66117921 0.50849739 #> 68       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 69       5 4.091919 1.1317511  0.80236794 0.42234015 #> 70       3 4.710303 1.2405813 -1.37863039 0.16800874 #> 71       5 4.091919 1.1317511  0.80236794 0.42234015 #> 72       2 3.473535 1.0106752 -1.45797128 0.14484846 #> 73       4 2.855152 0.8722689  1.31249497 0.18935318 #> 74       7 4.710303 1.2405813  1.84566464 0.06494091 #> 75       3 2.855152 0.8722689  0.16605945 0.86811017 #> 76       1 2.855152 0.8722689 -2.12681160 0.03343574 #> 77       3 2.236768 0.7064182  1.08042568 0.27995266 #> 78       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 79       5 5.328687 1.3401523 -0.24526083 0.80625447 #> 80       3 2.236768 0.7064182  1.08042568 0.27995266 #> 81       3 2.855152 0.8722689  0.16605945 0.86811017 #> 82       4 4.710303 1.2405813 -0.57255663 0.56694493 #> 83       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 84       3 3.473535 1.0106752 -0.46853368 0.63940299 #> 85       1 3.473535 1.0106752 -2.44740888 0.01438875 #> 86       5 3.473535 1.0106752  1.51034151 0.13095630 #> 87       2 3.473535 1.0106752 -1.45797128 0.14484846 #> 88       5 4.710303 1.2405813  0.23351712 0.81535987 #> 89       3 3.473535 1.0106752 -0.46853368 0.63940299 #> 90       2 2.236768 0.7064182 -0.33516646 0.73749952 #> 91       5 4.710303 1.2405813  0.23351712 0.81535987 #> 92       4 2.855152 0.8722689  1.31249497 0.18935318 #> 93       4 3.473535 1.0106752  0.52090392 0.60243371 #> 94       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 95       2 2.855152 0.8722689 -0.98037608 0.32690051 #> 96       4 4.091919 1.1317511 -0.08121856 0.93526814 #> 97       4 5.328687 1.3401523 -0.99144469 0.32146849 #> 98       2 3.473535 1.0106752 -1.45797128 0.14484846 #> 99       1 2.236768 0.7064182 -1.75075861 0.07998750 #> 100      3 2.855152 0.8722689  0.16605945 0.86811017 plot(lsrq, sf = nc)  # Version boot lsrq <- local.sp.runs.test(formula = formula, data = nc, listw = listw,                            distr =\"bootstrap\", nsim = 399) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>     SRQ     EP.i     SdP.i zseudo.value pseudo.value #> 1     2 2.899749 0.8853781 -1.016231773   0.30951903 #> 2     3 2.847118 0.8560664  0.178586851   0.85826212 #> 3     5 4.142857 1.1128048  0.770254455   0.44114897 #> 4     1 2.228070 0.6950030 -1.766999799   0.07722826 #> 5     3 3.493734 1.0046804 -0.491434216   0.62311937 #> 6     1 2.909774 0.8864585 -2.154386641   0.03120986 #> 7     2 2.894737 0.8704804 -1.027865634   0.30401304 #> 8     4 4.035088 1.1247655 -0.031195587   0.97511356 #> 9     5 3.501253 1.0071969  1.488037561   0.13674099 #> 10    2 2.837093 0.8629898 -0.969991500   0.33205073 #> 11    4 3.416040 1.0714867  0.544999665   0.58575375 #> 12    3 3.428571 0.9533257 -0.449554056   0.65303202 #> 13    3 4.110276 1.1660480 -0.952169772   0.34101089 #> 14    5 3.486216 0.9995906  1.514404456   0.12992329 #> 15    3 2.889724 0.8698580  0.126774358   0.89911899 #> 16    5 4.709273 1.2957950  0.224361739   0.82247584 #> 17    2 2.944862 0.8921587 -1.059074076   0.28956605 #> 18    5 6.017544 1.3345780 -0.762446143   0.44579378 #> 19    5 3.501253 1.0096885  1.484365649   0.13771194 #> 20    3 2.877193 0.8839474  0.138930237   0.88950528 #> 21    2 2.270677 0.7413944 -0.365091374   0.71504320 #> 22    5 4.147870 1.1098867  0.767763352   0.44262779 #> 23    4 4.145363 1.1158620 -0.130270057   0.89635277 #> 24    6 4.080201 1.2210811  1.572212880   0.11590119 #> 25    5 4.726817 1.2290690  0.222268196   0.82410511 #> 26    5 4.087719 1.0912280  0.836012949   0.40314762 #> 27    5 4.661654 1.2474328  0.271233730   0.78621127 #> 28    2 4.110276 1.0717335 -1.969030221   0.04894962 #> 29    5 4.090226 1.1239198  0.809465631   0.41824736 #> 30    5 4.132832 1.1185506  0.775260316   0.43818585 #> 31    4 4.065163 1.1256553 -0.057888863   0.95383715 #> 32    4 2.799499 0.8938088  1.343129779   0.17922995 #> 33    3 4.087719 1.1711887 -0.928731037   0.35302849 #> 34    5 4.834586 1.2848975  0.128736755   0.89756595 #> 35    4 3.426065 1.0218332  0.561671764   0.57433968 #> 36    5 4.714286 1.3027113  0.219322798   0.82639860 #> 37    4 4.789474 1.2683981 -0.622417921   0.53366710 #> 38    3 2.817043 0.8618726  0.212278927   0.83188943 #> 39    6 6.591479 1.5273150 -0.387267006   0.69855855 #> 40    4 4.007519 1.1375030 -0.006609914   0.99472609 #> 41    3 3.448622 0.9958415 -0.450494923   0.65235361 #> 42    5 4.614035 1.3305092  0.290088116   0.77174883 #> 43    6 4.711779 1.2559953  1.025657137   0.30505322 #> 44    3 4.152882 1.1557962 -0.997478825   0.31853215 #> 45    1 2.185464 0.7268637 -1.630929726   0.10290515 #> 46    6 4.616541 1.2322415  1.122717117   0.26155766 #> 47    4 4.659148 1.2617728 -0.522398219   0.60139310 #> 48    7 5.879699 1.4373216  0.779436386   0.43572270 #> 49    5 4.774436 1.2417560  0.181649143   0.85585808 #> 50    5 4.157895 1.0855985  0.775705962   0.43792262 #> 51    5 5.253133 1.3084895 -0.193454238   0.84660324 #> 52    4 4.070175 1.1691545 -0.060022381   0.95213781 #> 53    6 4.696742 1.2464077  1.045611464   0.29574045 #> 54    5 4.704261 1.2946573  0.228430600   0.81931150 #> 55    5 4.005013 1.1185844  0.889505929   0.37373124 #> 56    3 2.223058 0.6966320  1.115283746   0.26472885 #> 57    4 4.636591 1.2054168 -0.528109034   0.59742366 #> 58    5 3.365915 0.9982100  1.637015459   0.10162724 #> 59    4 3.478697 1.0169035  0.512637873   0.60820466 #> 60    3 2.746867 0.9125501  0.277390611   0.78148019 #> 61    4 4.746867 1.1489930 -0.650018909   0.51568001 #> 62    6 4.794486 1.2572882  0.958820590   0.33764913 #> 63    4 5.350877 1.3625254 -0.991451045   0.32146539 #> 64    4 3.503759 1.0415300  0.476453469   0.63375135 #> 65    2 4.062657 1.1940320 -1.727471764   0.08408297 #> 66    3 3.385965 1.0521113 -0.366847985   0.71373241 #> 67    5 6.045113 1.4381625 -0.726700046   0.46740973 #> 68    4 4.070175 1.1073476 -0.063372545   0.94946985 #> 69    5 4.042607 1.1542751  0.829432684   0.40685961 #> 70    3 4.684211 1.2032311 -1.399739826   0.16159124 #> 71    5 4.105263 1.1248439  0.795432028   0.42636224 #> 72    2 3.556391 0.9879693 -1.575343392   0.11517720 #> 73    4 2.794486 0.8669647  1.390499252   0.16437733 #> 74    7 4.812030 1.1722313  1.866500140   0.06197142 #> 75    3 2.779449 0.8748173  0.252111373   0.80095498 #> 76    1 2.786967 0.8951183 -1.996347779   0.04589608 #> 77    3 2.288221 0.6722322  1.058829814   0.28967729 #> 78    4 4.060150 1.1654106 -0.051613033   0.95883703 #> 79    5 5.298246 1.3631076 -0.218798297   0.82680717 #> 80    3 2.235589 0.7432352  1.028491401   0.30371873 #> 81    3 2.789474 0.9026981  0.233218974   0.81559137 #> 82    4 4.649123 1.3156167 -0.493398132   0.62173130 #> 83    4 4.037594 1.1145859 -0.033729105   0.97309317 #> 84    3 3.431078 0.9922497 -0.434444789   0.66396548 #> 85    1 3.395990 1.0265735 -2.333968186   0.01959739 #> 86    5 3.516291 1.0317134  1.438102233   0.15040505 #> 87    2 3.401003 1.0678485 -1.311986163   0.18952480 #> 88    5 4.779449 1.2527272  0.176056995   0.86024917 #> 89    3 3.483709 1.0070656 -0.480315542   0.63100304 #> 90    2 2.195489 0.7276863 -0.268644228   0.78820347 #> 91    5 4.583960 1.2709919  0.327334969   0.74341455 #> 92    4 2.927318 0.8781150  1.221573105   0.22186910 #> 93    4 3.523810 0.9918307  0.480112654   0.63114729 #> 94    4 4.055138 1.2428559 -0.044363826   0.96461440 #> 95    2 2.807018 0.9217369 -0.875540041   0.38128013 #> 96    4 4.037594 1.2055526 -0.031184028   0.97512278 #> 97    4 5.263158 1.2832203 -0.984365584   0.32493579 #> 98    2 3.436090 1.0728728 -1.338546595   0.18071832 #> 99    1 2.280702 0.6772717 -1.890971823   0.05862811 #> 100   3 2.907268 0.8411062  0.110249849   0.91221123 plot(lsrq, sf = nc)   # Case 4: With isolated areas data(provinces_spain) listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. provinces_spain$Mal2Fml<- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") plot(provinces_spain[\"Mal2Fml\"])  formula <- ~ Mal2Fml lsrq <- local.sp.runs.test(formula = formula, data = provinces_spain, listw = listw) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>    runs.i      E.i     Std.i     z.value    p.value #> 1       3 2.963265 1.2181954  0.03015501 0.97594343 #> 2       3 3.748571 1.4356803 -0.52140538 0.60208441 #> 3       3 2.177959 0.9361800  0.87807987 0.37990038 #> 4       3 1.785306 0.7491685  1.62138936 0.10493416 #> 5       4 3.355918 1.3328119  0.48325020 0.62891810 #> 6       3 3.355918 1.3328119 -0.26704320 0.78943590 #> 7       0 1.000000       NaN         NaN        NaN #> 8       3 2.177959 0.9361800  0.87807987 0.37990038 #> 9       4 4.141224 1.5291733 -0.09235349 0.92641719 #> 10      2 2.570612 1.0881246 -0.52439971 0.60000056 #> 11      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 12      3 2.177959 0.9361800  0.87807987 0.37990038 #> 13      5 3.355918 1.3328119  1.23354359 0.21737302 #> 14      1 3.355918 1.3328119 -1.76762999 0.07712278 #> 15      1 1.785306 0.7491685 -1.04823694 0.29452945 #> 16      5 3.748571 1.4356803  0.87166242 0.38339257 #> 17      2 1.785306 0.7491685  0.28657621 0.77443683 #> 18      5 3.355918 1.3328119  1.23354359 0.21737302 #> 19      5 3.355918 1.3328119  1.23354359 0.21737302 #> 20      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 21      2 2.177959 0.9361800 -0.19009078 0.84923800 #> 22      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 23      1 3.748571 1.4356803 -1.91447317 0.05555972 #> 24      4 2.963265 1.2181954  0.85104136 0.39474638 #> 25      5 2.963265 1.2181954  1.67192771 0.09453858 #> 26      1 2.963265 1.2181954 -1.61161769 0.10704516 #> 27      2 2.963265 1.2181954 -0.79073134 0.42910078 #> 28      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 29      4 2.570612 1.0881246  1.31362503 0.18897242 #> 30      2 2.963265 1.2181954 -0.79073134 0.42910078 #> 31      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 32      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 33      3 2.570612 1.0881246  0.39461266 0.69312877 #> 34      0 1.000000       NaN         NaN        NaN #> 35      1 2.177959 0.9361800 -1.25826142 0.20829723 #> 36      3 2.570612 1.0881246  0.39461266 0.69312877 #> 37      0 1.000000       NaN         NaN        NaN #> 38      3 2.963265 1.2181954  0.03015501 0.97594343 #> 39      3 3.355918 1.3328119 -0.26704320 0.78943590 #> 40      1 2.963265 1.2181954 -1.61161769 0.10704516 #> 41      5 2.963265 1.2181954  1.67192771 0.09453858 #> 42      5 3.355918 1.3328119  1.23354359 0.21737302 #> 43      4 3.355918 1.3328119  0.48325020 0.62891810 #> 44      4 2.963265 1.2181954  0.85104136 0.39474638 #> 45      5 3.748571 1.4356803  0.87166242 0.38339257 #> 46      3 2.570612 1.0881246  0.39461266 0.69312877 #> 47      1 2.570612 1.0881246 -1.44341209 0.14890442 #> 48      8 4.141224 1.5291733  2.52343903 0.01162132 #> 49      5 2.963265 1.2181954  1.67192771 0.09453858 #> 50      1 2.177959 0.9361800 -1.25826142 0.20829723 plot(lsrq, sf = provinces_spain, sig = 0.1)   # Boots Version lsrq <- local.sp.runs.test(formula = formula, data = provinces_spain, listw = listw,                            distr =\"bootstrap\", nsim = 199) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(lsrq) #>    SRQ     EP.i     SdP.i zseudo.value pseudo.value #> 1    3 2.904523 1.2333455   0.07741334   0.93829473 #> 2    3 3.748744 1.3696516  -0.54666730   0.58460732 #> 3    3 2.120603 0.9241582   0.95156545   0.34131741 #> 4    3 1.768844 0.7432077   1.65654326   0.09761185 #> 5    4 3.296482 1.2900308   0.54534945   0.58551320 #> 6    3 3.487437 1.2667436  -0.38479546   0.70038896 #> 7    0 0.000000 0.0000000          NaN          NaN #> 8    3 2.266332 0.9125512   0.80397503   0.42141140 #> 9    4 4.160804 1.5256300  -0.10540172   0.91605705 #> 10   2 2.623116 1.1297932  -0.55153065   0.58126996 #> 11   1 2.261307 0.9385462  -1.34389390   0.17898270 #> 12   3 2.211055 1.0128859   0.77890782   0.43603401 #> 13   5 3.467337 1.3362424   1.14699493   0.25138372 #> 14   1 3.457286 1.2897947  -1.90517640   0.05675714 #> 15   1 1.723618 0.7170330  -1.00918379   0.31288650 #> 16   5 3.814070 1.4179951   0.83634255   0.40296222 #> 17   2 1.824121 0.7681942   0.22895174   0.81890643 #> 18   5 3.195980 1.2700051   1.42048252   0.15546725 #> 19   5 3.552764 1.4688620   0.98527719   0.32448793 #> 20   1 2.221106 0.9163811  -1.33253024   0.18268601 #> 21   2 2.100503 0.8989049  -0.11180550   0.91097763 #> 22   1 2.567839 1.0797357  -1.45205833   0.14648539 #> 23   1 3.839196 1.5189947  -1.86912834   0.06160496 #> 24   4 3.005025 1.1827783   0.84121840   0.40022559 #> 25   5 2.919598 1.2364693   1.68253426   0.09246529 #> 26   1 2.869347 1.1472475  -1.62941887   0.10322438 #> 27   2 3.030151 1.2427956  -0.82889798   0.40716214 #> 28   1 2.633166 1.1464066  -1.42459567   0.15427411 #> 29   4 2.452261 1.0132867   1.52744402   0.12665064 #> 30   2 3.035176 1.2406291  -0.83439597   0.40405789 #> 31   1 2.603015 1.0580098  -1.51512304   0.12974125 #> 32   1 2.110553 0.9308621  -1.19303683   0.23285495 #> 33   3 2.547739 1.0232067   0.44200386   0.65848641 #> 34   0 0.000000 0.0000000          NaN          NaN #> 35   1 2.125628 0.8985378  -1.25273320   0.21030282 #> 36   3 2.587940 1.1595259   0.35536964   0.72231269 #> 37   0 0.000000 0.0000000          NaN          NaN #> 38   3 2.864322 1.2499226   0.10854944   0.91355987 #> 39   3 3.417085 1.4431691  -0.28900663   0.77257630 #> 40   1 2.974874 1.1825208  -1.67005468   0.09490855 #> 41   5 2.934673 1.1852433   1.74253384   0.08141508 #> 42   5 3.351759 1.3768961   1.19707015   0.23127922 #> 43   4 3.452261 1.3013134   0.42091220   0.67381919 #> 44   4 2.974874 1.1739478   0.87322932   0.38253809 #> 45   5 3.944724 1.4536474   0.72595073   0.46786897 #> 46   3 2.648241 1.1750282   0.29936199   0.76466386 #> 47   1 2.497487 1.0292410  -1.45494340   0.14568493 #> 48   8 4.130653 1.5995628   2.41900273   0.01556312 #> 49   5 2.984925 1.2491508   1.61315625   0.10671056 #> 50   1 2.251256 0.9832876  -1.27252322   0.20318728 plot(lsrq, sf = provinces_spain, sig = 0.10)   # Case 5: SRQ test based on a distance matrix (inverse distance) # \\donttest{ N <- 100 cx <- runif(N) cy <- runif(N) coor <- as.data.frame(cbind(cx,cy)) coor <- sf::st_as_sf(coor,coords = c(\"cx\",\"cy\")) n = dim(coor)[1] dis <- 1/matrix(as.numeric(sf::st_distance(coor,coor)), ncol = n, nrow = n) diag(dis) <- 0 dis <- (dis < quantile(dis,.10))*dis p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = dis, rho = rho) lsrq <- local.sp.runs.test(fx = fx, listw = dis) print(lsrq) #>     runs.i       E.i     Std.i     z.value    p.value #> 1        3  2.855152 0.8722689  0.16605945 0.86811017 #> 2        5  4.091919 1.1317511  0.80236794 0.42234015 #> 3        3  3.473535 1.0106752 -0.46853368 0.63940299 #> 4        3  3.473535 1.0106752 -0.46853368 0.63940299 #> 5       15 14.604444 2.3462098  0.16859343 0.86611645 #> 6       15 14.604444 2.3462098  0.16859343 0.86611645 #> 7       24 22.643434 2.9150932  0.46535928 0.64167419 #> 8        2  2.236768 0.7064182 -0.33516646 0.73749952 #> 9        4  3.473535 1.0106752  0.52090392 0.60243371 #> 10       0  1.000000       NaN         NaN        NaN #> 11      21 22.025051 2.8765991 -0.35634111 0.72158513 #> 12       0  1.000000       NaN         NaN        NaN #> 13       7 10.275758 1.9514092 -1.67866257 0.09321783 #> 14       0  1.000000       NaN         NaN        NaN #> 15       0  1.000000       NaN         NaN        NaN #> 16       0  1.000000       NaN         NaN        NaN #> 17       6  5.328687 1.3401523  0.50092302 0.61642530 #> 18       4  3.473535 1.0106752  0.52090392 0.60243371 #> 19      18 17.696364 2.5846046  0.11747885 0.90648061 #> 20       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 21       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 22       3  2.236768 0.7064182  1.08042568 0.27995266 #> 23      21 23.261818 2.9528798 -0.76597029 0.44369398 #> 24       9  7.183838 1.5998803  1.13518595 0.25629741 #> 25       9 10.275758 1.9514092 -0.65376220 0.51326502 #> 26       0  1.000000       NaN         NaN        NaN #> 27       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 28       2  2.236768 0.7064182 -0.33516646 0.73749952 #> 29       0  1.000000       NaN         NaN        NaN #> 30      21 24.498586 3.0264361 -1.15600849 0.24767769 #> 31       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 32       5  4.091919 1.1317511  0.80236794 0.42234015 #> 33       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 34      10  9.038990 1.8199699  0.52803625 0.59747417 #> 35       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 36       8  7.183838 1.5998803  0.51013918 0.60995396 #> 37       9  8.420606 1.7500327  0.33107607 0.74058703 #> 38       3  2.855152 0.8722689  0.16605945 0.86811017 #> 39       0  1.000000       NaN         NaN        NaN #> 40       4  3.473535 1.0106752  0.52090392 0.60243371 #> 41       1  1.618384 0.4857831 -1.27296272 0.20303127 #> 42       7  9.038990 1.8199699 -1.12034263 0.26256778 #> 43       6  6.565455 1.5186493 -0.37234044 0.70963939 #> 44       9  9.038990 1.8199699 -0.02142338 0.98290793 #> 45       3  2.236768 0.7064182  1.08042568 0.27995266 #> 46       3  2.855152 0.8722689  0.16605945 0.86811017 #> 47       8  6.565455 1.5186493  0.94461932 0.34485326 #> 48       7  7.183838 1.5998803 -0.11490759 0.90851837 #> 49       9 10.275758 1.9514092 -0.65376220 0.51326502 #> 50       8  7.802222 1.6768193  0.11794817 0.90610872 #> 51       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 52       8  6.565455 1.5186493  0.94461932 0.34485326 #> 53       5  4.710303 1.2405813  0.23351712 0.81535987 #> 54      14  9.657374 1.8869954  2.30134436 0.02137217 #> 55       6  7.802222 1.6768193 -1.07478616 0.28247048 #> 56       3  2.236768 0.7064182  1.08042568 0.27995266 #> 57       5  4.091919 1.1317511  0.80236794 0.42234015 #> 58       0  1.000000       NaN         NaN        NaN #> 59       0  1.000000       NaN         NaN        NaN #> 60       6  5.328687 1.3401523  0.50092302 0.61642530 #> 61       7  8.420606 1.7500327 -0.81175974 0.41692951 #> 62       8  7.802222 1.6768193  0.11794817 0.90610872 #> 63       0  1.000000       NaN         NaN        NaN #> 64      14 11.512525 2.0733657  1.19972796 0.23024501 #> 65      12 10.894141 2.0134619  0.54923242 0.58284596 #> 66       9 10.275758 1.9514092 -0.65376220 0.51326502 #> 67       0  1.000000       NaN         NaN        NaN #> 68       6  5.328687 1.3401523  0.50092302 0.61642530 #> 69       0  1.000000       NaN         NaN        NaN #> 70       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 71       7  9.657374 1.8869954 -1.40825659 0.15905510 #> 72       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 73       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 74       3  2.855152 0.8722689  0.16605945 0.86811017 #> 75      19 16.459596 2.4927161  1.01913090 0.30814083 #> 76       7  6.565455 1.5186493  0.28613944 0.77477133 #> 77       4  3.473535 1.0106752  0.52090392 0.60243371 #> 78      20 20.788283 2.7973712 -0.28179415 0.77810136 #> 79       6  5.947071 1.4323964  0.03695157 0.97052362 #> 80       3  2.855152 0.8722689  0.16605945 0.86811017 #> 81       8  7.802222 1.6768193  0.11794817 0.90610872 #> 82      13 12.749293 2.1874260  0.11461283 0.90875201 #> 83       0  1.000000       NaN         NaN        NaN #> 84       5  4.091919 1.1317511  0.80236794 0.42234015 #> 85      19 17.696364 2.5846046  0.50438523 0.61399070 #> 86       8  7.183838 1.5998803  0.51013918 0.60995396 #> 87       5  4.091919 1.1317511  0.80236794 0.42234015 #> 88       0  1.000000       NaN         NaN        NaN #> 89       0  1.000000       NaN         NaN        NaN #> 90       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 91       1  1.618384 0.4857831 -1.27296272 0.20303127 #> 92      10 11.512525 2.0733657 -0.72950241 0.46569439 #> 93      19 17.696364 2.5846046  0.50438523 0.61399070 #> 94       9  6.565455 1.5186493  1.60309920 0.10891276 #> 95       7  6.565455 1.5186493  0.28613944 0.77477133 #> 96       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 97      19 15.841212 2.4451048  1.29188238 0.19639788 #> 98      25 21.406667 2.8373687  1.26643156 0.20535862 #> 99       6  5.947071 1.4323964  0.03695157 0.97052362 #> 100      0  1.000000       NaN         NaN        NaN plot(lsrq, coor = cbind(cx,cy), sig = 0.05)  lsrq <- local.sp.runs.test(fx = fx, listw = dis, data = ) print(lsrq) #>     runs.i       E.i     Std.i     z.value    p.value #> 1        3  2.855152 0.8722689  0.16605945 0.86811017 #> 2        5  4.091919 1.1317511  0.80236794 0.42234015 #> 3        3  3.473535 1.0106752 -0.46853368 0.63940299 #> 4        3  3.473535 1.0106752 -0.46853368 0.63940299 #> 5       15 14.604444 2.3462098  0.16859343 0.86611645 #> 6       15 14.604444 2.3462098  0.16859343 0.86611645 #> 7       24 22.643434 2.9150932  0.46535928 0.64167419 #> 8        2  2.236768 0.7064182 -0.33516646 0.73749952 #> 9        4  3.473535 1.0106752  0.52090392 0.60243371 #> 10       0  1.000000       NaN         NaN        NaN #> 11      21 22.025051 2.8765991 -0.35634111 0.72158513 #> 12       0  1.000000       NaN         NaN        NaN #> 13       7 10.275758 1.9514092 -1.67866257 0.09321783 #> 14       0  1.000000       NaN         NaN        NaN #> 15       0  1.000000       NaN         NaN        NaN #> 16       0  1.000000       NaN         NaN        NaN #> 17       6  5.328687 1.3401523  0.50092302 0.61642530 #> 18       4  3.473535 1.0106752  0.52090392 0.60243371 #> 19      18 17.696364 2.5846046  0.11747885 0.90648061 #> 20       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 21       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 22       3  2.236768 0.7064182  1.08042568 0.27995266 #> 23      21 23.261818 2.9528798 -0.76597029 0.44369398 #> 24       9  7.183838 1.5998803  1.13518595 0.25629741 #> 25       9 10.275758 1.9514092 -0.65376220 0.51326502 #> 26       0  1.000000       NaN         NaN        NaN #> 27       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 28       2  2.236768 0.7064182 -0.33516646 0.73749952 #> 29       0  1.000000       NaN         NaN        NaN #> 30      21 24.498586 3.0264361 -1.15600849 0.24767769 #> 31       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 32       5  4.091919 1.1317511  0.80236794 0.42234015 #> 33       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 34      10  9.038990 1.8199699  0.52803625 0.59747417 #> 35       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 36       8  7.183838 1.5998803  0.51013918 0.60995396 #> 37       9  8.420606 1.7500327  0.33107607 0.74058703 #> 38       3  2.855152 0.8722689  0.16605945 0.86811017 #> 39       0  1.000000       NaN         NaN        NaN #> 40       4  3.473535 1.0106752  0.52090392 0.60243371 #> 41       1  1.618384 0.4857831 -1.27296272 0.20303127 #> 42       7  9.038990 1.8199699 -1.12034263 0.26256778 #> 43       6  6.565455 1.5186493 -0.37234044 0.70963939 #> 44       9  9.038990 1.8199699 -0.02142338 0.98290793 #> 45       3  2.236768 0.7064182  1.08042568 0.27995266 #> 46       3  2.855152 0.8722689  0.16605945 0.86811017 #> 47       8  6.565455 1.5186493  0.94461932 0.34485326 #> 48       7  7.183838 1.5998803 -0.11490759 0.90851837 #> 49       9 10.275758 1.9514092 -0.65376220 0.51326502 #> 50       8  7.802222 1.6768193  0.11794817 0.90610872 #> 51       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 52       8  6.565455 1.5186493  0.94461932 0.34485326 #> 53       5  4.710303 1.2405813  0.23351712 0.81535987 #> 54      14  9.657374 1.8869954  2.30134436 0.02137217 #> 55       6  7.802222 1.6768193 -1.07478616 0.28247048 #> 56       3  2.236768 0.7064182  1.08042568 0.27995266 #> 57       5  4.091919 1.1317511  0.80236794 0.42234015 #> 58       0  1.000000       NaN         NaN        NaN #> 59       0  1.000000       NaN         NaN        NaN #> 60       6  5.328687 1.3401523  0.50092302 0.61642530 #> 61       7  8.420606 1.7500327 -0.81175974 0.41692951 #> 62       8  7.802222 1.6768193  0.11794817 0.90610872 #> 63       0  1.000000       NaN         NaN        NaN #> 64      14 11.512525 2.0733657  1.19972796 0.23024501 #> 65      12 10.894141 2.0134619  0.54923242 0.58284596 #> 66       9 10.275758 1.9514092 -0.65376220 0.51326502 #> 67       0  1.000000       NaN         NaN        NaN #> 68       6  5.328687 1.3401523  0.50092302 0.61642530 #> 69       0  1.000000       NaN         NaN        NaN #> 70       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 71       7  9.657374 1.8869954 -1.40825659 0.15905510 #> 72       2  3.473535 1.0106752 -1.45797128 0.14484846 #> 73       1  2.236768 0.7064182 -1.75075861 0.07998750 #> 74       3  2.855152 0.8722689  0.16605945 0.86811017 #> 75      19 16.459596 2.4927161  1.01913090 0.30814083 #> 76       7  6.565455 1.5186493  0.28613944 0.77477133 #> 77       4  3.473535 1.0106752  0.52090392 0.60243371 #> 78      20 20.788283 2.7973712 -0.28179415 0.77810136 #> 79       6  5.947071 1.4323964  0.03695157 0.97052362 #> 80       3  2.855152 0.8722689  0.16605945 0.86811017 #> 81       8  7.802222 1.6768193  0.11794817 0.90610872 #> 82      13 12.749293 2.1874260  0.11461283 0.90875201 #> 83       0  1.000000       NaN         NaN        NaN #> 84       5  4.091919 1.1317511  0.80236794 0.42234015 #> 85      19 17.696364 2.5846046  0.50438523 0.61399070 #> 86       8  7.183838 1.5998803  0.51013918 0.60995396 #> 87       5  4.091919 1.1317511  0.80236794 0.42234015 #> 88       0  1.000000       NaN         NaN        NaN #> 89       0  1.000000       NaN         NaN        NaN #> 90       3  3.473535 1.0106752 -0.46853368 0.63940299 #> 91       1  1.618384 0.4857831 -1.27296272 0.20303127 #> 92      10 11.512525 2.0733657 -0.72950241 0.46569439 #> 93      19 17.696364 2.5846046  0.50438523 0.61399070 #> 94       9  6.565455 1.5186493  1.60309920 0.10891276 #> 95       7  6.565455 1.5186493  0.28613944 0.77477133 #> 96       2  2.855152 0.8722689 -0.98037608 0.32690051 #> 97      19 15.841212 2.4451048  1.29188238 0.19639788 #> 98      25 21.406667 2.8373687  1.26643156 0.20535862 #> 99       6  5.947071 1.4323964  0.03695157 0.97052362 #> 100      0  1.000000       NaN         NaN        NaN plot(lsrq, sf = coor)  # Version boots lsrq <- local.sp.runs.test(fx = fx, listw = dis, data = coor,                            distr =\"bootstrap\", nsim = 299) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 18 sub-graphs print(lsrq) #>     SRQ      EP.i     SdP.i zseudo.value pseudo.value #> 1     3  2.832776 0.8184918   0.20430758   0.83811315 #> 2     5  4.043478 1.1821303   0.80915082   0.41842840 #> 3     3  3.454849 1.0461506  -0.43478395   0.66371925 #> 4     3  3.478261 1.0176442  -0.46996866   0.63837741 #> 5    15 14.545151 2.3445929   0.19399935   0.84617639 #> 6    15 14.602007 2.3513803   0.16925944   0.86559258 #> 7    24 22.602007 2.7106791   0.51573545   0.60603919 #> 8     2  2.284281 0.7208220  -0.39438440   0.69329726 #> 9     4  3.478261 1.0143413   0.51436251   0.60699856 #> 10    0  0.000000 0.0000000          NaN          NaN #> 11   21 22.096990 2.7588706  -0.39762285   0.69090822 #> 12    0  0.000000 0.0000000          NaN          NaN #> 13    7 10.387960 1.8957712  -1.78711431   0.07391902 #> 14    0  0.000000 0.0000000          NaN          NaN #> 15    0  0.000000 0.0000000          NaN          NaN #> 16    0  0.000000 0.0000000          NaN          NaN #> 17    6  5.344482 1.3677964   0.47925143   0.63175977 #> 18    4  3.478261 1.0784788   0.48377321   0.62854683 #> 19   18 17.682274 2.4376907   0.13033883   0.89629836 #> 20    2  2.862876 0.8849562  -0.97504972   0.32953560 #> 21    3  3.401338 1.0163751  -0.39487173   0.69293755 #> 22    3  2.240803 0.7015376   1.08219044   0.27916792 #> 23   21 23.287625 2.9408396  -0.77788173   0.43663874 #> 24    9  7.187291 1.6069393   1.12805069   0.25929851 #> 25    9 10.364548 1.8710656  -0.72928948   0.46582460 #> 26    0  0.000000 0.0000000          NaN          NaN #> 27    3  3.411371 1.0529622  -0.39067998   0.69603380 #> 28    2  2.260870 0.7086526  -0.36812052   0.71278337 #> 29    0  0.000000 0.0000000          NaN          NaN #> 30   21 24.501672 3.2464483  -1.07861635   0.28075879 #> 31    1  2.314381 0.7291812  -1.80254408   0.07145985 #> 32    5  4.083612 1.2052871   0.76030675   0.44707125 #> 33    2  2.913043 0.8309030  -1.09885690   0.27183049 #> 34   10  9.207358 1.8182001   0.43594879   0.66287389 #> 35    3  3.458194 0.9970214  -0.45956281   0.64583006 #> 36    8  7.100334 1.5467979   0.58163096   0.56081529 #> 37    9  8.354515 1.8522808   0.34848115   0.72747887 #> 38    3  2.879599 0.8702109   0.13835881   0.88995685 #> 39    0  0.000000 0.0000000          NaN          NaN #> 40    4  3.451505 1.0460004   0.52437358   0.60001873 #> 41    1  1.581940 0.4940671  -1.17785588   0.23885407 #> 42    7  8.989967 1.8143443  -1.09679653   0.27273035 #> 43    6  6.448161 1.5434930  -0.29035475   0.77154486 #> 44    9  8.929766 1.7887841   0.03926361   0.96868022 #> 45    3  2.260870 0.6943013   1.06456729   0.28707179 #> 46    3  2.849498 0.8557493   0.17587123   0.86039511 #> 47    8  6.451505 1.5737431   0.98395668   0.32513681 #> 48    7  7.073579 1.4998672  -0.04905674   0.96087408 #> 49    9 10.441472 1.8786381  -0.76729605   0.44290552 #> 50    8  7.655518 1.5964709   0.21577694   0.82916163 #> 51    3  3.387960 1.0083488  -0.38474769   0.70042436 #> 52    8  6.555184 1.4835106   0.97391693   0.33009778 #> 53    5  4.675585 1.2738092   0.25468078   0.79896966 #> 54   14  9.525084 1.9734495   2.26756063   0.02335600 #> 55    6  7.785953 1.7167757  -1.04029500   0.29820287 #> 56    3  2.204013 0.7248124   1.09819680   0.27211856 #> 57    5  4.030100 1.1332810   0.85583334   0.39208997 #> 58    0  0.000000 0.0000000          NaN          NaN #> 59    0  0.000000 0.0000000          NaN          NaN #> 60    6  5.284281 1.3669592   0.52358478   0.60056737 #> 61    7  8.227425 1.7840975  -0.68798077   0.49146489 #> 62    8  7.698997 1.5916199   0.18911760   0.85000065 #> 63    0  0.000000 0.0000000          NaN          NaN #> 64   14 11.595318 2.0950833   1.14777407   0.25106184 #> 65   12 11.073579 2.1491229   0.43106954   0.66641781 #> 66    9 10.133779 1.9938234  -0.56864579   0.56959654 #> 67    0  0.000000 0.0000000          NaN          NaN #> 68    6  5.247492 1.4256585   0.52783214   0.59761585 #> 69    0  0.000000 0.0000000          NaN          NaN #> 70    3  3.438127 1.0388516  -0.42174176   0.67321352 #> 71    7  9.675585 1.7774990  -1.50525279   0.13225910 #> 72    2  3.511706 0.9774454  -1.54658843   0.12196252 #> 73    1  2.247492 0.6846486  -1.82209043   0.06844127 #> 74    3  2.789298 0.9478442   0.22229639   0.82408316 #> 75   19 16.535117 2.5372270   0.97148694   0.33130585 #> 76    7  6.525084 1.4843274   0.31995394   0.74900325 #> 77    4  3.408027 1.0933305   0.54144034   0.58820411 #> 78   20 20.729097 2.7226719  -0.26778731   0.78886304 #> 79    6  6.000000 1.5586950   0.00000000   1.00000000 #> 80    3  2.872910 0.8731079   0.14556082   0.88426810 #> 81    8  7.752508 1.6585002   0.14922617   0.88137517 #> 82   13 12.565217 2.1295920   0.20416240   0.83822659 #> 83    0  0.000000 0.0000000          NaN          NaN #> 84    5  4.056856 1.1381627   0.82865468   0.40729984 #> 85   19 17.799331 2.4603977   0.48799790   0.62555133 #> 86    8  7.096990 1.5950714   0.56612516   0.57130870 #> 87    5  4.086957 1.2036565   0.75855816   0.44811691 #> 88    0  0.000000 0.0000000          NaN          NaN #> 89    0  0.000000 0.0000000          NaN          NaN #> 90    3  3.404682 1.0298130  -0.39296674   0.69434405 #> 91    1  1.638796 0.4811548  -1.32763088   0.18430008 #> 92   10 11.581940 2.0355420  -0.77715902   0.43706496 #> 93   19 17.391304 2.4475830   0.65725888   0.51101447 #> 94    9  6.461538 1.4704103   1.72636277   0.08428217 #> 95    7  6.642140 1.5508268   0.23075402   0.81750590 #> 96    2  2.842809 0.8966980  -0.93990328   0.34726717 #> 97   19 15.739130 2.5274680   1.29017244   0.19699079 #> 98   25 21.464883 2.7904326   1.26687059   0.20520157 #> 99    6  5.969900 1.3911623   0.02163682   0.98273766 #> 100   0  0.000000 0.0000000          NaN          NaN plot(lsrq, sf = coor)   # SRQ test based on inverse distance data(\"FastFood.sf\") # sf::sf_use_s2(FALSE) n = dim(FastFood.sf)[1] dis <- 1000000/matrix(as.numeric(           sf::st_distance(FastFood.sf, FastFood.sf)),           ncol = n, nrow = n) diag(dis) <- 0 dis <- (dis < quantile(dis,.01))*dis formula <- ~ Type lsrq <- local.sp.runs.test(formula = formula, data = FastFood.sf, listw = dis) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 436 sub-graphs print(lsrq) #>     runs.i        E.i      Std.i       z.value    p.value #> 1       16  19.004428 2.44850757 -1.227045e+00 0.21980579 #> 2       30  31.674211 3.19588410 -5.238648e-01 0.60037261 #> 3        0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 4        0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 5        0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 6        0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 7       10  11.002460 1.82503944 -5.492814e-01 0.58281238 #> 8        0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 9        2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 10       4   5.000984 1.15429461 -8.671825e-01 0.38584204 #> 11       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 12       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 13       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 14       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 15       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 16       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 17       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 18       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 19       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 20       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 21       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 22       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 23       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 24       8   9.001968 1.63237562 -6.138098e-01 0.53934104 #> 25       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 26       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 27       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 28       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 29       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 30       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 31       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 32       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 33      11   9.668799 1.69902630  7.835083e-01 0.43332868 #> 34       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 35       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 36      14  15.003444 2.15939578 -4.646875e-01 0.64215528 #> 37       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 38       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 39      39  33.007872 3.26461537  1.835477e+00 0.06643499 #> 40       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 41       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 42       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 43       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 44       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 45       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 46       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 47       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 48       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 49       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 50       5   5.000984 1.15429461 -8.525138e-04 0.99931979 #> 51       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 52       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 53       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 54      16  17.670767 2.35608263 -7.091292e-01 0.47824433 #> 55       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 56       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 57       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 58       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 59       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 60       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 61       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 62      10   9.001968 1.63237562  6.113984e-01 0.54093584 #> 63       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 64      18  15.670275 2.21020923  1.054074e+00 0.29184882 #> 65       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 66       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 67      33  36.342026 3.43042252 -9.742315e-01 0.32994159 #> 68       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 69       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 70      94  87.021157 5.35156194  1.304076e+00 0.19220771 #> 71       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 72      21  17.670767 2.35608263  1.413038e+00 0.15764470 #> 73       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 74       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 75       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 76      32  35.008364 3.36508045 -8.939948e-01 0.37132467 #> 77      49  41.676671 3.68020424  1.989925e+00 0.04659925 #> 78       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 79       4   4.334153 1.05373221 -3.171141e-01 0.75115700 #> 80      46  37.675687 3.49454267  2.382089e+00 0.01721472 #> 81       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 82       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 83       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 84     188 177.043298 7.65503034  1.431307e+00 0.15234213 #> 85       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 86       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 87       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 88       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 89       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 90       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 91       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 92       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 93       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 94       4   4.334153 1.05373221 -3.171141e-01 0.75115700 #> 95       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 96       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 97       0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 98       2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 99       2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 100      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 101      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 102      4   4.334153 1.05373221 -3.171141e-01 0.75115700 #> 103      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 104      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 105      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 106      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 107      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 108      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 109      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 110      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 111     21  20.338090 2.53756790  2.608444e-01 0.79421249 #> 112      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 113      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 114      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 115      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 116      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 117     19  21.004920 2.58094570 -7.768161e-01 0.43726726 #> 118      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 119      4   5.000984 1.15429461 -8.671825e-01 0.38584204 #> 120      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 121     29  28.340058 3.01721207  2.187259e-01 0.82686360 #> 122      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 123      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 124      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 125      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 126      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 127      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 128      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 129     86  75.685036 4.98654707  2.068559e+00 0.03858754 #> 130      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 131      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 132      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 133      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 134      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 135      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 136      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 137     25  25.672735 2.86626456 -2.347079e-01 0.81443544 #> 138      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 139      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 140      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 141      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 142      4   3.667323 0.94250012  3.529732e-01 0.72410852 #> 143      6   6.334645 1.33284778 -2.510755e-01 0.80175575 #> 144      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 145      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 146     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 147     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 148     15  12.336121 1.94289607  1.371086e+00 0.17034800 #> 149      9   8.335137 1.56288494  4.254072e-01 0.67053983 #> 150     30  28.340058 3.01721207  5.501577e-01 0.58221125 #> 151     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 152      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 153      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 154      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 155      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 156      6   7.668307 1.49015700 -1.119551e+00 0.26290515 #> 157      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 158      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 159      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 160      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 161      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 162      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 163      4   4.334153 1.05373221 -3.171141e-01 0.75115700 #> 164      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 165      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 166      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 167      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 168      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 169      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 170      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 171      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 172      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 173     15  12.336121 1.94289607  1.371086e+00 0.17034800 #> 174      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 175      7   7.668307 1.49015700 -4.484808e-01 0.65380626 #> 176      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 177      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 178      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 179      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 180     16  19.004428 2.44850757 -1.227045e+00 0.21980579 #> 181      4   4.334153 1.05373221 -3.171141e-01 0.75115700 #> 182      6   7.668307 1.49015700 -1.119551e+00 0.26290515 #> 183      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 184      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 185      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 186      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 187      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 188      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 189      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 190      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 191      4   3.667323 0.94250012  3.529732e-01 0.72410852 #> 192      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 193      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 194      7   7.668307 1.49015700 -4.484808e-01 0.65380626 #> 195      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 196     10  11.002460 1.82503944 -5.492814e-01 0.58281238 #> 197      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 198      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 199     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 200      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 201      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 202     36  35.008364 3.36508045  2.946841e-01 0.76823524 #> 203      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 204      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 205      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 206      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 207     45  37.675687 3.49454267  2.095929e+00 0.03608850 #> 208      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 209      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 210      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 211      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 212      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 213      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 214     25  25.672735 2.86626456 -2.347079e-01 0.81443544 #> 215      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 216      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 217      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 218      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 219      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 220      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 221      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 222      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 223      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 224      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 225     23  19.671259 2.49343546  1.335002e+00 0.18187572 #> 226      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 227     15  15.670275 2.21020923 -3.032631e-01 0.76168938 #> 228      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 229      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 230     11   9.668799 1.69902630  7.835083e-01 0.43332868 #> 231     33  36.342026 3.43042252 -9.742315e-01 0.32994159 #> 232     13  11.669291 1.88488922  7.059880e-01 0.48019559 #> 233      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 234      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 235      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 236      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 237      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 238      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 239      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 240      6   7.668307 1.49015700 -1.119551e+00 0.26290515 #> 241      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 242      6   5.000984 1.15429461  8.654774e-01 0.38677679 #> 243      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 244    188 177.043298 7.65503034  1.431307e+00 0.15234213 #> 245     33  36.342026 3.43042252 -9.742315e-01 0.32994159 #> 246     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 247      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 248      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 249      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 250      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 251      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 252      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 253      5   5.000984 1.15429461 -8.525138e-04 0.99931979 #> 254      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 255      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 256      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 257     49  41.676671 3.68020424  1.989925e+00 0.04659925 #> 258     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 259      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 260      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 261      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 262      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 263      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 264      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 265      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 266      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 267      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 268      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 269      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 270      2   3.000492 0.81624798 -1.225721e+00 0.22030381 #> 271     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 272      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 273      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 274      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 275      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 276      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 277      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 278      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 279      9   8.335137 1.56288494  4.254072e-01 0.67053983 #> 280      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 281     24  23.005412 2.70691089  3.674254e-01 0.71330176 #> 282      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 283     15  12.336121 1.94289607  1.371086e+00 0.17034800 #> 284      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 285      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 286      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 287      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 288      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 289      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 290      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 291      3   3.667323 0.94250012 -7.080346e-01 0.47892377 #> 292      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 293      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 294     16  17.670767 2.35608263 -7.091292e-01 0.47824433 #> 295      5   5.000984 1.15429461 -8.525138e-04 0.99931979 #> 296      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 297      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 298      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 299     17  15.670275 2.21020923  6.016286e-01 0.54742137 #> 300      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 301      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 302      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 303      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 304      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 305      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 306      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 307      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 308      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 309      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 310      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 311      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 312      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 313      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 314      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 315      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 316      5   5.000984 1.15429461 -8.525138e-04 0.99931979 #> 317     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 318      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 319      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 320      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 321      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 322     38  35.008364 3.36508045  8.890235e-01 0.37399046 #> 323     34  35.008364 3.36508045 -2.996554e-01 0.76444004 #> 324     33  30.340550 3.12564144  8.508494e-01 0.39485299 #> 325      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 326     26  23.672243 2.74761605  8.471915e-01 0.39688838 #> 327     36  32.341042 3.23043258  1.132653e+00 0.25736012 #> 328      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 329     24  24.339074 2.78772681 -1.216309e-01 0.90319136 #> 330      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 331     89  83.687004 5.24684304  1.012608e+00 0.31124734 #> 332      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 333      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 334      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 335      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 336      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 337     11   9.668799 1.69902630  7.835083e-01 0.43332868 #> 338      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 339      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 340     14  11.669291 1.88488922  1.236523e+00 0.21626416 #> 341     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 342      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 343      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 344      3   3.667323 0.94250012 -7.080346e-01 0.47892377 #> 345      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 346      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 347      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 348      9   8.335137 1.56288494  4.254072e-01 0.67053983 #> 349      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 350      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 351     17  15.670275 2.21020923  6.016286e-01 0.54742137 #> 352     38  33.007872 3.26461537  1.529163e+00 0.12622415 #> 353      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 354     26  25.005904 2.82726846  3.516099e-01 0.72513081 #> 355     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 356      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 357      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 358     47  44.343994 3.79893944  6.991441e-01 0.48446198 #> 359     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 360      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 361      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 362      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 363      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 364      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 365      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 366      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 367      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 368      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 369      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 370      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 371      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 372      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 373      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 374      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 375      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 376      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 377      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 378      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 379      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 380      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 381      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 382      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 383      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 384      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 385      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 386      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 387      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 388      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 389      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 390      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 391      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 392      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 393      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 394      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 395      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 396      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 397      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 398      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 399      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 400      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 401      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 402     45  38.342518 3.52616541  1.888023e+00 0.05902283 #> 403      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 404     42  45.010825 3.82804764 -7.865170e-01 0.43156466 #> 405      3   3.667323 0.94250012 -7.080346e-01 0.47892377 #> 406      8   9.001968 1.63237562 -6.138098e-01 0.53934104 #> 407      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 408      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 409      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 410      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 411      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 412      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 413      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 414      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 415      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 416     32  35.008364 3.36508045 -8.939948e-01 0.37132467 #> 417     36  35.008364 3.36508045  2.946841e-01 0.76823524 #> 418     31  31.674211 3.19588410 -2.109623e-01 0.83291669 #> 419      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 420      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 421      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 422      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 423      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 424      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 425      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 426      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 427      5   4.334153 1.05373221  6.318936e-01 0.52745642 #> 428     36  34.341534 3.33192879  4.977496e-01 0.61866054 #> 429      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 430     21  17.670767 2.35608263  1.413038e+00 0.15764470 #> 431     25  23.005412 2.70691089  7.368502e-01 0.46121348 #> 432      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 433      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 434      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 435      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 436      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 437      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 438     26  24.339074 2.78772681  5.957995e-01 0.55130915 #> 439      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 440      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 441      7   5.667815 1.24677180  1.068508e+00 0.28529156 #> 442      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 443      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 444      8   7.001476 1.41369228  7.063234e-01 0.47998705 #> 445      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 446      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 447      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 448     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 449      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 450      6   6.334645 1.33284778 -2.510755e-01 0.80175575 #> 451      3   3.667323 0.94250012 -7.080346e-01 0.47892377 #> 452      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 453      3   3.667323 0.94250012 -7.080346e-01 0.47892377 #> 454     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 455      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 456     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 457      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 458     11   9.668799 1.69902630  7.835083e-01 0.43332868 #> 459     10   7.668307 1.49015700  1.564730e+00 0.11764625 #> 460      5   5.667815 1.24677180 -5.356351e-01 0.59221077 #> 461      3   4.334153 1.05373221 -1.266122e+00 0.20546946 #> 462      9   8.335137 1.56288494  4.254072e-01 0.67053983 #> 463     20  20.338090 2.53756790 -1.332337e-01 0.89400855 #> 464     11   9.668799 1.69902630  7.835083e-01 0.43332868 #> 465     18  14.336614 2.10735730  1.738379e+00 0.08214399 #> 466     44  37.675687 3.49454267  1.809768e+00 0.07033171 #> 467     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 468     31  28.340058 3.01721207  8.815894e-01 0.37799887 #> 469     46  37.675687 3.49454267  2.382089e+00 0.01721472 #> 470      9   9.001968 1.63237562 -1.205669e-03 0.99903802 #> 471     18  19.671259 2.49343546 -6.702636e-01 0.50268980 #> 472      9   9.001968 1.63237562 -1.205669e-03 0.99903802 #> 473      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 474      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 475      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 476      7   8.335137 1.56288494 -8.542775e-01 0.39295125 #> 477      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 478      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 479      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 480      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 481      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 482      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 483      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 484      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 485      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 486      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 487      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 488      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 489      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 490      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 491      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 492      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 493      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 494      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 495      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 496      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 497      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 498      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 499      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 500      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 501      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 502      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 503      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 504      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 505      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 506      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 507      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 508      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 509      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 510      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 511      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 512      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 513      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 514      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 515      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 516      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 517      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 518      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 519      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 520      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 521      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 522      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 523      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 524      2   1.666831 0.47134650  7.068459e-01 0.47966227 #> 525      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 526      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 527      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 528      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 529      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 530      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 531      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 532      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 533      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 534      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 535      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 536      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 537      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 538      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 539      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 540      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 541      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 542      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 543      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 544      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 545      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 546      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 547      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 548      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 549      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 550      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 551      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 552      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 553      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 554      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 555      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 556      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 557      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 558     11  10.335629 1.76315909  3.768069e-01 0.70631710 #> 559      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 560      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 561      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 562      8   8.335137 1.56288494 -2.144351e-01 0.83020775 #> 563      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 564      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 565      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 566      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 567     93  87.021157 5.35156194  1.117215e+00 0.26390260 #> 568      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 569      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 570      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 571      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 572      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 573     76  73.684544 4.91932012  4.706863e-01 0.63786480 #> 574      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 575      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 576      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 577      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 578      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 579     17  17.670767 2.35608263 -2.846958e-01 0.77587719 #> 580      9  11.002460 1.82503944 -1.097215e+00 0.27254754 #> 581      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 582      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 583      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 584      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 585      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 586      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 587      4   3.667323 0.94250012  3.529732e-01 0.72410852 #> 588      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 589      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 590      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 591      4   5.667815 1.24677180 -1.337706e+00 0.18099214 #> 592      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 593      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 594      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 595      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 596      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 597      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 598      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 599      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 600      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 601      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 602      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 603      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 604      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 605      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 606      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 607      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 608      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 609      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 610      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 611      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 612      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 613      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 614      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 615     45  36.342026 3.43042252  2.523880e+00 0.01160676 #> 616      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 617      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 618      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 619      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 620      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 621      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 622      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 623      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 624      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 625      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 626     45  42.343502 3.71024441  7.159901e-01 0.47399748 #> 627      6   6.334645 1.33284778 -2.510755e-01 0.80175575 #> 628      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 629      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 630      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 631      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 632      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 633      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 634      5   4.334153 1.05373221  6.318936e-01 0.52745642 #> 635      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 636      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 637      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 638      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 639      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 640      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 641     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 642      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 643      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 644     28  26.339566 2.90473707  5.716298e-01 0.56757279 #> 645      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 646      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 647      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 648      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 649      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 650      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 651      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 652      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 653      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 654      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 655      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 656      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 657      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 658      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 659      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 660      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 661      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 662      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 663      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 664      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 665      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 666      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 667     32  31.007380 3.16095794  3.140249e-01 0.75350210 #> 668      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 669      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 670      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 671      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 672     17  17.003936 2.30848272 -1.705106e-03 0.99863952 #> 673      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 674      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 675     15  19.004428 2.44850757 -1.635457e+00 0.10195333 #> 676      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 677      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 678      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 679     20  17.670767 2.35608263  9.886042e-01 0.32285684 #> 680      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 681     46  39.009348 3.55750697  1.965042e+00 0.04940935 #> 682      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 683      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 684      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 685      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 686     14  12.336121 1.94289607  8.563909e-01 0.39178159 #> 687     25  24.339074 2.78772681  2.370843e-01 0.81259136 #> 688      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 689      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 690      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 691      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 692     39  36.342026 3.43042252  7.748241e-01 0.43844358 #> 693     41  34.341534 3.33192879  1.998382e+00 0.04567527 #> 694      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 695      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 696      4   5.000984 1.15429461 -8.671825e-01 0.38584204 #> 697      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 698      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 699      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 700      9   9.001968 1.63237562 -1.205669e-03 0.99903802 #> 701      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 702     75  73.684544 4.91932012  2.674061e-01 0.78915648 #> 703      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 704      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 705      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 706      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 707     17  20.338090 2.53756790 -1.315468e+00 0.18835264 #> 708      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 709      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 710      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 711      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 712      4   3.667323 0.94250012  3.529732e-01 0.72410852 #> 713      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 714      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 715     21  20.338090 2.53756790  2.608444e-01 0.79421249 #> 716      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 717      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 718    226 223.721446 8.60988206  2.646441e-01 0.79128365 #> 719     17  19.004428 2.44850757 -8.186326e-01 0.41299603 #> 720     85  77.018697 5.03086568  1.586467e+00 0.11263338 #> 721      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 722      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 723      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 724     29  25.672735 2.86626456  1.160837e+00 0.24570833 #> 725     26  25.672735 2.86626456  1.141782e-01 0.90909651 #> 726      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 727     47  44.343994 3.79893944  6.991441e-01 0.48446198 #> 728      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 729      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 730      9   9.668799 1.69902630 -3.936365e-01 0.69384942 #> 731      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 732      4   5.000984 1.15429461 -8.671825e-01 0.38584204 #> 733      5   4.334153 1.05373221  6.318936e-01 0.52745642 #> 734      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 735      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 736      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 737      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 738      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 739     51  41.676671 3.68020424  2.533373e+00 0.01129708 #> 740      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 741      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 742      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 743      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 744      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 745      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 746     33  35.008364 3.36508045 -5.968251e-01 0.55062417 #> 747      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 748      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 749      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 750      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 751      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 752      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 753      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 754     32  31.674211 3.19588410  1.019402e-01 0.91880417 #> 755     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 756      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 757      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 758      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 759      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 760      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 761      6   6.334645 1.33284778 -2.510755e-01 0.80175575 #> 762      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 763      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 764      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 765      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 766      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 767      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 768      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 769      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 770      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 771      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 772     18  14.336614 2.10735730  1.738379e+00 0.08214399 #> 773      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 774      7   6.334645 1.33284778  4.991977e-01 0.61764009 #> 775      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 776      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 777      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 778      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 779      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 780      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 781      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 782      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 783      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 784      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 785      4   3.667323 0.94250012  3.529732e-01 0.72410852 #> 786     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 787      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 788      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 789      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 790      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 791      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 792      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 793      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 794      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 795      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 796      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 797      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 798      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 799      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 800      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 801      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 802      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 803      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 804     36  34.341534 3.33192879  4.977496e-01 0.61866054 #> 805      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 806      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 807      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 808      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 809      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 810      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 811      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 812      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 813      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 814      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 815      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 816      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 817      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 818     23  19.671259 2.49343546  1.335002e+00 0.18187572 #> 819      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 820      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 821      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 822     10   9.668799 1.69902630  1.949359e-01 0.84544313 #> 823      1   1.666831 0.47134650 -1.414736e+00 0.15714603 #> 824      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 825      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 826      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 827      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 828      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 829      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 830      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 831      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 832      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 833      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 834      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 835      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 836      9   7.668307 1.49015700  8.936597e-01 0.37150400 #> 837      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 838      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 839     19  21.004920 2.58094570 -7.768161e-01 0.43726726 #> 840      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 841      4   5.000984 1.15429461 -8.671825e-01 0.38584204 #> 842      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 843      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 844      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 845      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 846      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 847      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 848      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 849      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 850      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 851      4   3.667323 0.94250012  3.529732e-01 0.72410852 #> 852      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 853      7   7.668307 1.49015700 -4.484808e-01 0.65380626 #> 854      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 855      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 856      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 857      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 858      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 859      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 860      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 861     27  25.005904 2.82726846  7.053082e-01 0.48061845 #> 862      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 863     25  23.672243 2.74761605  4.832397e-01 0.62892558 #> 864      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 865      6   6.334645 1.33284778 -2.510755e-01 0.80175575 #> 866      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 867      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 868      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 869      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 870      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 871     19  17.003936 2.30848272  8.646648e-01 0.38722279 #> 872      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 873      0   1.000000 0.01095397 -9.129110e+01 0.00000000 #> 874     22  20.338090 2.53756790  6.549225e-01 0.51251763 #> 875      8   7.668307 1.49015700  2.225895e-01 0.82385504 #> 876      3   3.000492 0.81624798 -6.027899e-04 0.99951904 #> 877     14  16.337106 2.25988030 -1.034172e+00 0.30105564 # plot(lsrq, sf = FastFood.sf) # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate m-surroundings — m.surround","title":"A function to generate m-surroundings — m.surround","text":"function obtains m-surroundings selecting m-1 nearest neighbors observation, allowing degree overlap r.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate m-surroundings — m.surround","text":"","code":"m.surround(x, m, r = 1, distance = \"Euclidean\", control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate m-surroundings — m.surround","text":"x input sf object points/multipolygons geometry matrix spatial coordinates m dimension m-surrounding r maximum overlapping two m-surroundings. distance character. Cartesian coordinates : one Euclidean, Hausdorff Frechet; geodetic coordinates, Great Circle distances computed. (see sf::st_distance()). Default = \"Euclidean\". control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to generate m-surroundings — m.surround","text":"list class list m_surr containing following components:","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"control-arguments","dir":"Reference","previous_headings":"","what":"Control arguments","title":"A function to generate m-surroundings — m.surround","text":"initobs: Initial observation begin m-surrounding process. Default = 1. dtmaxabs: Threshold distance (absolute value) prune m-surroundings. m-surrounding exceeding threshold excluded. dtmaxabs = 0 exclusion m-surroundings. Default = 0. dtmaxpc: Threshold distance (percentage maximum distance observations) prune m-surroundings. m-surrounding exceeding threshold excluded. Example dtmaxpc = 0.1 m-surrounding exceeding 10% maximum distance observations excluded. dtmaxpc = 0 exclusion m-surroundings. Default = 0. dtmaxknn: Eliminate m-surroundings elements among closest knn (k-nearest-neighbors). Example, dtmaxknn = 4 exclude m-surroundings elements 4 closest. Default dtmaxknn = 0 (exclusion)","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to generate m-surroundings — m.surround","text":"Ruiz M, López FA, Páez. (2010). Testing spatial association qualitative data using symbolic dynamics. Journal Geographical Systems. 12 (3) 281-309","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/m.surround.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate m-surroundings — m.surround","text":"","code":"# Example 1: Obtain m-surroundings with degree of overlapping r N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) m <- 3 r <- 1 msurr_points <- m.surround(x = x, m = m, r = r) plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 2 sub-graphs  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 49 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 1 #>  #> List of no-symbolized observations: #> 38 #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 1 m-surrounding #>     There are 47 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.9592 msurr_points <- m.surround(x = x, m = m, r = r,                 control = list(dtmaxpc = 0.1)) #>  #>  Threshold distance:  0.1316995 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  17  #>  #>  Index of spatial observations excluded:  5 30 42 3 9 11 13 17 20 25 27 31 34 39 41 44 45  plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 36 sub-graphs  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 32 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 26 #>  #> List of no-symbolized observations: #> 8 9 10 11 14 15 25 31 35 38 51 52 53 54 57 61 62 64 71 75 77 85 89 93 95 96 #>  #> List of the degree overlaping: #>     There are 4 m-surrounding that have intersection with 0 m-surrounding #>     There are 12 m-surrounding that have intersection with 1 m-surrounding #>     There are 16 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.375 msurr_points <- m.surround(x = x, m = m, r = r,                    control = list(dtmaxknn = 20)) plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 6 sub-graphs  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 47 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 4 #>  #> List of no-symbolized observations: #> 10 25 38 52 #>  #> List of the degree overlaping: #>     There are 4 m-surrounding that have intersection with 1 m-surrounding #>     There are 43 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.9149  # Example 2: # \\donttest{ data(\"FastFood.sf\") m <- 3 r <- 1 msurr_points <- m.surround(x = FastFood.sf, m = m, r = r,                            distance = \"Euclidean\",                            control = list(dtmaxpc = .001)) #>  #>  Threshold distance:  105.4512 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  424  #>  #>  Index of spatial observations excludedplot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 849 sub-graphs  print(msurr_points) #>       [,1] [,2] [,3] #>  [1,]    1  180  675 #>  [2,]    7  580  196 #>  [3,]   65  520  793 #>  [4,]   87  234  136 #>  [5,]  139  284  343 #>  [6,]  366  347  217 #>  [7,]  390   17  742 #>  [8,]  422    9  662 #>  [9,]  467  199  271 #> [10,]  488  133  657 #> [11,]  637  515  103 #> [12,]  654  832  387 #> [13,]  664  175  852 #> [14,]  791  650   81 summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 14 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 835 #>  #> List of no-symbolized observations: #> 2 3 4 5 6 8 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 82 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 134 135 137 138 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 176 177 178 179 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 197 198 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 277 278 279 280 281 282 283 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 344 345 346 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 388 389 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 516 517 518 519 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 638 639 640 641 642 643 644 645 646 647 648 649 651 652 653 655 656 658 659 660 661 663 665 666 667 668 669 670 671 672 673 674 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 792 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 #>  #> List of the degree overlaping: #>     There are 14 m-surrounding that have intersection with 0 m-surrounding #> Mean degree of overlaping: 0 msurr_points <- m.surround(x = FastFood.sf, m = m, r = r,                            distance = \"Euclidean\",                            control = list(dtmaxknn = 20)) plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 59 sub-graphs  summary(msurr_points) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 409 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 34 #>  #> List of no-symbolized observations: #> 21 30 56 94 99 115 119 211 285 312 345 418 432 494 523 525 567 618 646 655 660 663 736 776 789 796 798 799 809 815 827 862 871 876 #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 0 m-surrounding #>     There are 46 m-surrounding that have intersection with 1 m-surrounding #>     There are 361 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.8778 # }  # Example 3: With isolated areas data(provinces_spain) # sf::sf_use_s2(FALSE) plot(sf::st_geometry(provinces_spain))  m <- 3 r <- 1 msurr_points <- m.surround(x = provinces_spain, m = m, r = r,                            distance = \"Euclidean\",                            control = list(dtmaxknn = 8)) plot(msurr_points, type = 1) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 10 sub-graphs #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data   # Example 4: With regular lattice sfc = sf::st_sfc(sf::st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))) hexs <- sf::st_make_grid(sfc, cellsize = 0.1, square = FALSE) hexs.sf <- sf::st_sf(hexs) listw  <- spdep::poly2nb(as(hexs.sf, \"Spatial\"), queen = FALSE) m <- 3 r <- 1 msurr_polygonsf <- m.surround(x = hexs.sf, m = m, r = r) plot(msurr_polygonsf, type = 1)  plot(msurr_polygonsf, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error  summary(msurr_polygonsf) #>  #> Characteristics of m-surrounding: #>  #> Number of m-surrounding (R): 74 #> Length of m-surrounding (m): 3 #> Number no-symbolized observations: 0 #>  #> List of no-symbolized observations: #>  #>  #> List of the degree overlaping: #>     There are 2 m-surrounding that have intersection with 1 m-surrounding #>     There are 72 m-surrounding that have intersection with 2 m-surrounding #> Mean degree of overlaping: 1.973"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localjc.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class localjc — methods_localjc","title":"Methods for class localjc — methods_localjc","text":"plot() function allows user plot significant observations. print() function used print number runs localization. Additional information expected values standard deviation, z-value ans p-value prited observation.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localjc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class localjc — methods_localjc","text":"","code":"# S3 method for class 'localjc' print(x, ...)  # S3 method for class 'localjc' plot(x, ..., sf = NULL, coor = NULL, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localjc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class localjc — methods_localjc","text":"x localjc object created Q.test. ... arguments passed methods. sf optional argument plot() method include sf object (default = NULL) coor optional argument plot() method include coordinates points (default = NULL) sig significant level observation plot() method. Default sig = 0.05","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localjc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class localjc — methods_localjc","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localjc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class localjc — methods_localjc","text":"Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localjc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for class localjc — methods_localjc","text":"","code":"# Example 1: Local spatial runs test based on knn N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) #>     runs.i      E.i   Std.i    z.value      p.value #> 1        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 2        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 3        3 7.183838 1.59988 -2.6150947 0.0044601364 #> 4        8 7.183838 1.59988  0.5101392 0.6950230217 #> 5        8 7.183838 1.59988  0.5101392 0.6950230217 #> 6        4 7.183838 1.59988 -1.9900479 0.0232928297 #> 7        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 8        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 9        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 10       9 7.183838 1.59988  1.1351860 0.8718512930 #> 11       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 12       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 13       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 14       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 15       8 7.183838 1.59988  0.5101392 0.6950230217 #> 16       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 17       8 7.183838 1.59988  0.5101392 0.6950230217 #> 18       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 19      10 7.183838 1.59988  1.7602327 0.9608158220 #> 20       8 7.183838 1.59988  0.5101392 0.6950230217 #> 21       8 7.183838 1.59988  0.5101392 0.6950230217 #> 22       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 23       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 24       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 25       9 7.183838 1.59988  1.1351860 0.8718512930 #> 26       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 27       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 28       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 29       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 30       8 7.183838 1.59988  0.5101392 0.6950230217 #> 31       8 7.183838 1.59988  0.5101392 0.6950230217 #> 32       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 33       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 34       8 7.183838 1.59988  0.5101392 0.6950230217 #> 35       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 36       9 7.183838 1.59988  1.1351860 0.8718512930 #> 37       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 38       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 39       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 40       9 7.183838 1.59988  1.1351860 0.8718512930 #> 41       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 42       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 43       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 44       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 45       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 46       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 47       9 7.183838 1.59988  1.1351860 0.8718512930 #> 48       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 49       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 50       8 7.183838 1.59988  0.5101392 0.6950230217 #> 51       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 52       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 53      11 7.183838 1.59988  2.3852795 0.9914669250 #> 54       8 7.183838 1.59988  0.5101392 0.6950230217 #> 55       8 7.183838 1.59988  0.5101392 0.6950230217 #> 56       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 57       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 58       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 59       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 60       2 7.183838 1.59988 -3.2401414 0.0005973521 #> 61       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 62       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 63       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 64       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 65       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 66       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 67       8 7.183838 1.59988  0.5101392 0.6950230217 #> 68       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 69       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 70       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 71       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 72       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 73       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 74       8 7.183838 1.59988  0.5101392 0.6950230217 #> 75       8 7.183838 1.59988  0.5101392 0.6950230217 #> 76       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 77       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 78       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 79       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 80       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 81       9 7.183838 1.59988  1.1351860 0.8718512930 #> 82       8 7.183838 1.59988  0.5101392 0.6950230217 #> 83       8 7.183838 1.59988  0.5101392 0.6950230217 #> 84       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 85       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 86       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 87       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 88       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 89       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 90       9 7.183838 1.59988  1.1351860 0.8718512930 #> 91       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 92       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 93       8 7.183838 1.59988  0.5101392 0.6950230217 #> 94       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 95      10 7.183838 1.59988  1.7602327 0.9608158220 #> 96       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 97       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 98       8 7.183838 1.59988  0.5101392 0.6950230217 #> 99       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 100      8 7.183838 1.59988  0.5101392 0.6950230217 plot(lsrq, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class localsrq — methods_localsrq","title":"Methods for class localsrq — methods_localsrq","text":"plot() function allows user plot significant observations. print() function used print number runs localization. Additional information expected values standard deviation, z-value ans p-value prited observation.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class localsrq — methods_localsrq","text":"","code":"# S3 method for class 'localsrq' print(x, ...)  # S3 method for class 'localsrq' plot(x, ..., sf = NULL, coor = NULL, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class localsrq — methods_localsrq","text":"x localsrq object created Q.test. ... arguments passed methods. sf optional argument plot() method include sf object (default = NULL) coor optional argument plot() method include coordinates points (default = NULL) sig significant level observation plot() method. Default sig = 0.05","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class localsrq — methods_localsrq","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class localsrq — methods_localsrq","text":"Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_localsrq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for class localsrq — methods_localsrq","text":"","code":"# Example 1: Local spatial runs test based on knn N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho)  # Asymtotic version lsrq <- local.sp.runs.test(fx = fx, listw = listw, alternative = \"less\") print(lsrq) #>     runs.i      E.i   Std.i    z.value      p.value #> 1        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 2        8 7.183838 1.59988  0.5101392 0.6950230217 #> 3        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 4        6 7.183838 1.59988 -0.7399544 0.2296638446 #> 5        3 7.183838 1.59988 -2.6150947 0.0044601364 #> 6        5 7.183838 1.59988 -1.3650011 0.0861263477 #> 7        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 8        6 7.183838 1.59988 -0.7399544 0.2296638446 #> 9        7 7.183838 1.59988 -0.1149076 0.4542591853 #> 10       8 7.183838 1.59988  0.5101392 0.6950230217 #> 11      10 7.183838 1.59988  1.7602327 0.9608158220 #> 12       9 7.183838 1.59988  1.1351860 0.8718512930 #> 13       8 7.183838 1.59988  0.5101392 0.6950230217 #> 14       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 15       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 16      10 7.183838 1.59988  1.7602327 0.9608158220 #> 17       8 7.183838 1.59988  0.5101392 0.6950230217 #> 18       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 19       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 20       8 7.183838 1.59988  0.5101392 0.6950230217 #> 21       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 22       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 23       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 24       2 7.183838 1.59988 -3.2401414 0.0005973521 #> 25       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 26       8 7.183838 1.59988  0.5101392 0.6950230217 #> 27       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 28       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 29       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 30       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 31       8 7.183838 1.59988  0.5101392 0.6950230217 #> 32      10 7.183838 1.59988  1.7602327 0.9608158220 #> 33      10 7.183838 1.59988  1.7602327 0.9608158220 #> 34      10 7.183838 1.59988  1.7602327 0.9608158220 #> 35       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 36       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 37       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 38       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 39       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 40       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 41       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 42       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 43       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 44       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 45       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 46      10 7.183838 1.59988  1.7602327 0.9608158220 #> 47       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 48       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 49       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 50       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 51       9 7.183838 1.59988  1.1351860 0.8718512930 #> 52       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 53       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 54       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 55       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 56       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 57       8 7.183838 1.59988  0.5101392 0.6950230217 #> 58       9 7.183838 1.59988  1.1351860 0.8718512930 #> 59       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 60      10 7.183838 1.59988  1.7602327 0.9608158220 #> 61       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 62      10 7.183838 1.59988  1.7602327 0.9608158220 #> 63       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 64       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 65       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 66       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 67       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 68       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 69       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 70       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 71       8 7.183838 1.59988  0.5101392 0.6950230217 #> 72       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 73       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 74       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 75       8 7.183838 1.59988  0.5101392 0.6950230217 #> 76       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 77       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 78       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 79       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 80       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 81       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 82       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 83       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 84       9 7.183838 1.59988  1.1351860 0.8718512930 #> 85       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 86       8 7.183838 1.59988  0.5101392 0.6950230217 #> 87       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 88       3 7.183838 1.59988 -2.6150947 0.0044601364 #> 89       8 7.183838 1.59988  0.5101392 0.6950230217 #> 90       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 91       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 92       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 93       9 7.183838 1.59988  1.1351860 0.8718512930 #> 94       5 7.183838 1.59988 -1.3650011 0.0861263477 #> 95       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 96       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 97       6 7.183838 1.59988 -0.7399544 0.2296638446 #> 98       4 7.183838 1.59988 -1.9900479 0.0232928297 #> 99       7 7.183838 1.59988 -0.1149076 0.4542591853 #> 100      7 7.183838 1.59988 -0.1149076 0.4542591853 plot(lsrq, sig = 0.05)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for class m_surr — methods_m_surr","title":"Method for class m_surr — methods_m_surr","text":"function plots m-surrounds give object class m_surr obtain code m.surround. plot() function allows user view configuration m-surroundings. argument type select type o visualization.  print() print matrix m-surrounding. . summary give information characteristics m-surroundings. .","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for class m_surr — methods_m_surr","text":"","code":"# S3 method for class 'm_surr' summary(object, ...)  # S3 method for class 'm_surr' plot(x, ..., type = 1)  # S3 method for class 'm_surr' print(x, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for class m_surr — methods_m_surr","text":"object object class m_surr. 2 plot W matrix network ... arguments passed methods. x object class m_surr type numeric. 1 (default) get plot igraph.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for class m_surr — methods_m_surr","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Method for class m_surr — methods_m_surr","text":"Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. Working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_m_surr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method for class m_surr — methods_m_surr","text":"","code":"# Example 1: Obtain m-surroundings with degree of overlapping r N <- 100 cx <- runif(N) cy <- runif(N) x <- cbind(cx,cy) m = 4 r = 2 msurr_points <- m.surround(x = x, m = m, r = r,control = list(dtmaxabs = 0.5)) #>  #>  Threshold distance:  0.5 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  2  #>  #>  Index of spatial observations excluded:  44 33  plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 2 sub-graphs  print(msurr_points) #>       [,1] [,2] [,3] [,4] #>  [1,]    1   63   40   37 #>  [2,]    6   73   28   14 #>  [3,]    7   18   98   94 #>  [4,]    8   87   39   21 #>  [5,]    9   12   64   99 #>  [6,]   10   31   52    4 #>  [7,]   16   62    9   12 #>  [8,]   17   20   27   98 #>  [9,]   22   58   41   50 #> [10,]   23    2   85   45 #> [11,]   25   11   44    4 #> [12,]   27   55   93   47 #> [13,]   28   14    8   87 #> [14,]   32   80   48   70 #> [15,]   33   30   16   62 #> [16,]   35   84    6   66 #> [17,]   39   21   10   52 #> [18,]   40   37   59   29 #> [19,]   41   50   72   26 #> [20,]   42   61   33   99 #> [21,]   44   15   83   38 #> [22,]   48   70   60   43 #> [23,]   49   77   42   33 #> [24,]   52   36   49   77 #> [25,]   53   81   76   19 #> [26,]   54    3   57   56 #> [27,]   56   67   25   11 #> [28,]   57    5   78   51 #> [29,]   59   29   75   54 #> [30,]   60   43  100   17 #> [31,]   64   97   90   53 #> [32,]   65   95   74   51 #> [33,]   71   34   79   69 #> [34,]   72   46   35   66 #> [35,]   74   51   71   79 #> [36,]   75   86   54    3 #> [37,]   76   19    7   18 #> [38,]   78   13   56   82 #> [39,]   79   69   32   80 #> [40,]   82   88   96   91 #> [41,]   83   38   82   96 #> [42,]   85   45   22   90 #> [43,]   90   24   53   81 #> [44,]   93   47   23   19 #> [45,]   96   91   65   95 #> [46,]   98   94   89   99 #> [47,]  100   68   17   20  # Example 2: data(\"FastFood.sf\") m = 6 r = 1 msurr_points <-  m.surround(x = FastFood.sf, m = m, r = r, distance = \"Euclidean\",                             control = list(dtmaxpc = .2)) #>  #>  Threshold distance:  21090.24 #>  Number of m-surroundings excluded for exceeding #>         the threshold distance:  6  #>  #>  Index of spatial observations excluded:  20 141 110 64 90 111  plot(msurr_points, type = 1)  plot(msurr_points, type = 2) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 32 sub-graphs  print(msurr_points) #>        [,1] [,2] [,3] [,4] [,5] [,6] #>   [1,]    1  180  675  719  471  294 #>   [2,]   10  627  865  123  262  237 #>   [3,]   12  160  495  729   18  363 #>   [4,]   14  602  552  487  305  619 #>   [5,]   16  325  637  103  515  538 #>   [6,]   17  555  156  190  837  711 #>   [7,]   23  741  640  158  709  335 #>   [8,]   32  502  167  303  383  657 #>   [9,]   33  230  337  458  786  348 #>  [10,]   39  352  693  615  402  469 #>  [11,]   40  807  745  496  592  512 #>  [12,]   52   65  520  793  274  261 #>  [13,]   55  486  628  168  272  572 #>  [14,]   63  738  612  186   53  796 #>  [15,]   74  721  751   48  165  500 #>  [16,]   78  365  668  200  857  170 #>  [17,]   79  270  688   46  144  676 #>  [18,]   81  650  791  694  362  391 #>  [19,]   83  235  665  570   90  716 #>  [20,]   95  869  289  260  395   12 #>  [21,]  100  710  364  534    8  805 #>  [22,]  102  386  253  163  553  132 #>  [23,]  107  484  497  506  795  593 #>  [24,]  110  809  490  370  238  812 #>  [25,]  111  715  463  147  454  440 #>  [26,]  117  644  202  417    2  746 #>  [27,]  132  189  873  269  264   52 #>  [28,]  134  188  722  255  623  382 #>  [29,]  136  234   87  639   28  522 #>  [30,]  137  214  725  863  687  329 #>  [31,]  141  251  450  278  119  143 #>  [32,]  142  451   27  444  452  332 #>  [33,]  143  774  344  851  291  142 #>  [34,]  151  775  286  442  459  819 #>  [35,]  155  201  811  410  276  768 #>  [36,]  157  678  330  736  523  136 #>  [37,]  170  306  241  519  376  691 #>  [38,]  173  772  465  724  326  327 #>  [39,]  178   75  243  606  408  432 #>  [40,]  179  384  815  603   30  107 #>  [41,]  194  328  149  246  282  755 #>  [42,]  199  467  232  340  730  686 #>  [43,]  208  699  601  648  824  778 #>  [44,]  209  642  397  752  509  483 #>  [45,]  210  731  181  427  227  871 #>  [46,]  213  629  547  409  172  414 #>  [47,]  221  153  477  797  584  594 #>  [48,]  224  379  380  794  518  505 #>  [49,]  226   61  122  607  617  765 #>  [50,]  231   67  804  428  692  418 #>  [51,]  237  462   62  308  406  460 #>  [52,]  250   96  806  876  498   32 #>  [53,]  261  293  705   89  779   55 #>  [54,]  263  240  563  390  742   17 #>  [55,]  267  265  643  521  312  782 #>  [56,]  273  401  726  697  366  347 #>  [57,]  275  543  858  683  268  110 #>  [58,]  287  577  566  590  249  540 #>  [59,]  294  707  700  470  839  117 #>  [60,]  310  827  501  759  760  645 #>  [61,]  321  735  169  571  389   95 #>  [62,]  327  466   80  207  681  754 #>  [63,]  332  713   50  316  732  453 #>  [64,]  335  801  749  545  856  287 #>  [65,]  338   26  457  712  191  785 #>  [66,]  341  734  359  441  456  355 #>  [67,]  347  217   69  526  413  531 #>  [68,]  348  449  112  445  666  194 #>  [69,]  350   88  872  280  120  714 #>  [70,]  353    4   66  236  407  717 #>  [71,]  355  258  698  455  176  151 #>  [72,]  360  614  524  218   29  631 #>  [73,]  363   13  508  840  161  517 #>  [74,]  382  318  434  776  802  854 #>  [75,]  391  790  315  424  334  426 #>  [76,]  398  661   42  233  541  798 #>  [77,]  414  670  301  557   15  780 #>  [78,]  418  472   24  558  562  263 #>  [79,]  421  816  349   20  689  625 #>  [80,]  422    9  662  356  309  771 #>  [81,]  425  850  756  247  400  422 #>  [82,]  426  747   73  252  140  421 #>  [83,]  431   54  579  877  702  573 #>  [84,]  432  223   11  581  419  777 #>  [85,]  440  664  175  852  703  875 #>  [86,]  453  528  378   43  279   33 #>  [87,]  460    7  580  196   94  431 #>  [88,]  479   31  346   41  847  480 #>  [89,]  480  808  388   38  304  481 #>  [90,]  481  482  762  684  826  860 #>  [91,]  483  131  339  116  229   63 #>  [92,]  500  764  166  559  373  310 #>  [93,]  503   51  393  870  504  321 #>  [94,]  505  744   47  367  706  209 #>  [95,]  510  750  285  737  507  250 #>  [96,]  512  511  766  862   57  224 #>  [97,]  514  608  130  842  513   40 #>  [98,]  516    3  660  845  550   16 #>  [99,]  517  728  159  533  544  635 #> [100,]  522  867  342  848  846  773 #> [101,]  529  622  412   93  248  398 #> [102,]  531  784  527  377  177  633 #> [103,]  538  682  369   19  546  574 #> [104,]  540  833  535  211  589  799 #> [105,]  564  813   86  187  651   78 #> [106,]  569  113  198  656  127  598 #> [107,]  574  723  385  708  228  100 #> [108,]  576   22  374  561    6  646 #> [109,]  583  298  599  853  290  770 #> [110,]  586   56  493  492   71  859 #> [111,]  593   97  613  403  575  221 #> [112,]  594  105  753  396   35  208 #> [113,]  598  183  636  604  109   83 #> [114,]  609  435  767   25  197  353 #> [115,]  611  242  696  476  182  609 #> [116,]  619  372  411  203  647  586 #> [117,]  625  420  205  663  333  350 #> [118,]  631   49  296  653  690  866 #> [119,]  632  836  212  560  761  102 #> [120,]  633  361   37  838  525  529 #> [121,]  635  491  658  834  256  275 #> [122,]  645  106  585  596  610  510 #> [123,]  646  254  192  277  437  583 #> [124,]  649  621   85  415  371  831 #> [125,]  657  488  133  792  489  479 #> [126,]  676  787  145   98  820   81 #> [127,]  677  311  108  781  551  576 #> [128,]  679   72  121  667  874  137 #> [129,]  686  283  148   36  672  173 #> [130,]  691  548  295  841  118   14 #> [131,]  704  114  473  669  605  178 #> [132,]  711  216  185  164  740  213 #> [133,]  714  336  433  701   44  273 #> [134,]  716  204  154  828  624  829 #> [135,]  717  319   21  436  128  677 #> [136,]  746  323   76  416  245  231 #> [137,]  754  468  150  324  626  111 #> [138,]  755  464  641  822  271  199 #> [139,]  763  499  630  743   58   74 #> [140,]  765  849   68  152  600  763 #> [141,]  768    5  532  810  368  134 #> [142,]  770  101  554  381  307  632 #> [143,]  771   99  138  817  394  788 #> [144,]  773   45  193  443  673  360 #> [145,]  777  300  595  461  591   10 #> [146,]  778  478  314  659  823  825 #> [147,]  780  375  239  206  184  814 #> [148,]  782  162  104  297  783  157 #> [149,]  785  821  392  195  266  141 #> [150,]  788  343  284  139  423  210 #> [151,]  789  818  225  685  174   91 #> [152,]  796  115  588  597  843  226 #> [153,]  798  345  568   59  864  569 #> [154,]  799  652  674  126  769  832 #> [155,]  803  357  475  399  125  704 #> [156,]  805  537  313  835  536  649 #> [157,]  812   34  135  582  844  514 #> [158,]  814  556  549  302  171  564 #> [159,]  819  638  259  634  733   79 #> [160,]  825  618  695  215  578  503 #> [161,]  829  565   82  830  542   23 #> [162,]  831  539  855  320  758  155 #> [163,]  832  387  654   60  757  516 #> [164,]  854  288  222  124  474  803 #> [165,]  859  868  620  485  292  179 #> [166,]  860  429  530  680  220  267 #> [167,]  866  671  439  446  748  338 #> [168,]  871   64  351  299  430  679 #> [169,]  875  448  146  447  317  341"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for class qmap — methods_qmap","title":"Method for class qmap — methods_qmap","text":"function plot difference frequencies symbols map. plot() function obtain plot. argument ci select confidence level.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for class qmap — methods_qmap","text":"x object class qmap ci confidence level difference probabilities symbols plot method. Default ci = 0.95 ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Method for class qmap — methods_qmap","text":"Ruiz M, López FA Páez (2011). Comparison Thematic Maps Using Symbolic Entropy. International Journal Geographical Information Science,  26, 413-439. Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_qmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method for class qmap — methods_qmap","text":"","code":"# Example 1: N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(spdep::knearneigh(cbind(cx,cy), k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1) plot(q.test) #> [[1]]  #>  #> [[2]]  #>"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class scantest — methods_scantest","title":"Methods for class scantest — methods_scantest","text":"plot() function allows user plot significant cluster(s).summary list information likelihood cluster.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class scantest — methods_scantest","text":"","code":"# S3 method for class 'scantest' plot(x, ..., sf = NULL, coor = NULL)  # S3 method for class 'scantest' summary(object, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class scantest — methods_scantest","text":"x scantest object created scan.test plot() method. ... arguments passed methods. sf optional argument plot() method include sf object (default = NULL) coor optional argument plot() method include coordinates points (default = NULL) object scantest object created scan.test summary() method.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class scantest — methods_scantest","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_scantest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class scantest — methods_scantest","text":"Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. Working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for class spqtest — methods_spqtest","title":"Methods for class spqtest — methods_spqtest","text":"plot() function allows user obtain plot relative frequency symbol (standard equivalent) confidence interval. print() function used get list values Q test standard symbolization based permutations equivalent symbolization based combinations. summary() print table output Q test.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for class spqtest — methods_spqtest","text":"","code":"# S3 method for class 'spqtest' plot(x, ..., ci = 0.95)"},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for class spqtest — methods_spqtest","text":"x spqtest object created Q.test. ... arguments passed methods ci confidence level intervals plot method. Default ci = 0.95","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for class spqtest — methods_spqtest","text":"functions return value","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/methods_spqtest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for class spqtest — methods_spqtest","text":"Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. working paper.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to order the elements of the m_i-subrrounds — nb2nb_order","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"auxiliary function. case obtaining list neighbors class nb poly2nb, necessary reorder elements based distance /angle.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"","code":"nb2nb_order(listw = listw, sf = NULL)"},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"listw object nb class. sf sf object used get listw .","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"object nb class elements order.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"Sort elements list nb. First distance ","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"@references Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. Working paper.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/nb2nb_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to order the elements of the m_i-subrrounds — nb2nb_order","text":"","code":"# With a sf object (irregular lattice) library(sf) fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 listw <- spdep::poly2nb(as(nc,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar listw.order <- nb2nb_order(listw = listw, sf = nc) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data  # With a sf object (regular lattice: hexagons) sfc = sf::st_sfc(sf::st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))) hexs <- sf::st_make_grid(sfc, cellsize = 0.1, square = FALSE) hexs.sf <- sf::st_sf(hexs) listw  <- spdep::poly2nb(as(hexs.sf, \"Spatial\"), queen = FALSE) listw.order <- nb2nb_order(listw = listw, sf = hexs.sf)"},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the empirical distribution of runs — plot.sprunstest","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"Plot empirical distribution runs","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"","code":"# S3 method for class 'sprunstest' plot(x, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"x object class sprunstest. ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"return value, called side effects","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"Plot histogram empirical distribution runs","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/plot.sprunstest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the empirical distribution of runs — plot.sprunstest","text":"","code":"# Example 1: Fastfood example. sf (points) data(\"FastFood.sf\") x <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) listw <- spdep::knearneigh(x, k = 2) formula <- ~ Type srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = listw, nsim = 299) plot(srq)   # Example 2: Spain example (poligons with 0 neinghbourhood) data(\"provinces_spain\") sf::sf_use_s2(FALSE) listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") formula <- ~ Older srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw, nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data plot(srq)  provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") formula <- ~ Mal2Fml srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw, nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data plot(srq)"},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects of class summary.spjctest. — print.summary.spjctest","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"Print method objects class summary.spjctest.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"","code":"# S3 method for class 'summary.spjctest' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"x object class summary.spjctest. digits number digits show printed tables. Default: max(3L, getOption(\"digits\") - 3L). ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spjctest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects of class summary.spjctest. — print.summary.spjctest","text":"return value, called side effects","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects of class summary.spqtest. — print.summary.spqtest","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"Print method objects class summary.spqtest.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"","code":"# S3 method for class 'summary.spqtest' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"x object class summary.spqtest. digits number digits show printed tables. Default: max(3L, getOption(\"digits\") - 3L). ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/print.summary.spqtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for objects of class summary.spqtest. — print.summary.spqtest","text":"return value, called side effects","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":null,"dir":"Reference","previous_headings":"","what":"Provinces in Spain. — provinces_spain","title":"Provinces in Spain. — provinces_spain","text":"simple features object provinces Spain selected demographic economic information.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provinces in Spain. — provinces_spain","text":"","code":"data(provinces_spain)"},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Provinces in Spain. — provinces_spain","text":"simple features dataframe 50 rows 15 columns: province Names provinces Spain factor CCAA Names Autonomous Communities Spain factor ID_INE National Institute Statistics unique identifier provinces Population Population province 2020 Density Population density province persons/km^2 Older Percentage population 65 older provice 2020 Median_Age Median age population province 2020 Mal2Fml Ratio male female population province 2020 GDPpc GDP per capita province 2016 Transit Dummy variable mass transit system province; 1: YES Area Area province Altitude Altitude province Coast dummy variable indicates whether province coast; 1: YES Meteo_Station Identifier meteorological station representative province used retrieve climatic variables geometry geometry simple features object","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Provinces in Spain. — provinces_spain","text":"Instituto Nacional de Estadistica http://www.ine.es/ Climatic data: Agencia Estatal de Meteorologia http://www.aemet.es/ Páez et al. (2020)","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Provinces in Spain. — provinces_spain","text":"Paez, ., Lopez, F.., Menezes, T., Cavalcanti, R., & Pitta, M. (2020). Spatio‐Temporal Analysis Environmental Correlates COVID‐19 Incidence Spain. Geographical Analysis. 53(3) 397-421","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/provinces_spain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provinces in Spain. — provinces_spain","text":"","code":"data(provinces_spain)  summary(provinces_spain) #>              provinc                     CCAA        ID_INE      #>  Albacete        : 1   Castilla y Leon     : 9   Min.   : 1.00   #>  Alicante/Alacant: 1   Andalucia           : 8   1st Qu.:13.25   #>  Almeria         : 1   Castilla - La Mancha: 5   Median :25.50   #>  Araba/alava     : 1   CataluÃ±a           : 4   Mean   :25.50   #>  Asturias        : 1   Galicia             : 4   3rd Qu.:37.75   #>  Avila           : 1   Aragon              : 3   Max.   :50.00   #>  (Other)         :44   (Other)             :17                   #>     Popultn           Density           Older          Medn_Ag      #>  Min.   :  88636   Min.   :  8.60   Min.   :15.16   Min.   :40.19   #>  1st Qu.: 337901   1st Qu.: 26.18   1st Qu.:18.09   1st Qu.:42.45   #>  Median : 684202   Median : 63.50   Median :19.93   Median :43.70   #>  Mean   : 974257   Mean   :140.04   Mean   :21.03   Mean   :44.55   #>  3rd Qu.:1149460   3rd Qu.:171.64   3rd Qu.:23.03   3rd Qu.:46.00   #>  Max.   :6663394   Max.   :829.76   Max.   :31.36   Max.   :50.68   #>                                                                     #>     Mal2Fml           GDPpc          Transit       Altitud           Coast      #>  Min.   : 91.59   Min.   :16666   Min.   :0.0   Min.   :   5.0   Min.   :0.00   #>  1st Qu.: 95.52   1st Qu.:18878   1st Qu.:0.0   1st Qu.:  24.5   1st Qu.:0.00   #>  Median : 98.06   Median :20870   Median :0.0   Median : 215.5   Median :0.00   #>  Mean   : 97.83   Mean   :22506   Mean   :0.1   Mean   : 369.0   Mean   :0.42   #>  3rd Qu.:100.01   3rd Qu.:25835   3rd Qu.:0.0   3rd Qu.: 677.5   3rd Qu.:1.00   #>  Max.   :103.01   Max.   :36001   Max.   :1.0   Max.   :1131.0   Max.   :1.00   #>                                                                                 #>    Mt_Sttn               Area                    geometry  #>  Length:50          Min.   :1.979e+09   MULTIPOLYGON :50   #>  Class :character   1st Qu.:6.707e+09   epsg:4326    : 0   #>  Mode  :character   Median :1.001e+10   +proj=long...: 0   #>                     Mean   :1.012e+10                      #>                     3rd Qu.:1.370e+10                      #>                     Max.   :2.179e+10                      #>"},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the scan test — scan.test","title":"Compute the scan test — scan.test","text":"function compute spatial scan test Bernoulli Multinomial categorical spatial process, detect spatial clusters","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the scan test — scan.test","text":"","code":"scan.test(formula = NULL, data = NULL, fx = NULL, coor = NULL, case = NULL, nv = NULL, nsim = NULL, distr = NULL, windows = \"circular\", listw = NULL, alternative = \"High\", minsize = 1, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the scan test — scan.test","text":"formula symbolic description factor (optional). data (optional) data frame sf object containing variable testing . fx factor (optional). coor (optional) coordinates observations. case Bernoulli distribution. element factor, cases non-cases testing cases versus non-cases nv Maximum windows size, default nv = N/2. algorithm scan clusters geographic size 1 upper limit (nv) defined user. nsim Number permutations. distr distribution spatial process: \"bernoulli\" two levels \"multinomial\" three levels. windows string select type cluster \"circular\" (default) \"elliptic\". listw flexible windows. neighbours list (object class listw, nb knn frop spdep) adjacency matrix. alternative Bernoulli spatial process. character string specifying type cluster, must one \"High\" (default), \"\" \"Low\". minsize Minimum number observations inside Likely Cluster secondary clusters. control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the scan test — scan.test","text":"object htest scantest class","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the scan test — scan.test","text":"Two alternative sets arguments can included function compute scan test: Option 1: factor (fx) coordinates (coor). Option 2: sf object (data) formula specify factor. function consider coordinates centroids elements th sf object. spatial scan statistics widely used epidemiology, criminology ecology. purpose analyse spatial distribution points geographical regions testing hypothesis spatial randomness distribution basis different distributions (e.g. Bernoulli, Poisson Normal distributions). scan.test function obtain scan statistic two relevant distributions related categorical variables: Bernoulli Multinomial distribution. spatial scan statistic based likelihood ratio test statistic formulated follows: $$\\Delta = { \\max_{z \\Z,H_A} L(\\theta|z) \\\\max_{z \\Z,H_0} L(\\theta|z)}$$ Z represents collection scanning windows constructed study region, \\(H_A\\) alternative hypothesis, \\(H_0\\) null hypothesis, \\(L(\\theta|z)\\) likelihood function parameter \\(\\theta\\) given window Z. null hypothesis says spatial clustering study region, alternative hypothesis certain area high (low) rates outcome variables. null alternative hypotheses likelihood function may expressed different ways depending probability model consideration. test independence spatial process, null, type windows irrelevant alternative elliptic windows can identify precision cluster. big data sets (N >>) windows = \"elliptic\" can slowly Bernoulli version dichotomous outcome variables, cases noncases certain diseases, Bernoulli model used. null hypothesis written $$H_0 : p = q  \\ \\ \\ \\   \\ \\ Z$$ alternative hypothesis  $$H_A : p \\neq q  \\ \\  \\ \\  \\ \\ Z$$ p q outcome probabilities (e.g., probability case) inside outside scanning window Z, respectively. Given window Z, test statistic : cz nz numbers cases observations (cases noncases) within z, respectively, C N total numbers cases observations whole study region, respectively. $$\\Delta = $$ Multinomial version scan test multinomial version spatial scan statistic useful investigate clustering discrete spatial variable can take one one k possible outcomes lack intrinsic order information. region defined moving window denoted Z, null hypothesis statistic can stated follows: $$H_0: p_1 = q_1;p_2 = q_2;...;p_k = q_k$$ \\(p_j\\) probability event type j inside window Z, \\(q_j\\) probability event type j outside window. alternative hypothesis least one type event probability type different inside outside window. statistic built likelihood ratio, takes following form transformation using natural logarithm: $$\\Delta = \\max_Z \\{\\sum_j \\{ S_j^Z log({ S_j^Z \\S^Z }) + (S_j-S_j^Z) log({ {S_j-S_j^Z} \\{S-S^Z} })\\}\\}-\\sum_j S_j log({ S_j \\S }) $$ S total number events study area \\(S_j\\) total number events type j. superscript Z denotes sub-region defined moving window.  theoretical distribution statistic null hypothesis known, therefore significance evaluated numerically simulating neutral landscapes (obtained using random spatial process) contrasting empirically calculated statistic frequency values obtained neutral landscapes. results likelihood ratio serve identify likely cluster, followed secondary clusters expedient sorting according magnitude test. usual, significance assigned analyst, cutoff value significance reflects confidence analyst, tolerance error. implementing statistic, analyst must decide shape window maximum number cases given window can cover. Currently, analysis can done using circular elliptical windows. Elliptical windows time consuming evaluate provide greater flexibility contrast distribution events inside outside window, selected shape analyses follow. Furthermore, recommended maximum number cases entering given window exceed 50\\ available cases.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the scan test — scan.test","text":"Kulldorff M, Nagarwalla N. (1995). Spatial disease clusters: Detection Inference. Statistics Medicine. 14:799-810 Jung , Kulldorff M, Richard OJ (2010). spatial scan statistic multinomial data. Statistics Medicine. 29(18), 1910-1918 Páez, ., López-Hernández, F.., Ortega-García, J.., Ruiz, M. (2016). Clustering co-occurrence cancer types: comparison techniques application pediatric cancer Murcia, Spain. Spatial Analysis Health Geography, 69-90. Tango T., Takahashi K. (2005). flexibly shaped spatial scan statistic detecting clusters, International Journal Health Geographics 4:11.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/scan.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the scan test — scan.test","text":"","code":"# Case 1: Scan test bernoulli data(provinces_spain) sf::sf_use_s2(FALSE) provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") formula <- ~ Mal2Fml scan <- scan.test(formula = formula, data = provinces_spain, case=\"men\", nsim = 99, distr = \"bernoulli\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Mal2Fml #> scan-loglik = 6.0359, p-value = 0.07 #> alternative hypothesis: High #> sample estimates: #>                                         #> Total observations in the MLC =   17.00 #> Expected cases in the MLC =       11.84 #> Observed cases in the MLC =       16.00 #>  summary(scan) #>  #> Summary of data: #> Distribution....................: bernoulli #> Type of cluster (alternative)...: High #> Number of locations.............: 50 #> Cathegory case..................: men #> Total number of observations....: 37 #> Names of cathegories............: men woman #> Total per category..............: 37 13 #> Percent per category............: 0.74 0.26 #> --------------------------------- #>  #> Scan statistic: Most Likely Cluster #> Total observations in the MLC........: 17 #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 0.94 0.06 #> Value of statisitic (loglik ratio)...: 6.0359 #> p-value..............................: 0.07 #>  #> IDs of cluster detect: #> Location IDs included...:  37 34 20 11 40 28 6 14 10 18 35 36 22 31 13 15 4 #> --------------------------------- #>  #>  #> Secondary Cluster. Number 1  #> Total observations in secondary cluster.:  23  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 0.61 0.39 #> Value of statisitic (loglik ratio)...: 5.4635 #> p-value..............................: 0.15 #> Location IDs included................:  41 25 19 1 9 30 48 39 50 27 46 16 42 33 38 45 43 5 21 12 2 44 13 #>  #>  #> Secondary Cluster. Number 2  #> Total observations in secondary cluster.:  2  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik ratio)...: 0.3047 #> p-value..............................: 0.99 #> Location IDs included................:  3 44 #>  #>  #> Secondary Cluster. Number 3  #> Total observations in secondary cluster.:  2  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 0.5 0.5 #> Value of statisitic (loglik ratio)...: 0.3047 #> p-value..............................: 0.99 #> Location IDs included................:  7 8 #>  #>  #> Secondary Cluster. Number 4  #> Total observations in secondary cluster.:  2  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 1 0 #> Value of statisitic (loglik ratio)...: 0.3047 #> p-value..............................: 0.99 #> Location IDs included................:  17 8 #>  #>  #> Secondary Cluster. Number 5  #> Total observations in secondary cluster.:  2  #> Names of cathegories.................: men woman #> Percent per category total...........: 0.74 0.26 #> Percent per category inside cluster..: 0.5 0.5 #> Value of statisitic (loglik ratio)...: 0.3047 #> p-value..............................: 0.99 #> Location IDs included................:  24 49 plot(scan, sf = provinces_spain)  # \\donttest{ ## With maximum number of neighborhood scan <- scan.test(formula = formula, data = provinces_spain, case = \"woman\", nsim = 99, distr = \"bernoulli\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Mal2Fml #> scan-loglik = 5.6358, p-value = 0.22 #> alternative hypothesis: High #> sample estimates: #>                                         #> Total observations in the MLC =   11.00 #> Expected cases in the MLC =        7.02 #> Observed cases in the MLC =        7.00 #>  plot(scan, sf = provinces_spain)    ## With elliptic windows scan <- scan.test(formula = formula, data = provinces_spain, case = \"men\", nv = 25, nsim = 99, distr = \"bernoulli\", windows =\"elliptic\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Mal2Fml #> scan-loglik = 7.038, p-value < 2.2e-16 #> alternative hypothesis: High #> sample estimates: #>                                         #> Total observations in the MLC =   19.00 #> Expected cases in the MLC =       62.16 #> Observed cases in the MLC =       18.00 #>  scan <- scan.test(formula = formula, data = provinces_spain, case = \"men\", nv = 15, nsim = 99, distr = \"bernoulli\", windows =\"elliptic\", alternative = \"Low\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  Mal2Fml #> scan-loglik = 5.9143, p-value = 0.1 #> alternative hypothesis: Low #> sample estimates: #>                                         #> Total observations in the MLC =    5.00 #> Expected cases in the MLC =       51.06 #> Observed cases in the MLC =        1.00 #>  plot(scan, sf = provinces_spain)   # Case 2: scan test multinomial data(provinces_spain) provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") formula <- ~ Older scan <- scan.test(formula = formula, data = provinces_spain, nsim = 99, distr = \"multinomial\") print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  Older #> scan-loglik = 4.2473, p-value = 0.9 #> sample estimates: #>               low middle high Sum #> cases.expect 2.24   2.88 2.88   8 #> cases.observ 0.00   6.00 2.00   8 #>  plot(scan, sf = provinces_spain)   # Case 3: scan test multinomial data(FastFood.sf) sf::sf_use_s2(FALSE) formula <- ~ Type scan <- scan.test(formula = formula, data = FastFood.sf, nsim = 99, distr = \"multinomial\", windows=\"elliptic\", nv = 50) print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  Type #> scan-loglik = 15.506, p-value < 2.2e-16 #> sample estimates: #>                  H     P     S Sum #> cases.expect 13.48 14.86 14.66  43 #> cases.observ 16.00  1.00 26.00  43 #>  summary(scan) #>  #> Summary of data: #> Distribution....................: multinomial #> Number of locations.............: 877 #> Total number of cases...........: 877 #> Names of cathegories...........: H P S #> Total cases per category........: 275 303 299 #> Percent cases per category......: 0.31 0.35 0.34 #>  #> Scan statistic: #> Total cases in the MLC.........: 43 #> Names of cathegories...........: H P S #> Observed cases in the MLC......: 13.48 14.86 14.66 #> Expected cases in the MLC......: 16 1 26 #> Value of statistic (loglik ratio)....: 15.5058 #> p-value........................: 0 #>  #> IDs of cluster detect: #> Location IDs included.....:  68 849 152 499 630 763 827 765 617 600 607 48 58 588 743 843 74 122 750 115 645 61 226 796 876 699 610 597 596 721 751 53 186 659 778 63 106 229 585 738 612 131 208 #>  #>  #> Secondary Scan statistic. Number 1  #> Total cases in secondary cluster......:  16  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.25 0.5 0.25 #> Value of statisitic (loglik ratio)....: 11.5285 #> p-value.........................: 0.1 #> Location IDs included..................:  677 311 781 128 108 436 551 576 21 374 319 717 561 6 629 547 #>  #>  #> Secondary Scan statistic. Number 2  #> Total cases in secondary cluster......:  7  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.14 0.29 0.57 #> Value of statisitic (loglik ratio)....: 7.0038 #> p-value.........................: 0.96 #> Location IDs included..................:  158 709 335 801 749 545 856 #>  #>  #> Secondary Scan statistic. Number 3  #> Total cases in secondary cluster......:  17  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.35 0.35 0.29 #> Value of statisitic (loglik ratio)....: 6.8747 #> p-value.........................: 0.98 #> Location IDs included..................:  521 782 162 643 297 220 267 265 104 530 312 523 783 157 531 848 680 #>  #>  #> Secondary Scan statistic. Number 4  #> Total cases in secondary cluster......:  17  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.47 0.29 0.24 #> Value of statisitic (loglik ratio)....: 6.7961 #> p-value.........................: 0.98 #> Location IDs included..................:  190 837 555 711 646 216 17 390 742 563 307 4 353 197 254 192 66 #>  #>  #> Secondary Scan statistic. Number 5  #> Total cases in secondary cluster......:  10  #> Names of cathegories.................: H P S #> Percent per category total...........: 0.31 0.35 0.34 #> Percent per category inside cluster..: 0.4 0.2 0.4 #> Value of statisitic (loglik ratio)....: 6.5951 #> p-value.........................: 0.98 #> Location IDs included..................:  78 365 668 228 170 857 306 708 651 187 plot(scan, sf = FastFood.sf)   # Case 4: DGP two categories N <- 150 cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/2,1/2) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho) scan <- scan.test(fx = fx, nsim = 99, case = \"A\", nv = 50, coor = cbind(cx,cy), distr = \"bernoulli\",windows=\"circular\") print(scan) #>  #> \tScan test. Distribution: bernoulli #>  #> data:  fx #> scan-loglik = 10.426, p-value < 2.2e-16 #> alternative hypothesis: High #> sample estimates: #>                                      #> Total observations in the MLC =   15 #> Expected cases in the MLC =        7 #> Observed cases in the MLC =       14 #>  plot(scan)   # Case 5: DGP three categories N <- 200 cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 10) p <- c(1/3,1/3,1/3) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho) scan <- scan.test(fx = fx, nsim = 19, coor = cbind(cx,cy), nv = 30, distr = \"multinomial\", windows = \"elliptic\") print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  fx #> scan-loglik = 13.901, p-value < 2.2e-16 #> sample estimates: #>                 A    B     C Sum #> cases.expect 4.02 3.96  4.02  12 #> cases.observ 0.00 0.00 12.00  12 #>  plot(scan)   # Case 6: Flexible windows data(provinces_spain) sf::sf_use_s2(FALSE) provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) #> Warning: ‘>’ not meaningful for factors levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") formula <- ~ Mal2Fml listw <- spdep::poly2nb(provinces_spain, queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. scan <- scan.test(formula = formula, data = provinces_spain, case=\"men\", listw = listw, nv = 6,                   nsim = 99, distr = \"bernoulli\", windows = \"flexible\") #> Error in scan.test(formula = formula, data = provinces_spain, case = \"men\",     listw = listw, nv = 6, nsim = 99, distr = \"bernoulli\", windows = \"flexible\"): The factor mut be have 2 levels for bernoulli print(scan) #>  #> \tScan test. Distribution: multinomial #>  #> data:  fx #> scan-loglik = 13.901, p-value < 2.2e-16 #> sample estimates: #>                 A    B     C Sum #> cases.expect 4.02 3.96  4.02  12 #> cases.observ 0.00 0.00 12.00  12 #>  summary(scan) #>  #> Summary of data: #> Distribution....................: multinomial #> Number of locations.............: 200 #> Total number of cases...........: 200 #> Names of cathegories...........: A B C #> Total cases per category........: 67 66 67 #> Percent cases per category......: 0.34 0.33 0.34 #>  #> Scan statistic: #> Total cases in the MLC.........: 12 #> Names of cathegories...........: A B C #> Observed cases in the MLC......: 4.02 3.96 4.02 #> Expected cases in the MLC......: 0 0 12 #> Value of statistic (loglik ratio)....: 13.9013 #> p-value........................: 0 #>  #> IDs of cluster detect: #> Location IDs included.....:  172 151 33 49 53 169 3 111 147 105 102 91 #>  #>  #> Secondary Scan statistic. Number 1  #> Total cases in secondary cluster......:  7  #> Names of cathegories.................: A B C #> Percent per category total...........: 0.34 0.33 0.34 #> Percent per category inside cluster..: 0.29 0.71 0 #> Value of statisitic (loglik ratio)....: 6.8425 #> p-value.........................: 0.6 #> Location IDs included..................:  156 126 197 81 179 177 60 #>  #>  #> Secondary Scan statistic. Number 2  #> Total cases in secondary cluster......:  7  #> Names of cathegories.................: A B C #> Percent per category total...........: 0.34 0.33 0.34 #> Percent per category inside cluster..: 0.29 0.43 0.29 #> Value of statisitic (loglik ratio)....: 6.7479 #> p-value.........................: 0.7 #> Location IDs included..................:  122 190 52 79 46 103 195 #>  #>  #> Secondary Scan statistic. Number 3  #> Total cases in secondary cluster......:  16  #> Names of cathegories.................: A B C #> Percent per category total...........: 0.34 0.33 0.34 #> Percent per category inside cluster..: 0.31 0.44 0.25 #> Value of statisitic (loglik ratio)....: 6.6427 #> p-value.........................: 0.75 #> Location IDs included..................:  66 31 25 164 68 73 138 93 24 87 173 134 120 127 94 47 #>  #>  #> Secondary Scan statistic. Number 4  #> Total cases in secondary cluster......:  14  #> Names of cathegories.................: A B C #> Percent per category total...........: 0.34 0.33 0.34 #> Percent per category inside cluster..: 0.21 0.29 0.5 #> Value of statisitic (loglik ratio)....: 5.8128 #> p-value.........................: 0.9 #> Location IDs included..................:  90 176 142 108 89 56 153 124 198 113 200 123 40 184 #>  #>  #> Secondary Scan statistic. Number 5  #> Total cases in secondary cluster......:  5  #> Names of cathegories.................: A B C #> Percent per category total...........: 0.34 0.33 0.34 #> Percent per category inside cluster..: 0.4 0.4 0.2 #> Value of statisitic (loglik ratio)....: 4.4561 #> p-value.........................: 0.95 #> Location IDs included..................:  117 86 178 55 181 plot(scan, sf = provinces_spain)  # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the similarity test. — similarity.test","title":"Compute the similarity test. — similarity.test","text":"function compute nonparametric test spatial independence using symbolic analysis categorical/qualitative spatial process.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the similarity test. — similarity.test","text":"","code":"similarity.test(formula = NULL, data = NULL, fx = NULL, listw = listw, alternative = \"two.sided\", distr = \"asymptotic\", nsim = NULL, control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the similarity test. — similarity.test","text":"formula symbolic description factor (optional). data (optional) data frame sf object containing variable testing . fx factor (optional). listw listw object alternative character string specifying type cluster, must one \"High\" (default), \"\" \"Low\". distr string. Distribution test \"asymptotic\" (default) \"bootstrap\" nsim Number permutations. control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the similarity test. — similarity.test","text":"object htest","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the similarity test. — similarity.test","text":"testing approach spatial independence extends properties join count statistic. premise tests similar join count statistic use concept similarity neighbouring spatial entities (Dacey 1968; Cliff Ord 1973, 1981). However, differs taking consideration number joins belonging locally spatial unit, rather total number joins entire spatial system. approach proposed applicable spatial network contiguity structures, number neighbors belonging observations need constant. define equivalence relation \\(\\sim\\) set locations S. equivalence relation satisfies following properties: Reflexive: \\(s_i \\sim s_i\\) \\(s_i \\S\\), Symmetric: \\(s_i \\sim s_j\\), \\(s_j \\sim s_i\\) \\(s_i,\\ s_j \\S\\) Transitive: \\(s_i \\sim s_j\\) \\(s_j \\sim s_k\\), \\(s_i \\sim s_k\\) \\(s_i, \\  s_j, \\ s_k \\S\\) call relation \\(\\sim\\) similarity relation. , null hypothesis interested $$H_0: \\{X_s\\}_{s \\S} \\ \\ \\ \\ iid$$ Assume , null hypothesis, \\(P(s_i \\sim s_{ji}) = p_i\\) \\(s_{ji} \\N_{s_i}\\).  Define $$I_{ij}=1 \\ \\ \\ \\ s_i \\sim s_{ji} \\ \\ ; 0 \\ \\ otherwise$$ , fixed degree d location si degree d, variable d $$\\Lambda_{(d,)}=\\sum_{j=1}^d I_{ij}$$ gives number nearest neighbours si similar si. Therefore, null hypothesis, \\(H_0\\), \\(\\Lambda(d,)\\) follows binomial distribution \\(B(d, p_i)\\).","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the similarity test. — similarity.test","text":"Farber, S., Marin, M. R., & Paez, . (2015). Testing spatial independence using similarity relations. Geographical Analysis. 47(2), 97-120.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/similarity.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the similarity test. — similarity.test","text":"","code":"# Case 1: N <- 100 cx <- runif(N) cy <- runif(N) listw <- spdep::knearneigh(cbind(cx,cy), k = 3) p <- c(1/4,1/4,1/4,1/4) rho <- 0.5 fx <- dgp.spq(p = p, listw = listw, rho = rho) W <- (spdep::nb2mat(spdep::knn2nb(listw)) >0)*1 similarity <- similarity.test(fx = fx, data = FastFood.sf, listw = listw) print(similarity) #>  #> \tSimilarity test of spatial dependence for qualitative data. #> \tDistribution: asymptotic #>  #> data:  fx #> Similarity-test = 0.96852, p-value = 0.3328 #> alternative hypothesis: two.sided #>   # Case 2: test with formula, a sf object (points) and knn data(\"FastFood.sf\") coor <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) listw <- spdep::knearneigh(coor, k = 4) formula <- ~ Type similarity <- similarity.test(formula = formula, data = FastFood.sf, listw = listw) #> Warning: neighbour object has 11 sub-graphs print(similarity) #>  #> \tSimilarity test of spatial dependence for qualitative data. #> \tDistribution: asymptotic #>  #> data:  Type #> Similarity-test = -5.4476, p-value = 5.105e-08 #> alternative hypothesis: two.sided #>   # Case 3: data(provinces_spain) listw <- spdep::poly2nb(as(provinces_spain,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") formula <- ~ Mal2Fml similarity <- similarity.test(formula = formula, data = provinces_spain, listw = listw) #> Warning: Out-of-range p-value: reconsider test arguments print(similarity) #>  #> \tSimilarity test of spatial dependence for qualitative data. #> \tDistribution: asymptotic #>  #> data:  Mal2Fml #> Similarity-test = NaN, p-value = NA #> alternative hypothesis: two.sided #>"},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the global spatial runs test. — sp.runs.test","title":"Compute the global spatial runs test. — sp.runs.test","text":"function compute global spatial runs test spatial independence categorical spatial data set.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the global spatial runs test. — sp.runs.test","text":"","code":"sp.runs.test(formula = NULL, data = NULL, fx = NULL, listw = listw, alternative = \"two.sided\" , distr = \"asymptotic\", nsim = NULL,control = list())"},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the global spatial runs test. — sp.runs.test","text":"formula symbolic description factor (optional). data (optional) data frame sf object containing variable testing . fx factor (optional). listw neighbourhood list (type knn nb) W matrix indicates order elements \\(m_i-environment\\) (example inverse distance). calculate number runs \\(m_i-environment\\), order must established, example nearest neighbour furthest one. alternative character string specifying alternative hypothesis, must one \"two.sided\" (default), \"greater\" \"less\". distr string. Distribution test \"asymptotic\" (default) \"bootstrap\". nsim Number permutations obtain pseudo-value confidence intervals (CI). Default value NULL don`t get CI number runs. control List additional control arguments.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the global spatial runs test. — sp.runs.test","text":"object htest sprunstest class","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the global spatial runs test. — sp.runs.test","text":"order neighbourhoods (\\(m_i-environments\\)) critical obtain test.  obtain number runs observed \\(m_i-environment\\), element must associated set neighbours ordered proximity. Three kinds lists can included identify \\(m_i-environments\\): knn: Objects class knn consider neighbours order proximity. nb: neighbours obtained sf object, code internally call function nb2nb_order order order proximity centroids. matrix: object matrix class based inverse distance introduced argument, function nb2nb_order also called internally transform object class matrix matrix class nb ordered neighbours. Two alternative sets arguments can included function compute spatial runs test:","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"definition-of-spatial-run","dir":"Reference","previous_headings":"","what":"Definition of spatial run","title":"Compute the global spatial runs test. — sp.runs.test","text":"section define concepts spatial encoding runs, construct main statistics necessary testing spatial homogeneity categorical variables. order develop general theoretical setting, let us consider \\(\\{X_s\\}_{s \\S}\\)  categorical spatial process interest Q different categories, S set coordinates. Spatial encoding: location \\(s \\S\\) denote \\(N_s = \\{s_1,s_2 ...,s_{n_s}\\}\\)  set neighbours according interaction scheme W, ordered lesser higher Euclidean distance respect location s. sequence \\(X_{s_i} , X_{s_i+1},...,, X_{s_i+r}\\) elements value (identified class) called spatial run location s length r.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"spatial-run-statistic","dir":"Reference","previous_headings":"","what":"Spatial run statistic","title":"Compute the global spatial runs test. — sp.runs.test","text":"total number runs defined : $$SR^Q=n+\\sum_{s \\S}\\sum_{j=1}^{n_s}I_j^s$$ \\(I_j^s = 1 \\ \\ X_{s_j-1} \\neq X_{s_j} \\ 0 \\ otherwise\\) \\(j=1,2,...,n_s\\) Following result Central Limit Theorem, asymtotical distribution \\(SR^Q\\) : $$SR^Q = N(\\mu_{SR^Q},\\sigma_{SR^Q})$$ one-tailed case, must distinguish lower-tailed test upper-tailed, associated homogeneity heterogeneity respectively. case lower-tailed test, following hypotheses used: \\(H_0:\\{X_s\\}_{s \\S}\\) ..d. \\(H_1\\): spatial distribution values categorical variable homogeneous null hypothesis (according fixed association scheme). upper-tailed test, following hypotheses used: \\(H_0:\\{X_s\\}_{s \\S}\\) ..d. \\(H_1\\): spatial distribution values categorical variable heterogeneous null hypothesis (according fixed association scheme). hypotheses provide decision rule regarding degree homogeneity spatial distribution values spatial categorical random variable.","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the global spatial runs test. — sp.runs.test","text":"Ruiz, M., López, F., Páez, . (2021). test global local homogeneity categorical data based spatial runs. Working paper.","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/sp.runs.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the global spatial runs test. — sp.runs.test","text":"","code":"# Case 1: SRQ test based on factor and knn # \\donttest{ n <- 100 cx <- runif(n) cy <- runif(n) x <- cbind(cx,cy) listw <- spdep::knearneigh(cbind(cx,cy), k=3) p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(listw = listw, p = p, rho = rho) #> Warning: neighbour object has 3 sub-graphs srq <- sp.runs.test(fx = fx, listw = listw) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  mxf #> sp.runs test = -3.5659, p-value = 0.0003626 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            246.0000            285.5152            122.7989  #>  plot(srq)   # Boots Version control <- list(seedinit = 1255) srq <- sp.runs.test(fx = fx, listw = listw, distr = \"bootstrap\" , nsim = 299, control = control) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  mxf #> sp.runs test = -3.5659, p-value < 2.2e-16 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  246.0000                  285.2809                  140.5852  #>  plot(srq)   # Case 2: SRQ test with formula, a sf object (points) and knn data(\"FastFood.sf\") x <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) listw <- spdep::knearneigh(x, k=4) formula <- ~ Type srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = listw) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  Type #> sp.runs test = 3.899, p-value = 9.657e-05 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            3408.000            3216.242            2418.743  #>  plot(srq)  # Version boots srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = listw, distr = \"bootstrap\", nsim = 199) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  Type #> sp.runs test = 3.899, p-value < 2.2e-16 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  3408.000                  3213.030                  2597.191  #>  plot(srq)   # Case 3: SRQ test (permutation) using formula with a sf object (polygons) and nb library(sf) fname <- system.file(\"shape/nc.shp\", package=\"sf\") nc <- sf::st_read(fname) #> Reading layer `nc' from data source  #>   `/home/runner/work/_temp/Library/sf/shape/nc.shp' using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 listw <- spdep::poly2nb(as(nc,\"Spatial\"), queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar p <- c(1/6,3/6,2/6) rho = 0.5 co <- sf::st_coordinates(sf::st_centroid(nc)) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data nc$fx <- dgp.spq(listw = listw, p = p, rho = rho) plot(nc[\"fx\"])  formula <- ~ fx srq <- sp.runs.test(formula = formula, data = nc, listw = listw, distr = \"bootstrap\", nsim = 399) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  fx #> sp.runs test = -2.5481, p-value = 0.02 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  355.0000                  386.5890                  161.4588  #>  plot(srq)   # Case 4: SRQ test (Asymptotic) using formula with a sf object (polygons) and nb data(provinces_spain) # sf::sf_use_s2(FALSE) listw <- spdep::poly2nb(provinces_spain, queen = FALSE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. provinces_spain$Coast <- factor(provinces_spain$Coast) levels(provinces_spain$Coast) = c(\"no\",\"yes\") plot(provinces_spain[\"Coast\"])  formula <- ~ Coast srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  Coast #> sp.runs test = -2.7795, p-value = 0.005444 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>           133.00000           160.36571            96.93415  #>  plot(srq)   # Boots version srq <- sp.runs.test(formula = formula, data = provinces_spain, listw = listw, distr = \"bootstrap\", nsim = 299) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: st_centroid does not give correct centroids for longitude/latitude data print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  Coast #> sp.runs test = -2.7795, p-value = 0.003333 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                 133.00000                 157.27425                  92.83058  #>  plot(srq)   # Case 5: SRQ test based on a distance matrix (inverse distance) N <- 100 cx <- runif(N) cy <- runif(N) data <- as.data.frame(cbind(cx,cy)) data <- sf::st_as_sf(data,coords = c(\"cx\",\"cy\")) n = dim(data)[1] dis <- 1/matrix(as.numeric(sf::st_distance(data,data)),ncol=n,nrow=n) diag(dis) <- 0 dis <- (dis < quantile(dis,.10))*dis p <- c(1/6,3/6,2/6) rho <- 0.5 fx <- dgp.spq(listw = dis , p = p, rho = rho) srq <- sp.runs.test(fx = fx, listw = dis) print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  mxf #> sp.runs test = 1.0311, p-value = 0.3025 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            695.0000            656.5455           1390.9461  #>  plot(srq)   srq <- sp.runs.test(fx = fx, listw = dis, data = data) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 24 sub-graphs print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Asymptotic #> \tversion #>  #> data:  mxf #> sp.runs test = 1.0311, p-value = 0.3025 #> alternative hypothesis: two.sided #> sample estimates: #>          Total runs     Mean total runs Variance total runs  #>            695.0000            656.5455           1390.9461  #>  plot(srq)   # Boots version srq <- sp.runs.test(fx = fx, listw = dis, data = data, distr = \"bootstrap\", nsim = 299) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 24 sub-graphs print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  mxf #> sp.runs test = 1.0311, p-value = 0.3667 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                  695.0000                  633.0435                 1226.1357  #>  plot(srq)   # Case 6: SRQ test based on a distance matrix (inverse distance) data(\"FastFood.sf\") # sf::sf_use_s2(FALSE) n = dim(FastFood.sf)[1] dis <- 1000000/matrix(as.numeric(sf::st_distance(FastFood.sf,FastFood.sf)), ncol = n, nrow = n) diag(dis) <- 0 dis <- (dis < quantile(dis,.005))*dis p <- c(1/6,3/6,2/6) rho = 0.5 co <- sf::st_coordinates(sf::st_centroid(FastFood.sf)) FastFood.sf$fx <- dgp.spq(p = p, listw = dis, rho = rho) plot(FastFood.sf[\"fx\"])  formula <- ~ fx  # Boots version srq <- sp.runs.test(formula = formula, data = FastFood.sf, listw = dis, distr = \"bootstrap\", nsim = 299) #> Warning: style is M (missing); style should be set to a valid value #> Warning: no-neighbour observations found, set zero.policy to TRUE; #> this warning will soon become an error #> Warning: neighbour object has 650 sub-graphs print(srq) #>  #> \tRuns test of spatial dependence for qualitative data. Boots version #>  #> data:  fx #> sp.runs test = -3.8297, p-value = 0.64 #> alternative hypothesis: two.sided #> sample estimates: #>       Observed Total runs     Mean total runs boots Variance total runs boots  #>                   2117.00                   2053.97                  24280.96  #>  plot(srq)  # }"},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spqdep: Testing for Spatial Independence of Cross-Sectional Qualitative Data — spqdep-package","title":"spqdep: Testing for Spatial Independence of Cross-Sectional Qualitative Data — spqdep-package","text":"Testing Spatial Dependence Qualitative Data Cross Section. list functions includes join-count tests, Q test, spatial scan test, similarity test spatial runs test. methodology models can found doi:10.1007/s10109-009-0100-1  doi:10.1080/13658816.2011.586327 .","code":""},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/spqdep-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spqdep: Testing for Spatial Independence of Cross-Sectional Qualitative Data — spqdep-package","text":"Maintainer: Fernando Lopez fernando.lopez@upct.es (ORCID) Authors: Roman Minguez roman.minguez@uclm.es (ORCID) Antonio Paez paezha@gmail.com (ORCID) Manuel Ruiz manuel.ruiz@upct.es (ORCID)","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of estimated objects of class spjctest. — summary.spjctest","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"function summarizes estimated spjctest objects. tables output include basic information test. blablabla...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"","code":"# S3 method for class 'spjctest' summary(object, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"object spjctest object including list htest. ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"object class summary.spjctest","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spjctest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of estimated objects of class spjctest. — summary.spjctest","text":"","code":"## Multinomial + Binomial using a sf multipolygon data(\"provinces_spain\") sf::sf_use_s2(FALSE) provinces_spain$Mal2Fml <- factor(provinces_spain$Mal2Fml > 100) levels(provinces_spain$Mal2Fml) = c(\"men\",\"woman\") provinces_spain$Older <- cut(provinces_spain$Older, breaks = c(-Inf,19,22.5,Inf)) levels(provinces_spain$Older) = c(\"low\",\"middle\",\"high\") f1 <- ~ Older + Mal2Fml jc1 <- jc.test(formula = f1,                data = provinces_spain,                distr = \"mc\",                alternative = \"greater\",                zero.policy = TRUE) #> although coordinates are longitude/latitude, st_intersects assumes that they #> are planar #> Warning: some observations have no neighbours; #> if this seems unexpected, try increasing the snap argument. #> Warning: neighbour object has 4 sub-graphs; #> if this sub-graph count seems unexpected, try increasing the snap argument. summary(jc1)     JoinCount Spatial Tests (Monte Carlo)     pairs       pvalue       Joincount       Expected       Variance     Older - multinomial - alternative: greater - Monte-Carlo simulation of         join-count statistic (nonfree sampling)     high:high 0.41800 14 13.93 10.46low:low 0.59100 7 8.18 6.04middle:middle 0.60500 13 13.79 10.13low:high 0.45300 24 23.05 16.25middle:high 0.65700 28 29.28 17.46middle:low 0.27400 25 22.77 15.42Jtot 0.37100 77 75.10 20.20Mal2Fml - binomial - alternative: greater - Monte-Carlo simulation of join-count statistic     men-men 0.52400 60 60.37 23.62woman-woman 0.02900 13 7.16 6.66"},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of estimated objects of class spqtest. — summary.spqtest","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"function summarizes estimated spqtest objects. tables output include basic information test. blablabla...","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"","code":"# S3 method for class 'spqtest' summary(object, ...)"},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"object spqtest object including list htest. ... arguments passed methods.","code":""},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"object class summary.spqtest","code":""},{"path":[]},{"path":[]},{"path":"https://f8l5h9.github.io/spqdep/reference/summary.spqtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of estimated objects of class spqtest. — summary.spqtest","text":"","code":"# Example 1: With coordinates N <- 100 cx <- runif(N) cy <- runif(N) coor <- cbind(cx,cy) p <- c(1/6,3/6,2/6) rho = 0.5 listw <- spdep::nb2listw(spdep::knn2nb(               spdep::knearneigh(cbind(cx, cy), k = 4))) fx <- dgp.spq(list = listw, p = p, rho = rho) q.test <- Q.test(fx = fx, coor = coor, m = 3, r = 1) summary(q.test)     Qualitative Dependence Test (Q)     Distribution: asymptotic. Distance: Euclidean     Q       df       p.value       k       N       m       r       R       n       R/n       5k^m     V1 - standard-permutations     30.76 26 0.23727 3 100 3 1 49 27 1.81 135V1 - equivalent-combinations     14.00 9 0.12222 3 100 3 1 49 10 4.90 135plot(q.test) #> [[1]]  #>  #> [[2]]  #>"}]
